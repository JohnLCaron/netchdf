// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union tag_model_info {
 *     struct  dim;
 * };
 * }
 */
public class tag_model_info {

    public static MemoryLayout $LAYOUT() {
        return constants$125.const$2;
    }
    /**
     * {@snippet :
     * struct {
     *     int32 nt;
     *     intn ndim;
     *     int32* dims;
     * };
     * }
     */
    public static final class dim {

        // Suppresses default constructor, ensuring non-instantiability.
        private dim() {}
        public static MemoryLayout $LAYOUT() {
            return constants$125.const$3;
        }
        public static VarHandle nt$VH() {
            return constants$125.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int32 nt;
         * }
         */
        public static int nt$get(MemorySegment seg) {
            return (int)constants$125.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int32 nt;
         * }
         */
        public static void nt$set(MemorySegment seg, int x) {
            constants$125.const$4.set(seg, x);
        }
        public static int nt$get(MemorySegment seg, long index) {
            return (int)constants$125.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void nt$set(MemorySegment seg, long index, int x) {
            constants$125.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ndim$VH() {
            return constants$125.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * intn ndim;
         * }
         */
        public static int ndim$get(MemorySegment seg) {
            return (int)constants$125.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * intn ndim;
         * }
         */
        public static void ndim$set(MemorySegment seg, int x) {
            constants$125.const$5.set(seg, x);
        }
        public static int ndim$get(MemorySegment seg, long index) {
            return (int)constants$125.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void ndim$set(MemorySegment seg, long index, int x) {
            constants$125.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dims$VH() {
            return constants$126.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int32* dims;
         * }
         */
        public static MemorySegment dims$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$126.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int32* dims;
         * }
         */
        public static void dims$set(MemorySegment seg, MemorySegment x) {
            constants$126.const$0.set(seg, x);
        }
        public static MemorySegment dims$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$126.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void dims$set(MemorySegment seg, long index, MemorySegment x) {
            constants$126.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment dim$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


