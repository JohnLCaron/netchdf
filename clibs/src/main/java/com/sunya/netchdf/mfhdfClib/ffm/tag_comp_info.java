// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union tag_comp_info {
 *     struct  jpeg;
 *     struct  nbit;
 *     struct  skphuff;
 *     struct  deflate;
 *     struct  szip;
 * };
 * }
 */
public class tag_comp_info {

    public static MemoryLayout $LAYOUT() {
        return constants$126.const$1;
    }
    /**
     * {@snippet :
     * struct {
     *     intn quality;
     *     intn force_baseline;
     * };
     * }
     */
    public static final class jpeg {

        // Suppresses default constructor, ensuring non-instantiability.
        private jpeg() {}
        public static MemoryLayout $LAYOUT() {
            return constants$126.const$2;
        }
        public static VarHandle quality$VH() {
            return constants$126.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * intn quality;
         * }
         */
        public static int quality$get(MemorySegment seg) {
            return (int)constants$126.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * intn quality;
         * }
         */
        public static void quality$set(MemorySegment seg, int x) {
            constants$126.const$3.set(seg, x);
        }
        public static int quality$get(MemorySegment seg, long index) {
            return (int)constants$126.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void quality$set(MemorySegment seg, long index, int x) {
            constants$126.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle force_baseline$VH() {
            return constants$126.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * intn force_baseline;
         * }
         */
        public static int force_baseline$get(MemorySegment seg) {
            return (int)constants$126.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * intn force_baseline;
         * }
         */
        public static void force_baseline$set(MemorySegment seg, int x) {
            constants$126.const$4.set(seg, x);
        }
        public static int force_baseline$get(MemorySegment seg, long index) {
            return (int)constants$126.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void force_baseline$set(MemorySegment seg, long index, int x) {
            constants$126.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment jpeg$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    /**
     * {@snippet :
     * struct {
     *     int32 nt;
     *     intn sign_ext;
     *     intn fill_one;
     *     intn start_bit;
     *     intn bit_len;
     * };
     * }
     */
    public static final class nbit {

        // Suppresses default constructor, ensuring non-instantiability.
        private nbit() {}
        public static MemoryLayout $LAYOUT() {
            return constants$126.const$5;
        }
        public static VarHandle nt$VH() {
            return constants$127.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int32 nt;
         * }
         */
        public static int nt$get(MemorySegment seg) {
            return (int)constants$127.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int32 nt;
         * }
         */
        public static void nt$set(MemorySegment seg, int x) {
            constants$127.const$0.set(seg, x);
        }
        public static int nt$get(MemorySegment seg, long index) {
            return (int)constants$127.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void nt$set(MemorySegment seg, long index, int x) {
            constants$127.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sign_ext$VH() {
            return constants$127.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * intn sign_ext;
         * }
         */
        public static int sign_ext$get(MemorySegment seg) {
            return (int)constants$127.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * intn sign_ext;
         * }
         */
        public static void sign_ext$set(MemorySegment seg, int x) {
            constants$127.const$1.set(seg, x);
        }
        public static int sign_ext$get(MemorySegment seg, long index) {
            return (int)constants$127.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void sign_ext$set(MemorySegment seg, long index, int x) {
            constants$127.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fill_one$VH() {
            return constants$127.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * intn fill_one;
         * }
         */
        public static int fill_one$get(MemorySegment seg) {
            return (int)constants$127.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * intn fill_one;
         * }
         */
        public static void fill_one$set(MemorySegment seg, int x) {
            constants$127.const$2.set(seg, x);
        }
        public static int fill_one$get(MemorySegment seg, long index) {
            return (int)constants$127.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void fill_one$set(MemorySegment seg, long index, int x) {
            constants$127.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle start_bit$VH() {
            return constants$127.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * intn start_bit;
         * }
         */
        public static int start_bit$get(MemorySegment seg) {
            return (int)constants$127.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * intn start_bit;
         * }
         */
        public static void start_bit$set(MemorySegment seg, int x) {
            constants$127.const$3.set(seg, x);
        }
        public static int start_bit$get(MemorySegment seg, long index) {
            return (int)constants$127.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void start_bit$set(MemorySegment seg, long index, int x) {
            constants$127.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bit_len$VH() {
            return constants$127.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * intn bit_len;
         * }
         */
        public static int bit_len$get(MemorySegment seg) {
            return (int)constants$127.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * intn bit_len;
         * }
         */
        public static void bit_len$set(MemorySegment seg, int x) {
            constants$127.const$4.set(seg, x);
        }
        public static int bit_len$get(MemorySegment seg, long index) {
            return (int)constants$127.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void bit_len$set(MemorySegment seg, long index, int x) {
            constants$127.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment nbit$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    /**
     * {@snippet :
     * struct {
     *     intn skp_size;
     * };
     * }
     */
    public static final class skphuff {

        // Suppresses default constructor, ensuring non-instantiability.
        private skphuff() {}
        public static MemoryLayout $LAYOUT() {
            return constants$127.const$5;
        }
        public static VarHandle skp_size$VH() {
            return constants$128.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * intn skp_size;
         * }
         */
        public static int skp_size$get(MemorySegment seg) {
            return (int)constants$128.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * intn skp_size;
         * }
         */
        public static void skp_size$set(MemorySegment seg, int x) {
            constants$128.const$0.set(seg, x);
        }
        public static int skp_size$get(MemorySegment seg, long index) {
            return (int)constants$128.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void skp_size$set(MemorySegment seg, long index, int x) {
            constants$128.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment skphuff$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    /**
     * {@snippet :
     * struct {
     *     intn level;
     * };
     * }
     */
    public static final class deflate {

        // Suppresses default constructor, ensuring non-instantiability.
        private deflate() {}
        public static MemoryLayout $LAYOUT() {
            return constants$128.const$1;
        }
        public static VarHandle level$VH() {
            return constants$128.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * intn level;
         * }
         */
        public static int level$get(MemorySegment seg) {
            return (int)constants$128.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * intn level;
         * }
         */
        public static void level$set(MemorySegment seg, int x) {
            constants$128.const$2.set(seg, x);
        }
        public static int level$get(MemorySegment seg, long index) {
            return (int)constants$128.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void level$set(MemorySegment seg, long index, int x) {
            constants$128.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment deflate$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    /**
     * {@snippet :
     * struct {
     *     int32 options_mask;
     *     int32 pixels_per_block;
     *     int32 pixels_per_scanline;
     *     int32 bits_per_pixel;
     *     int32 pixels;
     * };
     * }
     */
    public static final class szip {

        // Suppresses default constructor, ensuring non-instantiability.
        private szip() {}
        public static MemoryLayout $LAYOUT() {
            return constants$128.const$3;
        }
        public static VarHandle options_mask$VH() {
            return constants$128.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int32 options_mask;
         * }
         */
        public static int options_mask$get(MemorySegment seg) {
            return (int)constants$128.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int32 options_mask;
         * }
         */
        public static void options_mask$set(MemorySegment seg, int x) {
            constants$128.const$4.set(seg, x);
        }
        public static int options_mask$get(MemorySegment seg, long index) {
            return (int)constants$128.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void options_mask$set(MemorySegment seg, long index, int x) {
            constants$128.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pixels_per_block$VH() {
            return constants$128.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int32 pixels_per_block;
         * }
         */
        public static int pixels_per_block$get(MemorySegment seg) {
            return (int)constants$128.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int32 pixels_per_block;
         * }
         */
        public static void pixels_per_block$set(MemorySegment seg, int x) {
            constants$128.const$5.set(seg, x);
        }
        public static int pixels_per_block$get(MemorySegment seg, long index) {
            return (int)constants$128.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void pixels_per_block$set(MemorySegment seg, long index, int x) {
            constants$128.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pixels_per_scanline$VH() {
            return constants$129.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int32 pixels_per_scanline;
         * }
         */
        public static int pixels_per_scanline$get(MemorySegment seg) {
            return (int)constants$129.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int32 pixels_per_scanline;
         * }
         */
        public static void pixels_per_scanline$set(MemorySegment seg, int x) {
            constants$129.const$0.set(seg, x);
        }
        public static int pixels_per_scanline$get(MemorySegment seg, long index) {
            return (int)constants$129.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void pixels_per_scanline$set(MemorySegment seg, long index, int x) {
            constants$129.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bits_per_pixel$VH() {
            return constants$129.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int32 bits_per_pixel;
         * }
         */
        public static int bits_per_pixel$get(MemorySegment seg) {
            return (int)constants$129.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int32 bits_per_pixel;
         * }
         */
        public static void bits_per_pixel$set(MemorySegment seg, int x) {
            constants$129.const$1.set(seg, x);
        }
        public static int bits_per_pixel$get(MemorySegment seg, long index) {
            return (int)constants$129.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void bits_per_pixel$set(MemorySegment seg, long index, int x) {
            constants$129.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pixels$VH() {
            return constants$129.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int32 pixels;
         * }
         */
        public static int pixels$get(MemorySegment seg) {
            return (int)constants$129.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int32 pixels;
         * }
         */
        public static void pixels$set(MemorySegment seg, int x) {
            constants$129.const$2.set(seg, x);
        }
        public static int pixels$get(MemorySegment seg, long index) {
            return (int)constants$129.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void pixels$set(MemorySegment seg, long index, int x) {
            constants$129.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment szip$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


