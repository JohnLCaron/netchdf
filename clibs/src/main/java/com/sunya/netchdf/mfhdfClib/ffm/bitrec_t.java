// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct bitrec_t {
 *     int32 acc_id;
 *     int32 bit_id;
 *     int32 block_offset;
 *     int32 max_offset;
 *     int32 byte_offset;
 *     intn count;
 *     intn buf_read;
 *     uint8 access;
 *     uint8 mode;
 *     uint8 bits;
 *     uint8* bytep;
 *     uint8* bytez;
 *     uint8* bytea;
 * };
 * }
 */
public class bitrec_t {

    public static MemoryLayout $LAYOUT() {
        return constants$122.const$3;
    }
    public static VarHandle acc_id$VH() {
        return constants$122.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32 acc_id;
     * }
     */
    public static int acc_id$get(MemorySegment seg) {
        return (int)constants$122.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32 acc_id;
     * }
     */
    public static void acc_id$set(MemorySegment seg, int x) {
        constants$122.const$4.set(seg, x);
    }
    public static int acc_id$get(MemorySegment seg, long index) {
        return (int)constants$122.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void acc_id$set(MemorySegment seg, long index, int x) {
        constants$122.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bit_id$VH() {
        return constants$122.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32 bit_id;
     * }
     */
    public static int bit_id$get(MemorySegment seg) {
        return (int)constants$122.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32 bit_id;
     * }
     */
    public static void bit_id$set(MemorySegment seg, int x) {
        constants$122.const$5.set(seg, x);
    }
    public static int bit_id$get(MemorySegment seg, long index) {
        return (int)constants$122.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_id$set(MemorySegment seg, long index, int x) {
        constants$122.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle block_offset$VH() {
        return constants$123.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32 block_offset;
     * }
     */
    public static int block_offset$get(MemorySegment seg) {
        return (int)constants$123.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32 block_offset;
     * }
     */
    public static void block_offset$set(MemorySegment seg, int x) {
        constants$123.const$0.set(seg, x);
    }
    public static int block_offset$get(MemorySegment seg, long index) {
        return (int)constants$123.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void block_offset$set(MemorySegment seg, long index, int x) {
        constants$123.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_offset$VH() {
        return constants$123.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32 max_offset;
     * }
     */
    public static int max_offset$get(MemorySegment seg) {
        return (int)constants$123.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32 max_offset;
     * }
     */
    public static void max_offset$set(MemorySegment seg, int x) {
        constants$123.const$1.set(seg, x);
    }
    public static int max_offset$get(MemorySegment seg, long index) {
        return (int)constants$123.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void max_offset$set(MemorySegment seg, long index, int x) {
        constants$123.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle byte_offset$VH() {
        return constants$123.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32 byte_offset;
     * }
     */
    public static int byte_offset$get(MemorySegment seg) {
        return (int)constants$123.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32 byte_offset;
     * }
     */
    public static void byte_offset$set(MemorySegment seg, int x) {
        constants$123.const$2.set(seg, x);
    }
    public static int byte_offset$get(MemorySegment seg, long index) {
        return (int)constants$123.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void byte_offset$set(MemorySegment seg, long index, int x) {
        constants$123.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle count$VH() {
        return constants$123.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * intn count;
     * }
     */
    public static int count$get(MemorySegment seg) {
        return (int)constants$123.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * intn count;
     * }
     */
    public static void count$set(MemorySegment seg, int x) {
        constants$123.const$3.set(seg, x);
    }
    public static int count$get(MemorySegment seg, long index) {
        return (int)constants$123.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void count$set(MemorySegment seg, long index, int x) {
        constants$123.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle buf_read$VH() {
        return constants$123.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * intn buf_read;
     * }
     */
    public static int buf_read$get(MemorySegment seg) {
        return (int)constants$123.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * intn buf_read;
     * }
     */
    public static void buf_read$set(MemorySegment seg, int x) {
        constants$123.const$4.set(seg, x);
    }
    public static int buf_read$get(MemorySegment seg, long index) {
        return (int)constants$123.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void buf_read$set(MemorySegment seg, long index, int x) {
        constants$123.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle access$VH() {
        return constants$123.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8 access;
     * }
     */
    public static byte access$get(MemorySegment seg) {
        return (byte)constants$123.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8 access;
     * }
     */
    public static void access$set(MemorySegment seg, byte x) {
        constants$123.const$5.set(seg, x);
    }
    public static byte access$get(MemorySegment seg, long index) {
        return (byte)constants$123.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void access$set(MemorySegment seg, long index, byte x) {
        constants$123.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mode$VH() {
        return constants$124.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8 mode;
     * }
     */
    public static byte mode$get(MemorySegment seg) {
        return (byte)constants$124.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8 mode;
     * }
     */
    public static void mode$set(MemorySegment seg, byte x) {
        constants$124.const$0.set(seg, x);
    }
    public static byte mode$get(MemorySegment seg, long index) {
        return (byte)constants$124.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void mode$set(MemorySegment seg, long index, byte x) {
        constants$124.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bits$VH() {
        return constants$124.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8 bits;
     * }
     */
    public static byte bits$get(MemorySegment seg) {
        return (byte)constants$124.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8 bits;
     * }
     */
    public static void bits$set(MemorySegment seg, byte x) {
        constants$124.const$1.set(seg, x);
    }
    public static byte bits$get(MemorySegment seg, long index) {
        return (byte)constants$124.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void bits$set(MemorySegment seg, long index, byte x) {
        constants$124.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bytep$VH() {
        return constants$124.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8* bytep;
     * }
     */
    public static MemorySegment bytep$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$124.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8* bytep;
     * }
     */
    public static void bytep$set(MemorySegment seg, MemorySegment x) {
        constants$124.const$2.set(seg, x);
    }
    public static MemorySegment bytep$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$124.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bytep$set(MemorySegment seg, long index, MemorySegment x) {
        constants$124.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bytez$VH() {
        return constants$124.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8* bytez;
     * }
     */
    public static MemorySegment bytez$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$124.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8* bytez;
     * }
     */
    public static void bytez$set(MemorySegment seg, MemorySegment x) {
        constants$124.const$3.set(seg, x);
    }
    public static MemorySegment bytez$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$124.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void bytez$set(MemorySegment seg, long index, MemorySegment x) {
        constants$124.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bytea$VH() {
        return constants$124.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8* bytea;
     * }
     */
    public static MemorySegment bytea$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$124.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8* bytea;
     * }
     */
    public static void bytea$set(MemorySegment seg, MemorySegment x) {
        constants$124.const$4.set(seg, x);
    }
    public static MemorySegment bytea$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$124.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void bytea$set(MemorySegment seg, long index, MemorySegment x) {
        constants$124.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


