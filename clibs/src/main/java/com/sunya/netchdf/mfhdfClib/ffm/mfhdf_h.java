// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class mfhdf_h extends mfhdf_h_2 {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define HDF 1
     * }
     */
    public static int HDF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_ARPA_INET_H 1
     * }
     */
    public static int H4_HAVE_ARPA_INET_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_DLFCN_H 1
     * }
     */
    public static int H4_HAVE_DLFCN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_FCNTL_H 1
     * }
     */
    public static int H4_HAVE_FCNTL_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_FORK 1
     * }
     */
    public static int H4_HAVE_FORK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_HTONL 1
     * }
     */
    public static int H4_HAVE_HTONL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_HTONS 1
     * }
     */
    public static int H4_HAVE_HTONS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_INTTYPES_H 1
     * }
     */
    public static int H4_HAVE_INTTYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_JPEGLIB_H 1
     * }
     */
    public static int H4_HAVE_JPEGLIB_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_LIBJPEG 1
     * }
     */
    public static int H4_HAVE_LIBJPEG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_LIBZ 1
     * }
     */
    public static int H4_HAVE_LIBZ() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_NETINET_IN_H 1
     * }
     */
    public static int H4_HAVE_NETINET_IN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_NTOHL 1
     * }
     */
    public static int H4_HAVE_NTOHL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_NTOHS 1
     * }
     */
    public static int H4_HAVE_NTOHS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_STDINT_H 1
     * }
     */
    public static int H4_HAVE_STDINT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_STDIO_H 1
     * }
     */
    public static int H4_HAVE_STDIO_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_STDLIB_H 1
     * }
     */
    public static int H4_HAVE_STDLIB_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_STRINGS_H 1
     * }
     */
    public static int H4_HAVE_STRINGS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_STRING_H 1
     * }
     */
    public static int H4_HAVE_STRING_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_SYSTEM 1
     * }
     */
    public static int H4_HAVE_SYSTEM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_SYS_FILE_H 1
     * }
     */
    public static int H4_HAVE_SYS_FILE_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_SYS_RESOURCE_H 1
     * }
     */
    public static int H4_HAVE_SYS_RESOURCE_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_SYS_STAT_H 1
     * }
     */
    public static int H4_HAVE_SYS_STAT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_SYS_TIME_H 1
     * }
     */
    public static int H4_HAVE_SYS_TIME_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_SYS_TYPES_H 1
     * }
     */
    public static int H4_HAVE_SYS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_SYS_WAIT_H 1
     * }
     */
    public static int H4_HAVE_SYS_WAIT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_UNISTD_H 1
     * }
     */
    public static int H4_HAVE_UNISTD_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_WAIT 1
     * }
     */
    public static int H4_HAVE_WAIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_HAVE_ZLIB_H 1
     * }
     */
    public static int H4_HAVE_ZLIB_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define H4_STDC_HEADERS 1
     * }
     */
    public static int H4_STDC_HEADERS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFMT_LE 17473
     * }
     */
    public static int DFMT_LE() {
        return (int)17473L;
    }
    /**
     * {@snippet :
     * #define DFMT_BE 4369
     * }
     */
    public static int DFMT_BE() {
        return (int)4369L;
    }
    /**
     * {@snippet :
     * #define UNIXUNBUFIO 1
     * }
     */
    public static int UNIXUNBUFIO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define UNIXBUFIO 2
     * }
     */
    public static int UNIXBUFIO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define MACIO 3
     * }
     */
    public static int MACIO() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _ASSERT_H 1
     * }
     */
    public static int _ASSERT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_C2X_STRTOL 0
     * }
     */
    public static int __GLIBC_USE_C2X_STRTOL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_MINOR__ 39
     * }
     */
    public static int __GLIBC_MINOR__() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _CTYPE_H 1
     * }
     */
    public static int _CTYPE_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIAN_H 1
     * }
     */
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LITTLE_ENDIAN 1234
     * }
     */
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __BIG_ENDIAN 4321
     * }
     */
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define __PDP_ENDIAN 3412
     * }
     */
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIANNESS_H 1
     * }
     */
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES_LOCALE_T_H 1
     * }
     */
    public static int _BITS_TYPES_LOCALE_T_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES___LOCALE_T_H 1
     * }
     */
    public static int _BITS_TYPES___LOCALE_T_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _INTTYPES_H 1
     * }
     */
    public static int _INTTYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_LEAST_H 1
     * }
     */
    public static int _BITS_STDINT_LEAST_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ____gwchar_t_defined 1
     * }
     */
    public static int ____gwchar_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _LIBC_LIMITS_H_ 1
     * }
     */
    public static int _LIBC_LIMITS_H_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define MB_LEN_MAX 16
     * }
     */
    public static int MB_LEN_MAX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _BITS_POSIX1_LIM_H 1
     * }
     */
    public static int _BITS_POSIX1_LIM_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_AIO_LISTIO_MAX 2
     * }
     */
    public static int _POSIX_AIO_LISTIO_MAX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _POSIX_AIO_MAX 1
     * }
     */
    public static int _POSIX_AIO_MAX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_ARG_MAX 4096
     * }
     */
    public static int _POSIX_ARG_MAX() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define _POSIX_CHILD_MAX 25
     * }
     */
    public static int _POSIX_CHILD_MAX() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define _POSIX_DELAYTIMER_MAX 32
     * }
     */
    public static int _POSIX_DELAYTIMER_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_HOST_NAME_MAX 255
     * }
     */
    public static int _POSIX_HOST_NAME_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_LINK_MAX 8
     * }
     */
    public static int _POSIX_LINK_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_LOGIN_NAME_MAX 9
     * }
     */
    public static int _POSIX_LOGIN_NAME_MAX() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MAX_CANON 255
     * }
     */
    public static int _POSIX_MAX_CANON() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MAX_INPUT 255
     * }
     */
    public static int _POSIX_MAX_INPUT() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MQ_OPEN_MAX 8
     * }
     */
    public static int _POSIX_MQ_OPEN_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MQ_PRIO_MAX 32
     * }
     */
    public static int _POSIX_MQ_PRIO_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_NAME_MAX 14
     * }
     */
    public static int _POSIX_NAME_MAX() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define _POSIX_NGROUPS_MAX 8
     * }
     */
    public static int _POSIX_NGROUPS_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_OPEN_MAX 20
     * }
     */
    public static int _POSIX_OPEN_MAX() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define _POSIX_PATH_MAX 256
     * }
     */
    public static int _POSIX_PATH_MAX() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define _POSIX_PIPE_BUF 512
     * }
     */
    public static int _POSIX_PIPE_BUF() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define _POSIX_RE_DUP_MAX 255
     * }
     */
    public static int _POSIX_RE_DUP_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_RTSIG_MAX 8
     * }
     */
    public static int _POSIX_RTSIG_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SEM_NSEMS_MAX 256
     * }
     */
    public static int _POSIX_SEM_NSEMS_MAX() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SEM_VALUE_MAX 32767
     * }
     */
    public static int _POSIX_SEM_VALUE_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SIGQUEUE_MAX 32
     * }
     */
    public static int _POSIX_SIGQUEUE_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SSIZE_MAX 32767
     * }
     */
    public static int _POSIX_SSIZE_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define _POSIX_STREAM_MAX 8
     * }
     */
    public static int _POSIX_STREAM_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SYMLINK_MAX 255
     * }
     */
    public static int _POSIX_SYMLINK_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SYMLOOP_MAX 8
     * }
     */
    public static int _POSIX_SYMLOOP_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TIMER_MAX 32
     * }
     */
    public static int _POSIX_TIMER_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TTY_NAME_MAX 9
     * }
     */
    public static int _POSIX_TTY_NAME_MAX() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TZNAME_MAX 6
     * }
     */
    public static int _POSIX_TZNAME_MAX() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define _POSIX_CLOCKRES_MIN 20000000
     * }
     */
    public static int _POSIX_CLOCKRES_MIN() {
        return (int)20000000L;
    }
    /**
     * {@snippet :
     * #define NR_OPEN 1024
     * }
     */
    public static int NR_OPEN() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NGROUPS_MAX 65536
     * }
     */
    public static int NGROUPS_MAX() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define ARG_MAX 131072
     * }
     */
    public static int ARG_MAX() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define LINK_MAX 127
     * }
     */
    public static int LINK_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define MAX_CANON 255
     * }
     */
    public static int MAX_CANON() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define MAX_INPUT 255
     * }
     */
    public static int MAX_INPUT() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define NAME_MAX 255
     * }
     */
    public static int NAME_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define PATH_MAX 4096
     * }
     */
    public static int PATH_MAX() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define PIPE_BUF 4096
     * }
     */
    public static int PIPE_BUF() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define XATTR_NAME_MAX 255
     * }
     */
    public static int XATTR_NAME_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define XATTR_SIZE_MAX 65536
     * }
     */
    public static int XATTR_SIZE_MAX() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define XATTR_LIST_MAX 65536
     * }
     */
    public static int XATTR_LIST_MAX() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define RTSIG_MAX 32
     * }
     */
    public static int RTSIG_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_KEYS_MAX 128
     * }
     */
    public static int _POSIX_THREAD_KEYS_MAX() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define PTHREAD_KEYS_MAX 1024
     * }
     */
    public static int PTHREAD_KEYS_MAX() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int _POSIX_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_THREADS_MAX 64
     * }
     */
    public static int _POSIX_THREAD_THREADS_MAX() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define AIO_PRIO_DELTA_MAX 20
     * }
     */
    public static int AIO_PRIO_DELTA_MAX() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define PTHREAD_STACK_MIN 16384
     * }
     */
    public static int PTHREAD_STACK_MIN() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define DELAYTIMER_MAX 2147483647
     * }
     */
    public static int DELAYTIMER_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define TTY_NAME_MAX 32
     * }
     */
    public static int TTY_NAME_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define LOGIN_NAME_MAX 256
     * }
     */
    public static int LOGIN_NAME_MAX() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define HOST_NAME_MAX 64
     * }
     */
    public static int HOST_NAME_MAX() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define MQ_PRIO_MAX 32768
     * }
     */
    public static int MQ_PRIO_MAX() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define _BITS_POSIX2_LIM_H 1
     * }
     */
    public static int _BITS_POSIX2_LIM_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_BC_BASE_MAX 99
     * }
     */
    public static int _POSIX2_BC_BASE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_BC_DIM_MAX 2048
     * }
     */
    public static int _POSIX2_BC_DIM_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_BC_SCALE_MAX 99
     * }
     */
    public static int _POSIX2_BC_SCALE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_BC_STRING_MAX 1000
     * }
     */
    public static int _POSIX2_BC_STRING_MAX() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_COLL_WEIGHTS_MAX 2
     * }
     */
    public static int _POSIX2_COLL_WEIGHTS_MAX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_EXPR_NEST_MAX 32
     * }
     */
    public static int _POSIX2_EXPR_NEST_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_LINE_MAX 2048
     * }
     */
    public static int _POSIX2_LINE_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_RE_DUP_MAX 255
     * }
     */
    public static int _POSIX2_RE_DUP_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_CHARCLASS_NAME_MAX 14
     * }
     */
    public static int _POSIX2_CHARCLASS_NAME_MAX() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define COLL_WEIGHTS_MAX 255
     * }
     */
    public static int COLL_WEIGHTS_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define CHARCLASS_NAME_MAX 2048
     * }
     */
    public static int CHARCLASS_NAME_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define _STDIO_H 1
     * }
     */
    public static int _STDIO_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GNUC_VA_LIST 1
     * }
     */
    public static int __GNUC_VA_LIST() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _____fpos_t_defined 1
     * }
     */
    public static int _____fpos_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ____mbstate_t_defined 1
     * }
     */
    public static int ____mbstate_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _____fpos64_t_defined 1
     * }
     */
    public static int _____fpos64_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ____FILE_defined 1
     * }
     */
    public static int ____FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FILE_defined 1
     * }
     */
    public static int __FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __struct_FILE_defined 1
     * }
     */
    public static int __struct_FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IO_EOF_SEEN 16
     * }
     */
    public static int _IO_EOF_SEEN() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _IO_ERR_SEEN 32
     * }
     */
    public static int _IO_ERR_SEEN() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _IO_USER_LOCK 32768
     * }
     */
    public static int _IO_USER_LOCK() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define __cookie_io_functions_t_defined 1
     * }
     */
    public static int __cookie_io_functions_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IOFBF 0
     * }
     */
    public static int _IOFBF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _IOLBF 1
     * }
     */
    public static int _IOLBF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IONBF 2
     * }
     */
    public static int _IONBF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define BUFSIZ 8192
     * }
     */
    public static int BUFSIZ() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define L_tmpnam 20
     * }
     */
    public static int L_tmpnam() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define TMP_MAX 238328
     * }
     */
    public static int TMP_MAX() {
        return (int)238328L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDIO_LIM_H 1
     * }
     */
    public static int _BITS_STDIO_LIM_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FILENAME_MAX 4096
     * }
     */
    public static int FILENAME_MAX() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define L_ctermid 9
     * }
     */
    public static int L_ctermid() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define FOPEN_MAX 16
     * }
     */
    public static int FOPEN_MAX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128 0
     * }
     */
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X 1
     * }
     */
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X_LONG_DOUBLE 1
     * }
     */
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT16 0
     * }
     */
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32 1
     * }
     */
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64 1
     * }
     */
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32X 1
     * }
     */
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128X 0
     * }
     */
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOATN_NOT_TYPEDEF 0
     * }
     */
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDLIB_H 1
     * }
     */
    public static int _STDLIB_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WNOHANG 1
     * }
     */
    public static int WNOHANG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WUNTRACED 2
     * }
     */
    public static int WUNTRACED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WSTOPPED 2
     * }
     */
    public static int WSTOPPED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WEXITED 4
     * }
     */
    public static int WEXITED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define WCONTINUED 8
     * }
     */
    public static int WCONTINUED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define WNOWAIT 16777216
     * }
     */
    public static int WNOWAIT() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * #define __WNOTHREAD 536870912
     * }
     */
    public static int __WNOTHREAD() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * #define __WALL 1073741824
     * }
     */
    public static int __WALL() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define __W_CONTINUED 65535
     * }
     */
    public static int __W_CONTINUED() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define __WCOREFLAG 128
     * }
     */
    public static int __WCOREFLAG() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define __ldiv_t_defined 1
     * }
     */
    public static int __ldiv_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __lldiv_t_defined 1
     * }
     */
    public static int __lldiv_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RAND_MAX 2147483647
     * }
     */
    public static int RAND_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define EXIT_FAILURE 1
     * }
     */
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EXIT_SUCCESS 0
     * }
     */
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _SYS_TYPES_H 1
     * }
     */
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clock_t_defined 1
     * }
     */
    public static int __clock_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clockid_t_defined 1
     * }
     */
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __time_t_defined 1
     * }
     */
    public static int __time_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timer_t_defined 1
     * }
     */
    public static int __timer_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __BIT_TYPES_DEFINED__ 1
     * }
     */
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ENDIAN_H 1
     * }
     */
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_BYTESWAP_H 1
     * }
     */
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_UINTN_IDENTITY_H 1
     * }
     */
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_SELECT_H 1
     * }
     */
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __sigset_t_defined 1
     * }
     */
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timeval_defined 1
     * }
     */
    public static int __timeval_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STRUCT_TIMESPEC 1
     * }
     */
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_COMMON_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _THREAD_SHARED_TYPES_H 1
     * }
     */
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_ARCH_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEX_T 40
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_ATTR_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCK_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIER_T 32
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEXATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_COND_T 48
     * }
     */
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_CONDATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIERATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _THREAD_MUTEX_INTERNAL_H 1
     * }
     */
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_MUTEX_HAVE_PREV 1
     * }
     */
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __have_pthread_attr_t 1
     * }
     */
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ALLOCA_H 1
     * }
     */
    public static int _ALLOCA_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STRING_H 1
     * }
     */
    public static int _STRING_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STRINGS_H 1
     * }
     */
    public static int _STRINGS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _TIME_H 1
     * }
     */
    public static int _TIME_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TIME_H 1
     * }
     */
    public static int _BITS_TIME_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CLOCK_REALTIME 0
     * }
     */
    public static int CLOCK_REALTIME() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define CLOCK_MONOTONIC 1
     * }
     */
    public static int CLOCK_MONOTONIC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CLOCK_PROCESS_CPUTIME_ID 2
     * }
     */
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CLOCK_THREAD_CPUTIME_ID 3
     * }
     */
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define CLOCK_MONOTONIC_RAW 4
     * }
     */
    public static int CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CLOCK_REALTIME_COARSE 5
     * }
     */
    public static int CLOCK_REALTIME_COARSE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define CLOCK_MONOTONIC_COARSE 6
     * }
     */
    public static int CLOCK_MONOTONIC_COARSE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define CLOCK_BOOTTIME 7
     * }
     */
    public static int CLOCK_BOOTTIME() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define CLOCK_REALTIME_ALARM 8
     * }
     */
    public static int CLOCK_REALTIME_ALARM() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CLOCK_BOOTTIME_ALARM 9
     * }
     */
    public static int CLOCK_BOOTTIME_ALARM() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define CLOCK_TAI 11
     * }
     */
    public static int CLOCK_TAI() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define TIMER_ABSTIME 1
     * }
     */
    public static int TIMER_ABSTIME() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __struct_tm_defined 1
     * }
     */
    public static int __struct_tm_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __itimerspec_defined 1
     * }
     */
    public static int __itimerspec_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define TIME_UTC 1
     * }
     */
    public static int TIME_UTC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _FCNTL_H 1
     * }
     */
    public static int _FCNTL_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __O_LARGEFILE 0
     * }
     */
    public static int __O_LARGEFILE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define F_GETLK64 5
     * }
     */
    public static int F_GETLK64() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define F_SETLK64 6
     * }
     */
    public static int F_SETLK64() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define F_SETLKW64 7
     * }
     */
    public static int F_SETLKW64() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define O_ACCMODE 3
     * }
     */
    public static int O_ACCMODE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define O_RDONLY 0
     * }
     */
    public static int O_RDONLY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define O_WRONLY 1
     * }
     */
    public static int O_WRONLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define O_RDWR 2
     * }
     */
    public static int O_RDWR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define O_CREAT 64
     * }
     */
    public static int O_CREAT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define O_EXCL 128
     * }
     */
    public static int O_EXCL() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define O_NOCTTY 256
     * }
     */
    public static int O_NOCTTY() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define O_TRUNC 512
     * }
     */
    public static int O_TRUNC() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define O_APPEND 1024
     * }
     */
    public static int O_APPEND() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define O_NONBLOCK 2048
     * }
     */
    public static int O_NONBLOCK() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define O_SYNC 1052672
     * }
     */
    public static int O_SYNC() {
        return (int)1052672L;
    }
    /**
     * {@snippet :
     * #define O_ASYNC 8192
     * }
     */
    public static int O_ASYNC() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define __O_DIRECTORY 65536
     * }
     */
    public static int __O_DIRECTORY() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define __O_NOFOLLOW 131072
     * }
     */
    public static int __O_NOFOLLOW() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define __O_CLOEXEC 524288
     * }
     */
    public static int __O_CLOEXEC() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * #define __O_DIRECT 16384
     * }
     */
    public static int __O_DIRECT() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define __O_NOATIME 262144
     * }
     */
    public static int __O_NOATIME() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * #define __O_PATH 2097152
     * }
     */
    public static int __O_PATH() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * #define __O_DSYNC 4096
     * }
     */
    public static int __O_DSYNC() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define F_DUPFD 0
     * }
     */
    public static int F_DUPFD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define F_GETFD 1
     * }
     */
    public static int F_GETFD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define F_SETFD 2
     * }
     */
    public static int F_SETFD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define F_GETFL 3
     * }
     */
    public static int F_GETFL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define F_SETFL 4
     * }
     */
    public static int F_SETFL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __F_SETOWN 8
     * }
     */
    public static int __F_SETOWN() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __F_GETOWN 9
     * }
     */
    public static int __F_GETOWN() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define __F_SETSIG 10
     * }
     */
    public static int __F_SETSIG() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define __F_GETSIG 11
     * }
     */
    public static int __F_GETSIG() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define __F_SETOWN_EX 15
     * }
     */
    public static int __F_SETOWN_EX() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define __F_GETOWN_EX 16
     * }
     */
    public static int __F_GETOWN_EX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define F_DUPFD_CLOEXEC 1030
     * }
     */
    public static int F_DUPFD_CLOEXEC() {
        return (int)1030L;
    }
    /**
     * {@snippet :
     * #define FD_CLOEXEC 1
     * }
     */
    public static int FD_CLOEXEC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define F_RDLCK 0
     * }
     */
    public static int F_RDLCK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define F_WRLCK 1
     * }
     */
    public static int F_WRLCK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define F_UNLCK 2
     * }
     */
    public static int F_UNLCK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define F_EXLCK 4
     * }
     */
    public static int F_EXLCK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define F_SHLCK 8
     * }
     */
    public static int F_SHLCK() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define LOCK_SH 1
     * }
     */
    public static int LOCK_SH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define LOCK_EX 2
     * }
     */
    public static int LOCK_EX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define LOCK_NB 4
     * }
     */
    public static int LOCK_NB() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define LOCK_UN 8
     * }
     */
    public static int LOCK_UN() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __POSIX_FADV_DONTNEED 4
     * }
     */
    public static int __POSIX_FADV_DONTNEED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __POSIX_FADV_NOREUSE 5
     * }
     */
    public static int __POSIX_FADV_NOREUSE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define POSIX_FADV_NORMAL 0
     * }
     */
    public static int POSIX_FADV_NORMAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define POSIX_FADV_RANDOM 1
     * }
     */
    public static int POSIX_FADV_RANDOM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define POSIX_FADV_SEQUENTIAL 2
     * }
     */
    public static int POSIX_FADV_SEQUENTIAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define POSIX_FADV_WILLNEED 3
     * }
     */
    public static int POSIX_FADV_WILLNEED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _BITS_STAT_H 1
     * }
     */
    public static int _BITS_STAT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STRUCT_STAT_H 1
     * }
     */
    public static int _BITS_STRUCT_STAT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __S_IFMT 61440
     * }
     */
    public static int __S_IFMT() {
        return (int)61440L;
    }
    /**
     * {@snippet :
     * #define __S_IFDIR 16384
     * }
     */
    public static int __S_IFDIR() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define __S_IFCHR 8192
     * }
     */
    public static int __S_IFCHR() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define __S_IFBLK 24576
     * }
     */
    public static int __S_IFBLK() {
        return (int)24576L;
    }
    /**
     * {@snippet :
     * #define __S_IFREG 32768
     * }
     */
    public static int __S_IFREG() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define __S_IFIFO 4096
     * }
     */
    public static int __S_IFIFO() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define __S_IFLNK 40960
     * }
     */
    public static int __S_IFLNK() {
        return (int)40960L;
    }
    /**
     * {@snippet :
     * #define __S_IFSOCK 49152
     * }
     */
    public static int __S_IFSOCK() {
        return (int)49152L;
    }
    /**
     * {@snippet :
     * #define __S_ISUID 2048
     * }
     */
    public static int __S_ISUID() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define __S_ISGID 1024
     * }
     */
    public static int __S_ISGID() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define __S_ISVTX 512
     * }
     */
    public static int __S_ISVTX() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define __S_IREAD 256
     * }
     */
    public static int __S_IREAD() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define __S_IWRITE 128
     * }
     */
    public static int __S_IWRITE() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define __S_IEXEC 64
     * }
     */
    public static int __S_IEXEC() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define R_OK 4
     * }
     */
    public static int R_OK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define W_OK 2
     * }
     */
    public static int W_OK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define X_OK 1
     * }
     */
    public static int X_OK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define F_OK 0
     * }
     */
    public static int F_OK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define AT_SYMLINK_NOFOLLOW 256
     * }
     */
    public static int AT_SYMLINK_NOFOLLOW() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define AT_REMOVEDIR 512
     * }
     */
    public static int AT_REMOVEDIR() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define AT_SYMLINK_FOLLOW 1024
     * }
     */
    public static int AT_SYMLINK_FOLLOW() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define AT_EACCESS 512
     * }
     */
    public static int AT_EACCESS() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define F_ULOCK 0
     * }
     */
    public static int F_ULOCK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define F_LOCK 1
     * }
     */
    public static int F_LOCK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define F_TLOCK 2
     * }
     */
    public static int F_TLOCK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define F_TEST 3
     * }
     */
    public static int F_TEST() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _UNISTD_H 1
     * }
     */
    public static int _UNISTD_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_VERSION 700
     * }
     */
    public static int _XOPEN_VERSION() {
        return (int)700L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_XCU_VERSION 4
     * }
     */
    public static int _XOPEN_XCU_VERSION() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_XPG2 1
     * }
     */
    public static int _XOPEN_XPG2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_XPG3 1
     * }
     */
    public static int _XOPEN_XPG3() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_XPG4 1
     * }
     */
    public static int _XOPEN_XPG4() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_UNIX 1
     * }
     */
    public static int _XOPEN_UNIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_ENH_I18N 1
     * }
     */
    public static int _XOPEN_ENH_I18N() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_LEGACY 1
     * }
     */
    public static int _XOPEN_LEGACY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_POSIX_OPT_H 1
     * }
     */
    public static int _BITS_POSIX_OPT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_JOB_CONTROL 1
     * }
     */
    public static int _POSIX_JOB_CONTROL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SAVED_IDS 1
     * }
     */
    public static int _POSIX_SAVED_IDS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_CHOWN_RESTRICTED 0
     * }
     */
    public static int _POSIX_CHOWN_RESTRICTED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _POSIX_NO_TRUNC 1
     * }
     */
    public static int _POSIX_NO_TRUNC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_REALTIME 1
     * }
     */
    public static int _XOPEN_REALTIME() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_REALTIME_THREADS 1
     * }
     */
    public static int _XOPEN_REALTIME_THREADS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_SHM 1
     * }
     */
    public static int _XOPEN_SHM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_REENTRANT_FUNCTIONS 1
     * }
     */
    public static int _POSIX_REENTRANT_FUNCTIONS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_ASYNC_IO 1
     * }
     */
    public static int _POSIX_ASYNC_IO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _LFS_ASYNCHRONOUS_IO 1
     * }
     */
    public static int _LFS_ASYNCHRONOUS_IO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _LFS64_ASYNCHRONOUS_IO 1
     * }
     */
    public static int _LFS64_ASYNCHRONOUS_IO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _LFS_LARGEFILE 1
     * }
     */
    public static int _LFS_LARGEFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _LFS64_LARGEFILE 1
     * }
     */
    public static int _LFS64_LARGEFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _LFS64_STDIO 1
     * }
     */
    public static int _LFS64_STDIO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_CPUTIME 0
     * }
     */
    public static int _POSIX_CPUTIME() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_CPUTIME 0
     * }
     */
    public static int _POSIX_THREAD_CPUTIME() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _POSIX_REGEXP 1
     * }
     */
    public static int _POSIX_REGEXP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SHELL 1
     * }
     */
    public static int _POSIX_SHELL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MONOTONIC_CLOCK 0
     * }
     */
    public static int _POSIX_MONOTONIC_CLOCK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _POSIX_V7_LP64_OFF64 1
     * }
     */
    public static int _POSIX_V7_LP64_OFF64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_V6_LP64_OFF64 1
     * }
     */
    public static int _POSIX_V6_LP64_OFF64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XBS5_LP64_OFF64 1
     * }
     */
    public static int _XBS5_LP64_OFF64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define STDIN_FILENO 0
     * }
     */
    public static int STDIN_FILENO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define STDOUT_FILENO 1
     * }
     */
    public static int STDOUT_FILENO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define STDERR_FILENO 2
     * }
     */
    public static int STDERR_FILENO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _GETOPT_POSIX_H 1
     * }
     */
    public static int _GETOPT_POSIX_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _GETOPT_CORE_H 1
     * }
     */
    public static int _GETOPT_CORE_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_FILE_H 1
     * }
     */
    public static int _SYS_FILE_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_STAT_H 1
     * }
     */
    public static int _SYS_STAT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define S_BLKSIZE 512
     * }
     */
    public static int S_BLKSIZE() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define _SYS_TIME_H 1
     * }
     */
    public static int _SYS_TIME_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define TBUF_SZ 1024
     * }
     */
    public static int TBUF_SZ() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define DF_MAXFNLEN 256
     * }
     */
    public static int DF_MAXFNLEN() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define FIELDNAMELENMAX 128
     * }
     */
    public static int FIELDNAMELENMAX() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define VSFIELDMAX 256
     * }
     */
    public static int VSFIELDMAX() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define VSNAMELENMAX 64
     * }
     */
    public static int VSNAMELENMAX() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define VGNAMELENMAX 64
     * }
     */
    public static int VGNAMELENMAX() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define MAXNVELT 64
     * }
     */
    public static int MAXNVELT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define VDEFAULTBLKSIZE 4096
     * }
     */
    public static int VDEFAULTBLKSIZE() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define VDEFAULTNBLKS 32
     * }
     */
    public static int VDEFAULTNBLKS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define MAX_ORDER 65535
     * }
     */
    public static int MAX_ORDER() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define MAX_FIELD_SIZE 65535
     * }
     */
    public static int MAX_FIELD_SIZE() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define MAX_FILE 32
     * }
     */
    public static int MAX_FILE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define MAX_PATH_LEN 1024
     * }
     */
    public static int MAX_PATH_LEN() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define DEF_NDDS 16
     * }
     */
    public static int DEF_NDDS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define MIN_NDDS 4
     * }
     */
    public static int MIN_NDDS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define HDF_APPENDABLE_BLOCK_LEN 4096
     * }
     */
    public static int HDF_APPENDABLE_BLOCK_LEN() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define HDF_APPENDABLE_BLOCK_NUM 16
     * }
     */
    public static int HDF_APPENDABLE_BLOCK_NUM() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define HASH_MASK 255
     * }
     */
    public static int HASH_MASK() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define HASH_BLOCK_SIZE 100
     * }
     */
    public static int HASH_BLOCK_SIZE() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define VDATA_BUFFER_MAX 1000000
     * }
     */
    public static int VDATA_BUFFER_MAX() {
        return (int)1000000L;
    }
    /**
     * {@snippet :
     * #define DFS_MAXLEN 255
     * }
     */
    public static int DFS_MAXLEN() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define DFSD_MAXFILL_LEN 16
     * }
     */
    public static int DFSD_MAXFILL_LEN() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define COMP_MAX_COMP 12
     * }
     */
    public static int COMP_MAX_COMP() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define COMP_HEADER_LENGTH 14
     * }
     */
    public static int COMP_HEADER_LENGTH() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define MAX_GROUPS 8
     * }
     */
    public static int MAX_GROUPS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define FUNC_NAME_LEN 32
     * }
     */
    public static int FUNC_NAME_LEN() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define ERR_STACK_SZ 10
     * }
     */
    public static int ERR_STACK_SZ() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define ERR_STRING_SIZE 512
     * }
     */
    public static int ERR_STRING_SIZE() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define H4_MAX_NC_DIMS 5000
     * }
     */
    public static int H4_MAX_NC_DIMS() {
        return (int)5000L;
    }
    /**
     * {@snippet :
     * #define H4_MAX_NC_ATTRS 3000
     * }
     */
    public static int H4_MAX_NC_ATTRS() {
        return (int)3000L;
    }
    /**
     * {@snippet :
     * #define H4_MAX_NC_VARS 5000
     * }
     */
    public static int H4_MAX_NC_VARS() {
        return (int)5000L;
    }
    /**
     * {@snippet :
     * #define H4_MAX_NC_NAME 256
     * }
     */
    public static int H4_MAX_NC_NAME() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define H4_MAX_NC_CLASS 128
     * }
     */
    public static int H4_MAX_NC_CLASS() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define H4_MAX_VAR_DIMS 32
     * }
     */
    public static int H4_MAX_VAR_DIMS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define H4_MAX_GR_NAME 256
     * }
     */
    public static int H4_MAX_GR_NAME() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define _HDF_CHK_TBL_CLASS_VER 0
     * }
     */
    public static int _HDF_CHK_TBL_CLASS_VER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define DFACC_READ 1
     * }
     */
    public static int DFACC_READ() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFACC_WRITE 2
     * }
     */
    public static int DFACC_WRITE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define DFACC_CREATE 4
     * }
     */
    public static int DFACC_CREATE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define DFACC_ALL 7
     * }
     */
    public static int DFACC_ALL() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define DFACC_RDONLY 1
     * }
     */
    public static int DFACC_RDONLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFACC_RDWR 3
     * }
     */
    public static int DFACC_RDWR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define DFACC_CLOBBER 4
     * }
     */
    public static int DFACC_CLOBBER() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define DFACC_BUFFER 8
     * }
     */
    public static int DFACC_BUFFER() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define DFACC_APPENDABLE 16
     * }
     */
    public static int DFACC_APPENDABLE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define DFACC_CURRENT 32
     * }
     */
    public static int DFACC_CURRENT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define DFACC_OLD 1
     * }
     */
    public static int DFACC_OLD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFACC_DEFAULT 0
     * }
     */
    public static int DFACC_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define DFACC_SERIAL 1
     * }
     */
    public static int DFACC_SERIAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFACC_PARALLEL 9
     * }
     */
    public static int DFACC_PARALLEL() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define DF_START 0
     * }
     */
    public static int DF_START() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define DF_CURRENT 1
     * }
     */
    public static int DF_CURRENT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DF_END 2
     * }
     */
    public static int DF_END() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define DF_FORWARD 1
     * }
     */
    public static int DF_FORWARD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DF_BACKWARD 2
     * }
     */
    public static int DF_BACKWARD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SUCCEED 0
     * }
     */
    public static int SUCCEED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FALSE 0
     * }
     */
    public static int FALSE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define DFNT_HDF 0
     * }
     */
    public static int DFNT_HDF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define DFNT_NATIVE 4096
     * }
     */
    public static int DFNT_NATIVE() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define DFNT_CUSTOM 8192
     * }
     */
    public static int DFNT_CUSTOM() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define DFNT_LITEND 16384
     * }
     */
    public static int DFNT_LITEND() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define DFNT_MASK 4095
     * }
     */
    public static int DFNT_MASK() {
        return (int)4095L;
    }
    /**
     * {@snippet :
     * #define DFNT_NONE 0
     * }
     */
    public static int DFNT_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define DFNT_QUERY 0
     * }
     */
    public static int DFNT_QUERY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define DFNT_VERSION 1
     * }
     */
    public static int DFNT_VERSION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFNT_FLOAT32 5
     * }
     */
    public static int DFNT_FLOAT32() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define DFNT_FLOAT 5
     * }
     */
    public static int DFNT_FLOAT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define DFNT_FLOAT64 6
     * }
     */
    public static int DFNT_FLOAT64() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define DFNT_DOUBLE 6
     * }
     */
    public static int DFNT_DOUBLE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define DFNT_FLOAT128 7
     * }
     */
    public static int DFNT_FLOAT128() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define DFNT_INT8 20
     * }
     */
    public static int DFNT_INT8() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define DFNT_UINT8 21
     * }
     */
    public static int DFNT_UINT8() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define DFNT_INT16 22
     * }
     */
    public static int DFNT_INT16() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define DFNT_UINT16 23
     * }
     */
    public static int DFNT_UINT16() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define DFNT_INT32 24
     * }
     */
    public static int DFNT_INT32() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define DFNT_UINT32 25
     * }
     */
    public static int DFNT_UINT32() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define DFNT_INT64 26
     * }
     */
    public static int DFNT_INT64() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define DFNT_UINT64 27
     * }
     */
    public static int DFNT_UINT64() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define DFNT_INT128 28
     * }
     */
    public static int DFNT_INT128() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define DFNT_UINT128 30
     * }
     */
    public static int DFNT_UINT128() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define DFNT_UCHAR8 3
     * }
     */
    public static int DFNT_UCHAR8() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define DFNT_UCHAR 3
     * }
     */
    public static int DFNT_UCHAR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define DFNT_CHAR8 4
     * }
     */
    public static int DFNT_CHAR8() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define DFNT_CHAR 4
     * }
     */
    public static int DFNT_CHAR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define DFNT_CHAR16 42
     * }
     */
    public static int DFNT_CHAR16() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * #define DFNT_UCHAR16 43
     * }
     */
    public static int DFNT_UCHAR16() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * #define DFNTI_MBO 1
     * }
     */
    public static int DFNTI_MBO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFNTI_VBO 2
     * }
     */
    public static int DFNTI_VBO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define DFNTI_IBO 4
     * }
     */
    public static int DFNTI_IBO() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define DFNTF_NONE 0
     * }
     */
    public static int DFNTF_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define DFNTF_HDFDEFAULT 1
     * }
     */
    public static int DFNTF_HDFDEFAULT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFNTF_IEEE 1
     * }
     */
    public static int DFNTF_IEEE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFNTF_VAX 2
     * }
     */
    public static int DFNTF_VAX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define DFNTF_CRAY 3
     * }
     */
    public static int DFNTF_CRAY() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define DFNTF_PC 4
     * }
     */
    public static int DFNTF_PC() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define DFNTF_CONVEX 5
     * }
     */
    public static int DFNTF_CONVEX() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define DFNTF_VP 6
     * }
     */
    public static int DFNTF_VP() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define DFNTC_BYTE 0
     * }
     */
    public static int DFNTC_BYTE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define DFNTC_ASCII 1
     * }
     */
    public static int DFNTC_ASCII() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFNTC_EBCDIC 5
     * }
     */
    public static int DFNTC_EBCDIC() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define DFO_FORTRAN 1
     * }
     */
    public static int DFO_FORTRAN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFO_C 2
     * }
     */
    public static int DFO_C() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SIZE_FLOAT32 4
     * }
     */
    public static int SIZE_FLOAT32() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SIZE_FLOAT64 8
     * }
     */
    public static int SIZE_FLOAT64() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SIZE_FLOAT128 16
     * }
     */
    public static int SIZE_FLOAT128() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SIZE_INT8 1
     * }
     */
    public static int SIZE_INT8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_UINT8 1
     * }
     */
    public static int SIZE_UINT8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_INT16 2
     * }
     */
    public static int SIZE_INT16() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SIZE_UINT16 2
     * }
     */
    public static int SIZE_UINT16() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SIZE_INT32 4
     * }
     */
    public static int SIZE_INT32() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SIZE_UINT32 4
     * }
     */
    public static int SIZE_UINT32() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SIZE_INT64 8
     * }
     */
    public static int SIZE_INT64() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SIZE_UINT64 8
     * }
     */
    public static int SIZE_UINT64() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SIZE_INT128 16
     * }
     */
    public static int SIZE_INT128() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SIZE_UINT128 16
     * }
     */
    public static int SIZE_UINT128() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SIZE_CHAR8 1
     * }
     */
    public static int SIZE_CHAR8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_CHAR 1
     * }
     */
    public static int SIZE_CHAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_UCHAR8 1
     * }
     */
    public static int SIZE_UCHAR8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_UCHAR 1
     * }
     */
    public static int SIZE_UCHAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_CHAR16 2
     * }
     */
    public static int SIZE_CHAR16() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SIZE_UCHAR16 2
     * }
     */
    public static int SIZE_UCHAR16() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SIZE_NFLOAT32 4
     * }
     */
    public static int SIZE_NFLOAT32() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SIZE_NFLOAT64 8
     * }
     */
    public static int SIZE_NFLOAT64() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SIZE_NFLOAT128 16
     * }
     */
    public static int SIZE_NFLOAT128() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SIZE_NINT8 1
     * }
     */
    public static int SIZE_NINT8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_NUINT8 1
     * }
     */
    public static int SIZE_NUINT8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_NINT16 2
     * }
     */
    public static int SIZE_NINT16() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SIZE_NUINT16 2
     * }
     */
    public static int SIZE_NUINT16() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SIZE_NINT32 4
     * }
     */
    public static int SIZE_NINT32() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SIZE_NUINT32 4
     * }
     */
    public static int SIZE_NUINT32() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SIZE_NINT64 8
     * }
     */
    public static int SIZE_NINT64() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SIZE_NUINT64 8
     * }
     */
    public static int SIZE_NUINT64() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SIZE_NINT128 16
     * }
     */
    public static int SIZE_NINT128() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SIZE_NUINT128 16
     * }
     */
    public static int SIZE_NUINT128() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SIZE_NCHAR8 1
     * }
     */
    public static int SIZE_NCHAR8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_NCHAR 1
     * }
     */
    public static int SIZE_NCHAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_NUCHAR8 1
     * }
     */
    public static int SIZE_NUCHAR8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_NUCHAR 1
     * }
     */
    public static int SIZE_NUCHAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_NCHAR16 2
     * }
     */
    public static int SIZE_NCHAR16() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SIZE_NUCHAR16 2
     * }
     */
    public static int SIZE_NUCHAR16() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SIZE_LFLOAT32 4
     * }
     */
    public static int SIZE_LFLOAT32() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SIZE_LFLOAT64 8
     * }
     */
    public static int SIZE_LFLOAT64() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SIZE_LFLOAT128 16
     * }
     */
    public static int SIZE_LFLOAT128() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SIZE_LINT8 1
     * }
     */
    public static int SIZE_LINT8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_LUINT8 1
     * }
     */
    public static int SIZE_LUINT8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_LINT16 2
     * }
     */
    public static int SIZE_LINT16() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SIZE_LUINT16 2
     * }
     */
    public static int SIZE_LUINT16() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SIZE_LINT32 4
     * }
     */
    public static int SIZE_LINT32() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SIZE_LUINT32 4
     * }
     */
    public static int SIZE_LUINT32() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SIZE_LINT64 8
     * }
     */
    public static int SIZE_LINT64() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SIZE_LUINT64 8
     * }
     */
    public static int SIZE_LUINT64() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SIZE_LINT128 16
     * }
     */
    public static int SIZE_LINT128() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SIZE_LUINT128 16
     * }
     */
    public static int SIZE_LUINT128() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SIZE_LCHAR8 1
     * }
     */
    public static int SIZE_LCHAR8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_LCHAR 1
     * }
     */
    public static int SIZE_LCHAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_LUCHAR8 1
     * }
     */
    public static int SIZE_LUCHAR8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_LUCHAR 1
     * }
     */
    public static int SIZE_LUCHAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZE_LCHAR16 2
     * }
     */
    public static int SIZE_LCHAR16() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SIZE_LUCHAR16 2
     * }
     */
    public static int SIZE_LUCHAR16() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define MACHINE_I8_SIZE 1
     * }
     */
    public static int MACHINE_I8_SIZE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define MACHINE_I16_SIZE 2
     * }
     */
    public static int MACHINE_I16_SIZE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define MACHINE_I32_SIZE 4
     * }
     */
    public static int MACHINE_I32_SIZE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define MACHINE_F32_SIZE 4
     * }
     */
    public static int MACHINE_F32_SIZE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define MACHINE_F64_SIZE 8
     * }
     */
    public static int MACHINE_F64_SIZE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define MAX_NT_SIZE 16
     * }
     */
    public static int MAX_NT_SIZE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define DFREF_WILDCARD 0
     * }
     */
    public static int DFREF_WILDCARD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define DFTAG_WILDCARD 0
     * }
     */
    public static int DFTAG_WILDCARD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define DFREF_NONE 0
     * }
     */
    public static int DFREF_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define DFTAG_NULL 1
     * }
     */
    public static int DFTAG_NULL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFTAG_LINKED 20
     * }
     */
    public static int DFTAG_LINKED() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define DFTAG_VERSION 30
     * }
     */
    public static int DFTAG_VERSION() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define DFTAG_COMPRESSED 40
     * }
     */
    public static int DFTAG_COMPRESSED() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define DFTAG_VLINKED 50
     * }
     */
    public static int DFTAG_VLINKED() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * #define DFTAG_VLINKED_DATA 51
     * }
     */
    public static int DFTAG_VLINKED_DATA() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * #define DFTAG_CHUNKED 60
     * }
     */
    public static int DFTAG_CHUNKED() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * #define DFTAG_CHUNK 61
     * }
     */
    public static int DFTAG_CHUNK() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * #define DFIL_PIXEL 0
     * }
     */
    public static int DFIL_PIXEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define DFIL_LINE 1
     * }
     */
    public static int DFIL_LINE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFIL_PLANE 2
     * }
     */
    public static int DFIL_PLANE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SPECIAL_LINKED 1
     * }
     */
    public static int SPECIAL_LINKED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SPECIAL_EXT 2
     * }
     */
    public static int SPECIAL_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SPECIAL_COMP 3
     * }
     */
    public static int SPECIAL_COMP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SPECIAL_VLINKED 4
     * }
     */
    public static int SPECIAL_VLINKED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SPECIAL_CHUNKED 5
     * }
     */
    public static int SPECIAL_CHUNKED() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define SPECIAL_BUFFERED 6
     * }
     */
    public static int SPECIAL_BUFFERED() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define SPECIAL_COMPRAS 7
     * }
     */
    public static int SPECIAL_COMPRAS() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define FULL_INTERLACE 0
     * }
     */
    public static int FULL_INTERLACE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NO_INTERLACE 1
     * }
     */
    public static int NO_INTERLACE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define BITBUF_SIZE 4096
     * }
     */
    public static int BITBUF_SIZE() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define COMP_NONE 0
     * }
     */
    public static int COMP_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define COMP_JPEG 2
     * }
     */
    public static int COMP_JPEG() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define COMP_RLE 11
     * }
     */
    public static int COMP_RLE() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define COMP_IMCOMP 12
     * }
     */
    public static int COMP_IMCOMP() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define COMP_DECODER_ENABLED 1
     * }
     */
    public static int COMP_DECODER_ENABLED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define COMP_ENCODER_ENABLED 2
     * }
     */
    public static int COMP_ENCODER_ENABLED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define HDF_NONE 0
     * }
     */
    public static int HDF_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define HDF_CHUNK 1
     * }
     */
    public static int HDF_CHUNK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HDF_COMP 3
     * }
     */
    public static int HDF_COMP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define HDF_NBIT 5
     * }
     */
    public static int HDF_NBIT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define HDF_CACHEALL 1
     * }
     */
    public static int HDF_CACHEALL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define OLD_VGDESCTAG 61820
     * }
     */
    public static int OLD_VGDESCTAG() {
        return (int)61820L;
    }
    /**
     * {@snippet :
     * #define OLD_VSDESCTAG 61821
     * }
     */
    public static int OLD_VSDESCTAG() {
        return (int)61821L;
    }
    /**
     * {@snippet :
     * #define OLD_VSDATATAG 61822
     * }
     */
    public static int OLD_VSDATATAG() {
        return (int)61822L;
    }
    /**
     * {@snippet :
     * #define _HDF_VSPACK 0
     * }
     */
    public static int _HDF_VSPACK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _HDF_VSUNPACK 1
     * }
     */
    public static int _HDF_VSUNPACK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define VG_ATTR_SET 1
     * }
     */
    public static int VG_ATTR_SET() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define VS_ATTR_SET 1
     * }
     */
    public static int VS_ATTR_SET() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define VATOM_HASH_SIZE 256
     * }
     */
    public static int VATOM_HASH_SIZE() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define VSET_NEW_VERSION 4
     * }
     */
    public static int VSET_NEW_VERSION() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define VSET_VERSION 3
     * }
     */
    public static int VSET_VERSION() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define VSET_OLD_VERSION 2
     * }
     */
    public static int VSET_OLD_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define MFGR_INTERLACE_PIXEL 0
     * }
     */
    public static int MFGR_INTERLACE_PIXEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define MFGR_INTERLACE_LINE 1
     * }
     */
    public static int MFGR_INTERLACE_LINE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define MFGR_INTERLACE_COMPONENT 2
     * }
     */
    public static int MFGR_INTERLACE_COMPONENT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define MP_PAGEALL 1
     * }
     */
    public static int MP_PAGEALL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_OLD_FILLVALUES 0
     * }
     */
    public static int NC_OLD_FILLVALUES() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_RDWR 1
     * }
     */
    public static int NC_RDWR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_CREAT 2
     * }
     */
    public static int NC_CREAT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NC_EXCL 4
     * }
     */
    public static int NC_EXCL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define NC_INDEF 8
     * }
     */
    public static int NC_INDEF() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define NC_NSYNC 16
     * }
     */
    public static int NC_NSYNC() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define NC_HSYNC 32
     * }
     */
    public static int NC_HSYNC() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define NC_NDIRTY 64
     * }
     */
    public static int NC_NDIRTY() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define NC_HDIRTY 128
     * }
     */
    public static int NC_HDIRTY() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define NC_NOFILL 256
     * }
     */
    public static int NC_NOFILL() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define NC_LINK 32768
     * }
     */
    public static int NC_LINK() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define NC_FILL 0
     * }
     */
    public static int NC_FILL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_NOWRITE 0
     * }
     */
    public static int NC_NOWRITE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_UNSPECIFIED 0
     * }
     */
    public static int NC_UNSPECIFIED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_BYTE 1
     * }
     */
    public static int NC_BYTE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_CHAR 2
     * }
     */
    public static int NC_CHAR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NC_SHORT 3
     * }
     */
    public static int NC_SHORT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define NC_LONG 4
     * }
     */
    public static int NC_LONG() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define NC_FLOAT 5
     * }
     */
    public static int NC_FLOAT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define NC_DOUBLE 6
     * }
     */
    public static int NC_DOUBLE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define NC_BITFIELD 7
     * }
     */
    public static int NC_BITFIELD() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define NC_STRING 8
     * }
     */
    public static int NC_STRING() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define NC_IARRAY 9
     * }
     */
    public static int NC_IARRAY() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define NC_DIMENSION 10
     * }
     */
    public static int NC_DIMENSION() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define NC_VARIABLE 11
     * }
     */
    public static int NC_VARIABLE() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define NC_ATTRIBUTE 12
     * }
     */
    public static int NC_ATTRIBUTE() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define NC_NOERR 0
     * }
     */
    public static int NC_NOERR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_EBADID 1
     * }
     */
    public static int NC_EBADID() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_ENFILE 2
     * }
     */
    public static int NC_ENFILE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NC_EEXIST 3
     * }
     */
    public static int NC_EEXIST() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define NC_EINVAL 4
     * }
     */
    public static int NC_EINVAL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define NC_EPERM 5
     * }
     */
    public static int NC_EPERM() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define NC_ENOTINDEFINE 6
     * }
     */
    public static int NC_ENOTINDEFINE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define NC_EINDEFINE 7
     * }
     */
    public static int NC_EINDEFINE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define NC_EINVALCOORDS 8
     * }
     */
    public static int NC_EINVALCOORDS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define NC_EMAXDIMS 9
     * }
     */
    public static int NC_EMAXDIMS() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define NC_ENAMEINUSE 10
     * }
     */
    public static int NC_ENAMEINUSE() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define NC_ENOTATT 11
     * }
     */
    public static int NC_ENOTATT() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define NC_EMAXATTS 12
     * }
     */
    public static int NC_EMAXATTS() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define NC_EBADTYPE 13
     * }
     */
    public static int NC_EBADTYPE() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define NC_EBADDIM 14
     * }
     */
    public static int NC_EBADDIM() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define NC_EUNLIMPOS 15
     * }
     */
    public static int NC_EUNLIMPOS() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define NC_EMAXVARS 16
     * }
     */
    public static int NC_EMAXVARS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define NC_ENOTVAR 17
     * }
     */
    public static int NC_ENOTVAR() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define NC_EGLOBAL 18
     * }
     */
    public static int NC_EGLOBAL() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define NC_ENOTNC 19
     * }
     */
    public static int NC_ENOTNC() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define NC_ESTS 20
     * }
     */
    public static int NC_ESTS() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define NC_EMAXNAME 21
     * }
     */
    public static int NC_EMAXNAME() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define NC_EUNLIMIT 22
     * }
     */
    public static int NC_EUNLIMIT() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define NC_EXDR 32
     * }
     */
    public static int NC_EXDR() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define NC_FATAL 1
     * }
     */
    public static int NC_FATAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_VERBOSE 2
     * }
     */
    public static int NC_VERBOSE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SD_DIMVAL_BW_COMP 1
     * }
     */
    public static int SD_DIMVAL_BW_COMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SD_DIMVAL_BW_INCOMP 0
     * }
     */
    public static int SD_DIMVAL_BW_INCOMP() {
        return (int)0L;
    }
    public static MethodHandle __assert_fail$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"__assert_fail");
    }
    /**
     * {@snippet :
     * void __assert_fail(char* __assertion, char* __file, unsigned int __line, char* __function);
     * }
     */
    public static void __assert_fail(MemorySegment __assertion, MemorySegment __file, int __line, MemorySegment __function) {
        var mh$ = __assert_fail$MH();
        try {
            mh$.invokeExact(__assertion, __file, __line, __function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __assert_perror_fail$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$3,"__assert_perror_fail");
    }
    /**
     * {@snippet :
     * void __assert_perror_fail(int __errnum, char* __file, unsigned int __line, char* __function);
     * }
     */
    public static void __assert_perror_fail(int __errnum, MemorySegment __file, int __line, MemorySegment __function) {
        var mh$ = __assert_perror_fail$MH();
        try {
            mh$.invokeExact(__errnum, __file, __line, __function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __assert$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$5,"__assert");
    }
    /**
     * {@snippet :
     * void __assert(char* __assertion, char* __file, int __line);
     * }
     */
    public static void __assert(MemorySegment __assertion, MemorySegment __file, int __line) {
        var mh$ = __assert$MH();
        try {
            mh$.invokeExact(__assertion, __file, __line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char __u_char;
     * }
     */
    public static final OfByte __u_char = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short __u_short;
     * }
     */
    public static final OfShort __u_short = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int __u_int;
     * }
     */
    public static final OfInt __u_int = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __u_long;
     * }
     */
    public static final OfLong __u_long = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __int64_t;
     * }
     */
    public static final OfLong __int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char __int_least8_t;
     * }
     */
    public static final OfByte __int_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint_least8_t;
     * }
     */
    public static final OfByte __uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int_least16_t;
     * }
     */
    public static final OfShort __int_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint_least16_t;
     * }
     */
    public static final OfShort __uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int_least32_t;
     * }
     */
    public static final OfInt __int_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint_least32_t;
     * }
     */
    public static final OfInt __uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __int_least64_t;
     * }
     */
    public static final OfLong __int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uint_least64_t;
     * }
     */
    public static final OfLong __uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __quad_t;
     * }
     */
    public static final OfLong __quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __u_quad_t;
     * }
     */
    public static final OfLong __u_quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __intmax_t;
     * }
     */
    public static final OfLong __intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uintmax_t;
     * }
     */
    public static final OfLong __uintmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __dev_t;
     * }
     */
    public static final OfLong __dev_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __uid_t;
     * }
     */
    public static final OfInt __uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __gid_t;
     * }
     */
    public static final OfInt __gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __ino_t;
     * }
     */
    public static final OfLong __ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __ino64_t;
     * }
     */
    public static final OfLong __ino64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __mode_t;
     * }
     */
    public static final OfInt __mode_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __nlink_t;
     * }
     */
    public static final OfLong __nlink_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __off_t;
     * }
     */
    public static final OfLong __off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __off64_t;
     * }
     */
    public static final OfLong __off64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __pid_t;
     * }
     */
    public static final OfInt __pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __clock_t;
     * }
     */
    public static final OfLong __clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __rlim_t;
     * }
     */
    public static final OfLong __rlim_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __rlim64_t;
     * }
     */
    public static final OfLong __rlim64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __id_t;
     * }
     */
    public static final OfInt __id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __time_t;
     * }
     */
    public static final OfLong __time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __useconds_t;
     * }
     */
    public static final OfInt __useconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __suseconds_t;
     * }
     */
    public static final OfLong __suseconds_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __suseconds64_t;
     * }
     */
    public static final OfLong __suseconds64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __daddr_t;
     * }
     */
    public static final OfInt __daddr_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __key_t;
     * }
     */
    public static final OfInt __key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __clockid_t;
     * }
     */
    public static final OfInt __clockid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef void* __timer_t;
     * }
     */
    public static final AddressLayout __timer_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long __blksize_t;
     * }
     */
    public static final OfLong __blksize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __blkcnt_t;
     * }
     */
    public static final OfLong __blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __blkcnt64_t;
     * }
     */
    public static final OfLong __blkcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt_t;
     * }
     */
    public static final OfLong __fsblkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt64_t;
     * }
     */
    public static final OfLong __fsblkcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt_t;
     * }
     */
    public static final OfLong __fsfilcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt64_t;
     * }
     */
    public static final OfLong __fsfilcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __fsword_t;
     * }
     */
    public static final OfLong __fsword_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __ssize_t;
     * }
     */
    public static final OfLong __ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __syscall_slong_t;
     * }
     */
    public static final OfLong __syscall_slong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __syscall_ulong_t;
     * }
     */
    public static final OfLong __syscall_ulong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __loff_t;
     * }
     */
    public static final OfLong __loff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef char* __caddr_t;
     * }
     */
    public static final AddressLayout __caddr_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long __intptr_t;
     * }
     */
    public static final OfLong __intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __socklen_t;
     * }
     */
    public static final OfInt __socklen_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __sig_atomic_t;
     * }
     */
    public static final OfInt __sig_atomic_t = JAVA_INT;
    /**
     * {@snippet :
     * enum ._ISupper = 256;
     * }
     */
    public static int _ISupper() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum ._ISlower = 512;
     * }
     */
    public static int _ISlower() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum ._ISalpha = 1024;
     * }
     */
    public static int _ISalpha() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum ._ISdigit = 2048;
     * }
     */
    public static int _ISdigit() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum ._ISxdigit = 4096;
     * }
     */
    public static int _ISxdigit() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum ._ISspace = 8192;
     * }
     */
    public static int _ISspace() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum ._ISprint = 16384;
     * }
     */
    public static int _ISprint() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum ._ISgraph = 32768;
     * }
     */
    public static int _ISgraph() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum ._ISblank = 1;
     * }
     */
    public static int _ISblank() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ._IScntrl = 2;
     * }
     */
    public static int _IScntrl() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ._ISpunct = 4;
     * }
     */
    public static int _ISpunct() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ._ISalnum = 8;
     * }
     */
    public static int _ISalnum() {
        return (int)8L;
    }
    public static MethodHandle __ctype_b_loc$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$2,"__ctype_b_loc");
    }
    /**
     * {@snippet :
     * unsigned short** __ctype_b_loc();
     * }
     */
    public static MemorySegment __ctype_b_loc() {
        var mh$ = __ctype_b_loc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ctype_tolower_loc$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$3,"__ctype_tolower_loc");
    }
    /**
     * {@snippet :
     * const __int32_t** __ctype_tolower_loc();
     * }
     */
    public static MemorySegment __ctype_tolower_loc() {
        var mh$ = __ctype_tolower_loc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ctype_toupper_loc$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$4,"__ctype_toupper_loc");
    }
    /**
     * {@snippet :
     * const __int32_t** __ctype_toupper_loc();
     * }
     */
    public static MemorySegment __ctype_toupper_loc() {
        var mh$ = __ctype_toupper_loc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$6,"isalnum");
    }
    /**
     * {@snippet :
     * int isalnum(int);
     * }
     */
    public static int isalnum(int x0) {
        var mh$ = isalnum$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$0,"isalpha");
    }
    /**
     * {@snippet :
     * int isalpha(int);
     * }
     */
    public static int isalpha(int x0) {
        var mh$ = isalpha$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iscntrl$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$1,"iscntrl");
    }
    /**
     * {@snippet :
     * int iscntrl(int);
     * }
     */
    public static int iscntrl(int x0) {
        var mh$ = iscntrl$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$2,"isdigit");
    }
    /**
     * {@snippet :
     * int isdigit(int);
     * }
     */
    public static int isdigit(int x0) {
        var mh$ = isdigit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle islower$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$3,"islower");
    }
    /**
     * {@snippet :
     * int islower(int);
     * }
     */
    public static int islower(int x0) {
        var mh$ = islower$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isgraph$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$4,"isgraph");
    }
    /**
     * {@snippet :
     * int isgraph(int);
     * }
     */
    public static int isgraph(int x0) {
        var mh$ = isgraph$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isprint$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$5,"isprint");
    }
    /**
     * {@snippet :
     * int isprint(int);
     * }
     */
    public static int isprint(int x0) {
        var mh$ = isprint$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ispunct$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$0,"ispunct");
    }
    /**
     * {@snippet :
     * int ispunct(int);
     * }
     */
    public static int ispunct(int x0) {
        var mh$ = ispunct$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isspace$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$1,"isspace");
    }
    /**
     * {@snippet :
     * int isspace(int);
     * }
     */
    public static int isspace(int x0) {
        var mh$ = isspace$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isupper$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$2,"isupper");
    }
    /**
     * {@snippet :
     * int isupper(int);
     * }
     */
    public static int isupper(int x0) {
        var mh$ = isupper$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isxdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$3,"isxdigit");
    }
    /**
     * {@snippet :
     * int isxdigit(int);
     * }
     */
    public static int isxdigit(int x0) {
        var mh$ = isxdigit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$4,"tolower");
    }
    /**
     * {@snippet :
     * int tolower(int __c);
     * }
     */
    public static int tolower(int __c) {
        var mh$ = tolower$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$5,"toupper");
    }
    /**
     * {@snippet :
     * int toupper(int __c);
     * }
     */
    public static int toupper(int __c) {
        var mh$ = toupper$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isblank$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$0,"isblank");
    }
    /**
     * {@snippet :
     * int isblank(int);
     * }
     */
    public static int isblank(int x0) {
        var mh$ = isblank$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isascii$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$1,"isascii");
    }
    /**
     * {@snippet :
     * int isascii(int __c);
     * }
     */
    public static int isascii(int __c) {
        var mh$ = isascii$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toascii$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$2,"toascii");
    }
    /**
     * {@snippet :
     * int toascii(int __c);
     * }
     */
    public static int toascii(int __c) {
        var mh$ = toascii$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$3,"_toupper");
    }
    /**
     * {@snippet :
     * int _toupper(int);
     * }
     */
    public static int _toupper(int x0) {
        var mh$ = _toupper$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$4,"_tolower");
    }
    /**
     * {@snippet :
     * int _tolower(int);
     * }
     */
    public static int _tolower(int x0) {
        var mh$ = _tolower$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct __locale_struct* __locale_t;
     * }
     */
    public static final AddressLayout __locale_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct __locale_struct* locale_t;
     * }
     */
    public static final AddressLayout locale_t = RuntimeHelper.POINTER;
    public static MethodHandle isalnum_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$4,"isalnum_l");
    }
    /**
     * {@snippet :
     * int isalnum_l(int, locale_t);
     * }
     */
    public static int isalnum_l(int x0, MemorySegment x1) {
        var mh$ = isalnum_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalpha_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$5,"isalpha_l");
    }
    /**
     * {@snippet :
     * int isalpha_l(int, locale_t);
     * }
     */
    public static int isalpha_l(int x0, MemorySegment x1) {
        var mh$ = isalpha_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iscntrl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$0,"iscntrl_l");
    }
    /**
     * {@snippet :
     * int iscntrl_l(int, locale_t);
     * }
     */
    public static int iscntrl_l(int x0, MemorySegment x1) {
        var mh$ = iscntrl_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$1,"isdigit_l");
    }
    /**
     * {@snippet :
     * int isdigit_l(int, locale_t);
     * }
     */
    public static int isdigit_l(int x0, MemorySegment x1) {
        var mh$ = isdigit_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle islower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$2,"islower_l");
    }
    /**
     * {@snippet :
     * int islower_l(int, locale_t);
     * }
     */
    public static int islower_l(int x0, MemorySegment x1) {
        var mh$ = islower_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isgraph_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$3,"isgraph_l");
    }
    /**
     * {@snippet :
     * int isgraph_l(int, locale_t);
     * }
     */
    public static int isgraph_l(int x0, MemorySegment x1) {
        var mh$ = isgraph_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isprint_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$4,"isprint_l");
    }
    /**
     * {@snippet :
     * int isprint_l(int, locale_t);
     * }
     */
    public static int isprint_l(int x0, MemorySegment x1) {
        var mh$ = isprint_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ispunct_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$5,"ispunct_l");
    }
    /**
     * {@snippet :
     * int ispunct_l(int, locale_t);
     * }
     */
    public static int ispunct_l(int x0, MemorySegment x1) {
        var mh$ = ispunct_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isspace_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$0,"isspace_l");
    }
    /**
     * {@snippet :
     * int isspace_l(int, locale_t);
     * }
     */
    public static int isspace_l(int x0, MemorySegment x1) {
        var mh$ = isspace_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1,"isupper_l");
    }
    /**
     * {@snippet :
     * int isupper_l(int, locale_t);
     * }
     */
    public static int isupper_l(int x0, MemorySegment x1) {
        var mh$ = isupper_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isxdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$2,"isxdigit_l");
    }
    /**
     * {@snippet :
     * int isxdigit_l(int, locale_t);
     * }
     */
    public static int isxdigit_l(int x0, MemorySegment x1) {
        var mh$ = isxdigit_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isblank_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$3,"isblank_l");
    }
    /**
     * {@snippet :
     * int isblank_l(int, locale_t);
     * }
     */
    public static int isblank_l(int x0, MemorySegment x1) {
        var mh$ = isblank_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tolower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$4,"__tolower_l");
    }
    /**
     * {@snippet :
     * int __tolower_l(int __c, locale_t __l);
     * }
     */
    public static int __tolower_l(int __c, MemorySegment __l) {
        var mh$ = __tolower_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tolower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$5,"tolower_l");
    }
    /**
     * {@snippet :
     * int tolower_l(int __c, locale_t __l);
     * }
     */
    public static int tolower_l(int __c, MemorySegment __l) {
        var mh$ = tolower_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __toupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$0,"__toupper_l");
    }
    /**
     * {@snippet :
     * int __toupper_l(int __c, locale_t __l);
     * }
     */
    public static int __toupper_l(int __c, MemorySegment __l) {
        var mh$ = __toupper_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$1,"toupper_l");
    }
    /**
     * {@snippet :
     * int toupper_l(int __c, locale_t __l);
     * }
     */
    public static int toupper_l(int __c, MemorySegment __l) {
        var mh$ = toupper_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long int64_t;
     * }
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long uint64_t;
     * }
     */
    public static final OfLong uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef long int_fast16_t;
     * }
     */
    public static final OfLong int_fast16_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long int_fast32_t;
     * }
     */
    public static final OfLong int_fast32_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast16_t;
     * }
     */
    public static final OfLong uint_fast16_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast32_t;
     * }
     */
    public static final OfLong uint_fast32_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intmax_t;
     * }
     */
    public static final OfLong intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __gwchar_t;
     * }
     */
    public static final OfInt __gwchar_t = JAVA_INT;
    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$6,"imaxabs");
    }
    /**
     * {@snippet :
     * intmax_t imaxabs(intmax_t __n);
     * }
     */
    public static long imaxabs(long __n) {
        var mh$ = imaxabs$MH();
        try {
            return (long)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$1,"imaxdiv");
    }
    /**
     * {@snippet :
     * imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denom);
     * }
     */
    public static MemorySegment imaxdiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = imaxdiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$3,"strtoimax");
    }
    /**
     * {@snippet :
     * intmax_t strtoimax(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoimax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$4,"strtoumax");
    }
    /**
     * {@snippet :
     * uintmax_t strtoumax(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoumax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$5,"wcstoimax");
    }
    /**
     * {@snippet :
     * intmax_t wcstoimax(const __gwchar_t* __nptr, __gwchar_t** __endptr, int __base);
     * }
     */
    public static long wcstoimax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = wcstoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$0,"wcstoumax");
    }
    /**
     * {@snippet :
     * uintmax_t wcstoumax(const __gwchar_t* __nptr, __gwchar_t** __endptr, int __base);
     * }
     */
    public static long wcstoumax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = wcstoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long off_t;
     * }
     */
    public static final OfLong off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = JAVA_LONG;
    public static MemoryLayout stdin$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle stdin$VH() {
        return constants$19.const$0;
    }
    public static MemorySegment stdin$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$19.const$1,"stdin");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stdin;
     * }
     */
    public static MemorySegment stdin$get() {
        return (java.lang.foreign.MemorySegment) constants$19.const$0.get(RuntimeHelper.requireNonNull(constants$19.const$1, "stdin"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stdin;
     * }
     */
    public static void stdin$set(MemorySegment x) {
        constants$19.const$0.set(RuntimeHelper.requireNonNull(constants$19.const$1, "stdin"), x);
    }
    public static MemoryLayout stdout$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle stdout$VH() {
        return constants$19.const$0;
    }
    public static MemorySegment stdout$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$19.const$2,"stdout");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stdout;
     * }
     */
    public static MemorySegment stdout$get() {
        return (java.lang.foreign.MemorySegment) constants$19.const$0.get(RuntimeHelper.requireNonNull(constants$19.const$2, "stdout"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stdout;
     * }
     */
    public static void stdout$set(MemorySegment x) {
        constants$19.const$0.set(RuntimeHelper.requireNonNull(constants$19.const$2, "stdout"), x);
    }
    public static MemoryLayout stderr$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle stderr$VH() {
        return constants$19.const$0;
    }
    public static MemorySegment stderr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$19.const$3,"stderr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stderr;
     * }
     */
    public static MemorySegment stderr$get() {
        return (java.lang.foreign.MemorySegment) constants$19.const$0.get(RuntimeHelper.requireNonNull(constants$19.const$3, "stderr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stderr;
     * }
     */
    public static void stderr$set(MemorySegment x) {
        constants$19.const$0.set(RuntimeHelper.requireNonNull(constants$19.const$3, "stderr"), x);
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4,"remove");
    }
    /**
     * {@snippet :
     * int remove(char* __filename);
     * }
     */
    public static int remove(MemorySegment __filename) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(__filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$6,"rename");
    }
    /**
     * {@snippet :
     * int rename(char* __old, char* __new);
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$1,"renameat");
    }
    /**
     * {@snippet :
     * int renameat(int __oldfd, char* __old, int __newfd, char* __new);
     * }
     */
    public static int renameat(int __oldfd, MemorySegment __old, int __newfd, MemorySegment __new) {
        var mh$ = renameat$MH();
        try {
            return (int)mh$.invokeExact(__oldfd, __old, __newfd, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2,"fclose");
    }
    /**
     * {@snippet :
     * int fclose(FILE* __stream);
     * }
     */
    public static int fclose(MemorySegment __stream) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3,"tmpfile");
    }
    /**
     * {@snippet :
     * FILE* tmpfile();
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$5,"tmpnam");
    }
    /**
     * {@snippet :
     * char* tmpnam(char [20]);
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam_r$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$0,"tmpnam_r");
    }
    /**
     * {@snippet :
     * char* tmpnam_r(char __s[20]);
     * }
     */
    public static MemorySegment tmpnam_r(MemorySegment __s) {
        var mh$ = tmpnam_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$2,"tempnam");
    }
    /**
     * {@snippet :
     * char* tempnam(char* __dir, char* __pfx);
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __pfx) {
        var mh$ = tempnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dir, __pfx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$3,"fflush");
    }
    /**
     * {@snippet :
     * int fflush(FILE* __stream);
     * }
     */
    public static int fflush(MemorySegment __stream) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4,"fflush_unlocked");
    }
    /**
     * {@snippet :
     * int fflush_unlocked(FILE* __stream);
     * }
     */
    public static int fflush_unlocked(MemorySegment __stream) {
        var mh$ = fflush_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$5,"fopen");
    }
    /**
     * {@snippet :
     * FILE* fopen(char* __filename, char* __modes);
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __modes) {
        var mh$ = fopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__filename, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"freopen");
    }
    /**
     * {@snippet :
     * FILE* freopen(char* __filename, char* __modes, FILE* __stream);
     * }
     */
    public static MemorySegment freopen(MemorySegment __filename, MemorySegment __modes, MemorySegment __stream) {
        var mh$ = freopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__filename, __modes, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3,"fdopen");
    }
    /**
     * {@snippet :
     * FILE* fdopen(int __fd, char* __modes);
     * }
     */
    public static MemorySegment fdopen(int __fd, MemorySegment __modes) {
        var mh$ = fdopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__fd, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopencookie$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5,"fopencookie");
    }
    /**
     * {@snippet :
     * FILE* fopencookie(void* __magic_cookie, char* __modes, cookie_io_functions_t __io_funcs);
     * }
     */
    public static MemorySegment fopencookie(MemorySegment __magic_cookie, MemorySegment __modes, MemorySegment __io_funcs) {
        var mh$ = fopencookie$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__magic_cookie, __modes, __io_funcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$1,"fmemopen");
    }
    /**
     * {@snippet :
     * FILE* fmemopen(void* __s, size_t __len, char* __modes);
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __s, long __len, MemorySegment __modes) {
        var mh$ = fmemopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __len, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$2,"open_memstream");
    }
    /**
     * {@snippet :
     * FILE* open_memstream(char** __bufloc, size_t* __sizeloc);
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufloc, MemorySegment __sizeloc) {
        var mh$ = open_memstream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__bufloc, __sizeloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$4,"setbuf");
    }
    /**
     * {@snippet :
     * void setbuf(FILE* __stream, char* __buf);
     * }
     */
    public static void setbuf(MemorySegment __stream, MemorySegment __buf) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(__stream, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$6,"setvbuf");
    }
    /**
     * {@snippet :
     * int setvbuf(FILE* __stream, char* __buf, int __modes, size_t __n);
     * }
     */
    public static int setvbuf(MemorySegment __stream, MemorySegment __buf, int __modes, long __n) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __buf, __modes, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$1,"setbuffer");
    }
    /**
     * {@snippet :
     * void setbuffer(FILE* __stream, char* __buf, size_t __size);
     * }
     */
    public static void setbuffer(MemorySegment __stream, MemorySegment __buf, long __size) {
        var mh$ = setbuffer$MH();
        try {
            mh$.invokeExact(__stream, __buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$3,"setlinebuf");
    }
    /**
     * {@snippet :
     * void setlinebuf(FILE* __stream);
     * }
     */
    public static void setlinebuf(MemorySegment __stream) {
        var mh$ = setlinebuf$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$4,"fprintf");
    }
    /**
     * {@snippet :
     * int fprintf(FILE* __stream, char* __format,...);
     * }
     */
    public static int fprintf(MemorySegment __stream, MemorySegment __format, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$5,"printf");
    }
    /**
     * {@snippet :
     * int printf(char* __format,...);
     * }
     */
    public static int printf(MemorySegment __format, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$0,"sprintf");
    }
    /**
     * {@snippet :
     * int sprintf(char* __s, char* __format,...);
     * }
     */
    public static int sprintf(MemorySegment __s, MemorySegment __format, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$2,"vfprintf");
    }
    /**
     * {@snippet :
     * int vfprintf(FILE* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vfprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$3,"vprintf");
    }
    /**
     * {@snippet :
     * int vprintf(char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vprintf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vprintf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$4,"vsprintf");
    }
    /**
     * {@snippet :
     * int vsprintf(char* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$6,"snprintf");
    }
    /**
     * {@snippet :
     * int snprintf(char* __s, size_t __maxlen, char* __format,...);
     * }
     */
    public static int snprintf(MemorySegment __s, long __maxlen, MemorySegment __format, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$1,"vsnprintf");
    }
    /**
     * {@snippet :
     * int vsnprintf(char* __s, size_t __maxlen, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsnprintf(MemorySegment __s, long __maxlen, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vasprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$2,"vasprintf");
    }
    /**
     * {@snippet :
     * int vasprintf(char** __ptr, char* __f, __gnuc_va_list __arg);
     * }
     */
    public static int vasprintf(MemorySegment __ptr, MemorySegment __f, MemorySegment __arg) {
        var mh$ = vasprintf$MH();
        try {
            return (int)mh$.invokeExact(__ptr, __f, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$3,"__asprintf");
    }
    /**
     * {@snippet :
     * int __asprintf(char** __ptr, char* __fmt,...);
     * }
     */
    public static int __asprintf(MemorySegment __ptr, MemorySegment __fmt, Object... x2) {
        var mh$ = __asprintf$MH();
        try {
            return (int)mh$.invokeExact(__ptr, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$4,"asprintf");
    }
    /**
     * {@snippet :
     * int asprintf(char** __ptr, char* __fmt,...);
     * }
     */
    public static int asprintf(MemorySegment __ptr, MemorySegment __fmt, Object... x2) {
        var mh$ = asprintf$MH();
        try {
            return (int)mh$.invokeExact(__ptr, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$6,"vdprintf");
    }
    /**
     * {@snippet :
     * int vdprintf(int __fd, char* __fmt, __gnuc_va_list __arg);
     * }
     */
    public static int vdprintf(int __fd, MemorySegment __fmt, MemorySegment __arg) {
        var mh$ = vdprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$0,"dprintf");
    }
    /**
     * {@snippet :
     * int dprintf(int __fd, char* __fmt,...);
     * }
     */
    public static int dprintf(int __fd, MemorySegment __fmt, Object... x2) {
        var mh$ = dprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$1,"fscanf");
    }
    /**
     * {@snippet :
     * int fscanf(FILE* __stream, char* __format,...);
     * }
     */
    public static int fscanf(MemorySegment __stream, MemorySegment __format, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$2,"scanf");
    }
    /**
     * {@snippet :
     * int scanf(char* __format,...);
     * }
     */
    public static int scanf(MemorySegment __format, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$3,"sscanf");
    }
    /**
     * {@snippet :
     * int sscanf(char* __s, char* __format,...);
     * }
     */
    public static int sscanf(MemorySegment __s, MemorySegment __format, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef float _Float32;
     * }
     */
    public static final OfFloat _Float32 = JAVA_FLOAT;
    /**
     * {@snippet :
     * typedef double _Float64;
     * }
     */
    public static final OfDouble _Float64 = JAVA_DOUBLE;
    /**
     * {@snippet :
     * typedef double _Float32x;
     * }
     */
    public static final OfDouble _Float32x = JAVA_DOUBLE;
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$4,"vfscanf");
    }
    /**
     * {@snippet :
     * int vfscanf(FILE* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vfscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$5,"vscanf");
    }
    /**
     * {@snippet :
     * int vscanf(char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vscanf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vscanf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$0,"vsscanf");
    }
    /**
     * {@snippet :
     * int vsscanf(char* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$1,"fgetc");
    }
    /**
     * {@snippet :
     * int fgetc(FILE* __stream);
     * }
     */
    public static int fgetc(MemorySegment __stream) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$2,"getc");
    }
    /**
     * {@snippet :
     * int getc(FILE* __stream);
     * }
     */
    public static int getc(MemorySegment __stream) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$4,"getchar");
    }
    /**
     * {@snippet :
     * int getchar();
     * }
     */
    public static int getchar() {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$5,"getc_unlocked");
    }
    /**
     * {@snippet :
     * int getc_unlocked(FILE* __stream);
     * }
     */
    public static int getc_unlocked(MemorySegment __stream) {
        var mh$ = getc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$0,"getchar_unlocked");
    }
    /**
     * {@snippet :
     * int getchar_unlocked();
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1,"fgetc_unlocked");
    }
    /**
     * {@snippet :
     * int fgetc_unlocked(FILE* __stream);
     * }
     */
    public static int fgetc_unlocked(MemorySegment __stream) {
        var mh$ = fgetc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$2,"fputc");
    }
    /**
     * {@snippet :
     * int fputc(int __c, FILE* __stream);
     * }
     */
    public static int fputc(int __c, MemorySegment __stream) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$3,"putc");
    }
    /**
     * {@snippet :
     * int putc(int __c, FILE* __stream);
     * }
     */
    public static int putc(int __c, MemorySegment __stream) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$4,"putchar");
    }
    /**
     * {@snippet :
     * int putchar(int __c);
     * }
     */
    public static int putchar(int __c) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"fputc_unlocked");
    }
    /**
     * {@snippet :
     * int fputc_unlocked(int __c, FILE* __stream);
     * }
     */
    public static int fputc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = fputc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$0,"putc_unlocked");
    }
    /**
     * {@snippet :
     * int putc_unlocked(int __c, FILE* __stream);
     * }
     */
    public static int putc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = putc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1,"putchar_unlocked");
    }
    /**
     * {@snippet :
     * int putchar_unlocked(int __c);
     * }
     */
    public static int putchar_unlocked(int __c) {
        var mh$ = putchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$2,"getw");
    }
    /**
     * {@snippet :
     * int getw(FILE* __stream);
     * }
     */
    public static int getw(MemorySegment __stream) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3,"putw");
    }
    /**
     * {@snippet :
     * int putw(int __w, FILE* __stream);
     * }
     */
    public static int putw(int __w, MemorySegment __stream) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(__w, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5,"fgets");
    }
    /**
     * {@snippet :
     * char* fgets(char* __s, int __n, FILE* __stream);
     * }
     */
    public static MemorySegment fgets(MemorySegment __s, int __n, MemorySegment __stream) {
        var mh$ = fgets$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"__getdelim");
    }
    /**
     * {@snippet :
     * __ssize_t __getdelim(char** __lineptr, size_t* __n, int __delimiter, FILE* __stream);
     * }
     */
    public static long __getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = __getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$2,"getdelim");
    }
    /**
     * {@snippet :
     * __ssize_t getdelim(char** __lineptr, size_t* __n, int __delimiter, FILE* __stream);
     * }
     */
    public static long getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$4,"getline");
    }
    /**
     * {@snippet :
     * __ssize_t getline(char** __lineptr, size_t* __n, FILE* __stream);
     * }
     */
    public static long getline(MemorySegment __lineptr, MemorySegment __n, MemorySegment __stream) {
        var mh$ = getline$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$5,"fputs");
    }
    /**
     * {@snippet :
     * int fputs(char* __s, FILE* __stream);
     * }
     */
    public static int fputs(MemorySegment __s, MemorySegment __stream) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(__s, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$0,"puts");
    }
    /**
     * {@snippet :
     * int puts(char* __s);
     * }
     */
    public static int puts(MemorySegment __s) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$1,"ungetc");
    }
    /**
     * {@snippet :
     * int ungetc(int __c, FILE* __stream);
     * }
     */
    public static int ungetc(int __c, MemorySegment __stream) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$3,"fread");
    }
    /**
     * {@snippet :
     * unsigned long fread(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4,"fwrite");
    }
    /**
     * {@snippet :
     * unsigned long fwrite(void* __ptr, size_t __size, size_t __n, FILE* __s);
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __n, MemorySegment __s) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$5,"fread_unlocked");
    }
    /**
     * {@snippet :
     * size_t fread_unlocked(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fread_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$0,"fwrite_unlocked");
    }
    /**
     * {@snippet :
     * size_t fwrite_unlocked(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fwrite_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fwrite_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$2,"fseek");
    }
    /**
     * {@snippet :
     * int fseek(FILE* __stream, long __off, int __whence);
     * }
     */
    public static int fseek(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$4,"ftell");
    }
    /**
     * {@snippet :
     * long ftell(FILE* __stream);
     * }
     */
    public static long ftell(MemorySegment __stream) {
        var mh$ = ftell$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$5,"rewind");
    }
    /**
     * {@snippet :
     * void rewind(FILE* __stream);
     * }
     */
    public static void rewind(MemorySegment __stream) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$0,"fseeko");
    }
    /**
     * {@snippet :
     * int fseeko(FILE* __stream, __off_t __off, int __whence);
     * }
     */
    public static int fseeko(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseeko$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$1,"ftello");
    }
    /**
     * {@snippet :
     * __off_t ftello(FILE* __stream);
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$2,"fgetpos");
    }
    /**
     * {@snippet :
     * int fgetpos(FILE* __stream, fpos_t* __pos);
     * }
     */
    public static int fgetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$3,"fsetpos");
    }
    /**
     * {@snippet :
     * int fsetpos(FILE* __stream, const fpos_t* __pos);
     * }
     */
    public static int fsetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$4,"clearerr");
    }
    /**
     * {@snippet :
     * void clearerr(FILE* __stream);
     * }
     */
    public static void clearerr(MemorySegment __stream) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$5,"feof");
    }
    /**
     * {@snippet :
     * int feof(FILE* __stream);
     * }
     */
    public static int feof(MemorySegment __stream) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$0,"ferror");
    }
    /**
     * {@snippet :
     * int ferror(FILE* __stream);
     * }
     */
    public static int ferror(MemorySegment __stream) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1,"clearerr_unlocked");
    }
    /**
     * {@snippet :
     * void clearerr_unlocked(FILE* __stream);
     * }
     */
    public static void clearerr_unlocked(MemorySegment __stream) {
        var mh$ = clearerr_unlocked$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$2,"feof_unlocked");
    }
    /**
     * {@snippet :
     * int feof_unlocked(FILE* __stream);
     * }
     */
    public static int feof_unlocked(MemorySegment __stream) {
        var mh$ = feof_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$3,"ferror_unlocked");
    }
    /**
     * {@snippet :
     * int ferror_unlocked(FILE* __stream);
     * }
     */
    public static int ferror_unlocked(MemorySegment __stream) {
        var mh$ = ferror_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$4,"perror");
    }
    /**
     * {@snippet :
     * void perror(char* __s);
     * }
     */
    public static void perror(MemorySegment __s) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$5,"fileno");
    }
    /**
     * {@snippet :
     * int fileno(FILE* __stream);
     * }
     */
    public static int fileno(MemorySegment __stream) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$0,"fileno_unlocked");
    }
    /**
     * {@snippet :
     * int fileno_unlocked(FILE* __stream);
     * }
     */
    public static int fileno_unlocked(MemorySegment __stream) {
        var mh$ = fileno_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$1,"pclose");
    }
    /**
     * {@snippet :
     * int pclose(FILE* __stream);
     * }
     */
    public static int pclose(MemorySegment __stream) {
        var mh$ = pclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$2,"popen");
    }
    /**
     * {@snippet :
     * FILE* popen(char* __command, char* __modes);
     * }
     */
    public static MemorySegment popen(MemorySegment __command, MemorySegment __modes) {
        var mh$ = popen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__command, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$3,"ctermid");
    }
    /**
     * {@snippet :
     * char* ctermid(char* __s);
     * }
     */
    public static MemorySegment ctermid(MemorySegment __s) {
        var mh$ = ctermid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4,"flockfile");
    }
    /**
     * {@snippet :
     * void flockfile(FILE* __stream);
     * }
     */
    public static void flockfile(MemorySegment __stream) {
        var mh$ = flockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$5,"ftrylockfile");
    }
    /**
     * {@snippet :
     * int ftrylockfile(FILE* __stream);
     * }
     */
    public static int ftrylockfile(MemorySegment __stream) {
        var mh$ = ftrylockfile$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$0,"funlockfile");
    }
    /**
     * {@snippet :
     * void funlockfile(FILE* __stream);
     * }
     */
    public static void funlockfile(MemorySegment __stream) {
        var mh$ = funlockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uflow$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1,"__uflow");
    }
    /**
     * {@snippet :
     * int __uflow(FILE*);
     * }
     */
    public static int __uflow(MemorySegment x0) {
        var mh$ = __uflow$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3,"__overflow");
    }
    /**
     * {@snippet :
     * int __overflow(FILE*, int);
     * }
     */
    public static int __overflow(MemorySegment x0, int x1) {
        var mh$ = __overflow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$4,"__ctype_get_mb_cur_max");
    }
    /**
     * {@snippet :
     * size_t __ctype_get_mb_cur_max();
     * }
     */
    public static long __ctype_get_mb_cur_max() {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$6,"atof");
    }
    /**
     * {@snippet :
     * double atof(char* __nptr);
     * }
     */
    public static double atof(MemorySegment __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$0,"atoi");
    }
    /**
     * {@snippet :
     * int atoi(char* __nptr);
     * }
     */
    public static int atoi(MemorySegment __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$1,"atol");
    }
    /**
     * {@snippet :
     * long atol(char* __nptr);
     * }
     */
    public static long atol(MemorySegment __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$2,"atoll");
    }
    /**
     * {@snippet :
     * long long atoll(char* __nptr);
     * }
     */
    public static long atoll(MemorySegment __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4,"strtod");
    }
    /**
     * {@snippet :
     * double strtod(char* __nptr, char** __endptr);
     * }
     */
    public static double strtod(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$6,"strtof");
    }
    /**
     * {@snippet :
     * float strtof(char* __nptr, char** __endptr);
     * }
     */
    public static float strtof(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$0,"strtol");
    }
    /**
     * {@snippet :
     * long strtol(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtol(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1,"strtoul");
    }
    /**
     * {@snippet :
     * unsigned long strtoul(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoul(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$2,"strtoq");
    }
    /**
     * {@snippet :
     * long long strtoq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$3,"strtouq");
    }
    /**
     * {@snippet :
     * unsigned long long strtouq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtouq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$4,"strtoll");
    }
    /**
     * {@snippet :
     * long long strtoll(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoll(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$5,"strtoull");
    }
    /**
     * {@snippet :
     * unsigned long long strtoull(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoull(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$1,"l64a");
    }
    /**
     * {@snippet :
     * char* l64a(long __n);
     * }
     */
    public static MemorySegment l64a(long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2,"a64l");
    }
    /**
     * {@snippet :
     * long a64l(char* __s);
     * }
     */
    public static long a64l(MemorySegment __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char u_char;
     * }
     */
    public static final OfByte u_char = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_short;
     * }
     */
    public static final OfShort u_short = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int;
     * }
     */
    public static final OfInt u_int = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long u_long;
     * }
     */
    public static final OfLong u_long = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long quad_t;
     * }
     */
    public static final OfLong quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long u_quad_t;
     * }
     */
    public static final OfLong u_quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long loff_t;
     * }
     */
    public static final OfLong loff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long ino_t;
     * }
     */
    public static final OfLong ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long dev_t;
     * }
     */
    public static final OfLong dev_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int gid_t;
     * }
     */
    public static final OfInt gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int mode_t;
     * }
     */
    public static final OfInt mode_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long nlink_t;
     * }
     */
    public static final OfLong nlink_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int uid_t;
     * }
     */
    public static final OfInt uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int pid_t;
     * }
     */
    public static final OfInt pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int id_t;
     * }
     */
    public static final OfInt id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int daddr_t;
     * }
     */
    public static final OfInt daddr_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef char* caddr_t;
     * }
     */
    public static final AddressLayout caddr_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef int key_t;
     * }
     */
    public static final OfInt key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long clock_t;
     * }
     */
    public static final OfLong clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int clockid_t;
     * }
     */
    public static final OfInt clockid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long time_t;
     * }
     */
    public static final OfLong time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef void* timer_t;
     * }
     */
    public static final AddressLayout timer_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long ulong;
     * }
     */
    public static final OfLong ulong = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned short ushort;
     * }
     */
    public static final OfShort ushort = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint;
     * }
     */
    public static final OfInt uint = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long register_t;
     * }
     */
    public static final OfLong register_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long suseconds_t;
     * }
     */
    public static final OfLong suseconds_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __fd_mask;
     * }
     */
    public static final OfLong __fd_mask = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long fd_mask;
     * }
     */
    public static final OfLong fd_mask = JAVA_LONG;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$6,"select");
    }
    /**
     * {@snippet :
     * int select(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timeval* __timeout);
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$1,"pselect");
    }
    /**
     * {@snippet :
     * int pselect(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timespec* __timeout, const __sigset_t* __sigmask);
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long blksize_t;
     * }
     */
    public static final OfLong blksize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long blkcnt_t;
     * }
     */
    public static final OfLong blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long fsblkcnt_t;
     * }
     */
    public static final OfLong fsblkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long fsfilcnt_t;
     * }
     */
    public static final OfLong fsfilcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __tss_t;
     * }
     */
    public static final OfInt __tss_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __thrd_t;
     * }
     */
    public static final OfLong __thrd_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long pthread_t;
     * }
     */
    public static final OfLong pthread_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int pthread_key_t;
     * }
     */
    public static final OfInt pthread_key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int pthread_once_t;
     * }
     */
    public static final OfInt pthread_once_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int pthread_spinlock_t;
     * }
     */
    public static final OfInt pthread_spinlock_t = JAVA_INT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$1,"random");
    }
    /**
     * {@snippet :
     * long random();
     * }
     */
    public static long random() {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$3,"srandom");
    }
    /**
     * {@snippet :
     * void srandom(unsigned int __seed);
     * }
     */
    public static void srandom(int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$5,"initstate");
    }
    /**
     * {@snippet :
     * char* initstate(unsigned int __seed, char* __statebuf, size_t __statelen);
     * }
     */
    public static MemorySegment initstate(int __seed, MemorySegment __statebuf, long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$0,"setstate");
    }
    /**
     * {@snippet :
     * char* setstate(char* __statebuf);
     * }
     */
    public static MemorySegment setstate(MemorySegment __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$3,"random_r");
    }
    /**
     * {@snippet :
     * int random_r(struct random_data* __buf, int32_t* __result);
     * }
     */
    public static int random_r(MemorySegment __buf, MemorySegment __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$4,"srandom_r");
    }
    /**
     * {@snippet :
     * int srandom_r(unsigned int __seed, struct random_data* __buf);
     * }
     */
    public static int srandom_r(int __seed, MemorySegment __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$6,"initstate_r");
    }
    /**
     * {@snippet :
     * int initstate_r(unsigned int __seed, char* __statebuf, size_t __statelen, struct random_data* __buf);
     * }
     */
    public static int initstate_r(int __seed, MemorySegment __statebuf, long __statelen, MemorySegment __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$0,"setstate_r");
    }
    /**
     * {@snippet :
     * int setstate_r(char* __statebuf, struct random_data* __buf);
     * }
     */
    public static int setstate_r(MemorySegment __statebuf, MemorySegment __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$1,"rand");
    }
    /**
     * {@snippet :
     * int rand();
     * }
     */
    public static int rand() {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$2,"srand");
    }
    /**
     * {@snippet :
     * void srand(unsigned int __seed);
     * }
     */
    public static void srand(int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$3,"rand_r");
    }
    /**
     * {@snippet :
     * int rand_r(unsigned int* __seed);
     * }
     */
    public static int rand_r(MemorySegment __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$5,"drand48");
    }
    /**
     * {@snippet :
     * double drand48();
     * }
     */
    public static double drand48() {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$0,"erand48");
    }
    /**
     * {@snippet :
     * double erand48(unsigned short __xsubi[3]);
     * }
     */
    public static double erand48(MemorySegment __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$1,"lrand48");
    }
    /**
     * {@snippet :
     * long lrand48();
     * }
     */
    public static long lrand48() {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$2,"nrand48");
    }
    /**
     * {@snippet :
     * long nrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long nrand48(MemorySegment __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3,"mrand48");
    }
    /**
     * {@snippet :
     * long mrand48();
     * }
     */
    public static long mrand48() {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$4,"jrand48");
    }
    /**
     * {@snippet :
     * long jrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long jrand48(MemorySegment __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$6,"srand48");
    }
    /**
     * {@snippet :
     * void srand48(long __seedval);
     * }
     */
    public static void srand48(long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$0,"seed48");
    }
    /**
     * {@snippet :
     * unsigned short* seed48(unsigned short __seed16v[3]);
     * }
     */
    public static MemorySegment seed48(MemorySegment __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$1,"lcong48");
    }
    /**
     * {@snippet :
     * void lcong48(unsigned short __param[7]);
     * }
     */
    public static void lcong48(MemorySegment __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$0,"drand48_r");
    }
    /**
     * {@snippet :
     * int drand48_r(struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int drand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$1,"erand48_r");
    }
    /**
     * {@snippet :
     * int erand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int erand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$2,"lrand48_r");
    }
    /**
     * {@snippet :
     * int lrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int lrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$3,"nrand48_r");
    }
    /**
     * {@snippet :
     * int nrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int nrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$4,"mrand48_r");
    }
    /**
     * {@snippet :
     * int mrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int mrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


