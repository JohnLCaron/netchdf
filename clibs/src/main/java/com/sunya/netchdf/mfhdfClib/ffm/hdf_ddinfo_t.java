// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct hdf_ddinfo_t {
 *     uint16 tag;
 *     uint16 ref;
 *     int32 offset;
 *     int32 length;
 * };
 * }
 */
public class hdf_ddinfo_t {

    public static MemoryLayout $LAYOUT() {
        return constants$212.const$4;
    }
    public static VarHandle tag$VH() {
        return constants$212.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16 tag;
     * }
     */
    public static short tag$get(MemorySegment seg) {
        return (short)constants$212.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16 tag;
     * }
     */
    public static void tag$set(MemorySegment seg, short x) {
        constants$212.const$5.set(seg, x);
    }
    public static short tag$get(MemorySegment seg, long index) {
        return (short)constants$212.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void tag$set(MemorySegment seg, long index, short x) {
        constants$212.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ref$VH() {
        return constants$213.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16 ref;
     * }
     */
    public static short ref$get(MemorySegment seg) {
        return (short)constants$213.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16 ref;
     * }
     */
    public static void ref$set(MemorySegment seg, short x) {
        constants$213.const$0.set(seg, x);
    }
    public static short ref$get(MemorySegment seg, long index) {
        return (short)constants$213.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ref$set(MemorySegment seg, long index, short x) {
        constants$213.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle offset$VH() {
        return constants$213.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32 offset;
     * }
     */
    public static int offset$get(MemorySegment seg) {
        return (int)constants$213.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32 offset;
     * }
     */
    public static void offset$set(MemorySegment seg, int x) {
        constants$213.const$1.set(seg, x);
    }
    public static int offset$get(MemorySegment seg, long index) {
        return (int)constants$213.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, int x) {
        constants$213.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle length$VH() {
        return constants$213.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32 length;
     * }
     */
    public static int length$get(MemorySegment seg) {
        return (int)constants$213.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32 length;
     * }
     */
    public static void length$set(MemorySegment seg, int x) {
        constants$213.const$2.set(seg, x);
    }
    public static int length$get(MemorySegment seg, long index) {
        return (int)constants$213.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, int x) {
        constants$213.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


