// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class mfhdf_h_2 extends mfhdf_h_1 {

    public static MethodHandle DFSDsetcal$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$4,"DFSDsetcal");
    }
    /**
     * {@snippet :
     * int DFSDsetcal(float64 cal, float64 cal_err, float64 ioff, float64 ioff_err, int32 cal_nt);
     * }
     */
    public static int DFSDsetcal(double cal, double cal_err, double ioff, double ioff_err, int cal_nt) {
        var mh$ = DFSDsetcal$MH();
        try {
            return (int)mh$.invokeExact(cal, cal_err, ioff, ioff_err, cal_nt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetcal$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$5,"DFSDgetcal");
    }
    /**
     * {@snippet :
     * int DFSDgetcal(float64* pcal, float64* pcal_err, float64* pioff, float64* pioff_err, int32* cal_nt);
     * }
     */
    public static int DFSDgetcal(MemorySegment pcal, MemorySegment pcal_err, MemorySegment pioff, MemorySegment pioff_err, MemorySegment cal_nt) {
        var mh$ = DFSDgetcal$MH();
        try {
            return (int)mh$.invokeExact(pcal, pcal_err, pioff, pioff_err, cal_nt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDwriteref$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$0,"DFSDwriteref");
    }
    /**
     * {@snippet :
     * int DFSDwriteref(char* filename, uint16 ref);
     * }
     */
    public static int DFSDwriteref(MemorySegment filename, short ref) {
        var mh$ = DFSDwriteref$MH();
        try {
            return (int)mh$.invokeExact(filename, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDsetfillvalue$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$1,"DFSDsetfillvalue");
    }
    /**
     * {@snippet :
     * int DFSDsetfillvalue(void* fill_value);
     * }
     */
    public static int DFSDsetfillvalue(MemorySegment fill_value) {
        var mh$ = DFSDsetfillvalue$MH();
        try {
            return (int)mh$.invokeExact(fill_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetfillvalue$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$2,"DFSDgetfillvalue");
    }
    /**
     * {@snippet :
     * int DFSDgetfillvalue(void* fill_value);
     * }
     */
    public static int DFSDgetfillvalue(MemorySegment fill_value) {
        var mh$ = DFSDgetfillvalue$MH();
        try {
            return (int)mh$.invokeExact(fill_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDstartslab$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$3,"DFSDstartslab");
    }
    /**
     * {@snippet :
     * int DFSDstartslab(char* filename);
     * }
     */
    public static int DFSDstartslab(MemorySegment filename) {
        var mh$ = DFSDstartslab$MH();
        try {
            return (int)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDwriteslab$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$4,"DFSDwriteslab");
    }
    /**
     * {@snippet :
     * int DFSDwriteslab(int32 start[], int32 stride[], int32 count[], void* data);
     * }
     */
    public static int DFSDwriteslab(MemorySegment start, MemorySegment stride, MemorySegment count, MemorySegment data) {
        var mh$ = DFSDwriteslab$MH();
        try {
            return (int)mh$.invokeExact(start, stride, count, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDendslab$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$5,"DFSDendslab");
    }
    /**
     * {@snippet :
     * int DFSDendslab();
     * }
     */
    public static int DFSDendslab() {
        var mh$ = DFSDendslab$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDreadslab$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$1,"DFSDreadslab");
    }
    /**
     * {@snippet :
     * int DFSDreadslab(char* filename, int32 start[], int32 slab_size[], int32 stride[], void* buffer, int32 buffer_size[]);
     * }
     */
    public static int DFSDreadslab(MemorySegment filename, MemorySegment start, MemorySegment slab_size, MemorySegment stride, MemorySegment buffer, MemorySegment buffer_size) {
        var mh$ = DFSDreadslab$MH();
        try {
            return (int)mh$.invokeExact(filename, start, slab_size, stride, buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDPshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$2,"DFSDPshutdown");
    }
    /**
     * {@snippet :
     * intn DFSDPshutdown();
     * }
     */
    public static int DFSDPshutdown() {
        var mh$ = DFSDPshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKNTsize$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$3,"DFKNTsize");
    }
    /**
     * {@snippet :
     * int DFKNTsize(int32 number_type);
     * }
     */
    public static int DFKNTsize(int number_type) {
        var mh$ = DFKNTsize$MH();
        try {
            return (int)mh$.invokeExact(number_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKisnativeNT$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$4,"DFKisnativeNT");
    }
    /**
     * {@snippet :
     * int32 DFKisnativeNT(int32 numbertype);
     * }
     */
    public static int DFKisnativeNT(int numbertype) {
        var mh$ = DFKisnativeNT$MH();
        try {
            return (int)mh$.invokeExact(numbertype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKislitendNT$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$5,"DFKislitendNT");
    }
    /**
     * {@snippet :
     * int32 DFKislitendNT(int32 numbertype);
     * }
     */
    public static int DFKislitendNT(int numbertype) {
        var mh$ = DFKislitendNT$MH();
        try {
            return (int)mh$.invokeExact(numbertype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKgetPNSC$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$1,"DFKgetPNSC");
    }
    /**
     * {@snippet :
     * int8 DFKgetPNSC(int32 numbertype, int32 machinetype);
     * }
     */
    public static byte DFKgetPNSC(int numbertype, int machinetype) {
        var mh$ = DFKgetPNSC$MH();
        try {
            return (byte)mh$.invokeExact(numbertype, machinetype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKsetNT$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$2,"DFKsetNT");
    }
    /**
     * {@snippet :
     * intn DFKsetNT(int32 ntype);
     * }
     */
    public static int DFKsetNT(int ntype) {
        var mh$ = DFKsetNT$MH();
        try {
            return (int)mh$.invokeExact(ntype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKconvert$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$4,"DFKconvert");
    }
    /**
     * {@snippet :
     * int32 DFKconvert(void* source, void* dest, int32 ntype, int32 num_elm, int16 acc_mode, int32 source_stride, int32 dest_stride);
     * }
     */
    public static int DFKconvert(MemorySegment source, MemorySegment dest, int ntype, int num_elm, short acc_mode, int source_stride, int dest_stride) {
        var mh$ = DFKconvert$MH();
        try {
            return (int)mh$.invokeExact(source, dest, ntype, num_elm, acc_mode, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKnb1b$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$6,"DFKnb1b");
    }
    /**
     * {@snippet :
     * intn DFKnb1b(void* s, void* d, uint32 num_elm, uint32 source_stride, uint32 dest_stride);
     * }
     */
    public static int DFKnb1b(MemorySegment s, MemorySegment d, int num_elm, int source_stride, int dest_stride) {
        var mh$ = DFKnb1b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKnb2b$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$0,"DFKnb2b");
    }
    /**
     * {@snippet :
     * intn DFKnb2b(void* s, void* d, uint32 num_elm, uint32 source_stride, uint32 dest_stride);
     * }
     */
    public static int DFKnb2b(MemorySegment s, MemorySegment d, int num_elm, int source_stride, int dest_stride) {
        var mh$ = DFKnb2b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKnb4b$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$1,"DFKnb4b");
    }
    /**
     * {@snippet :
     * intn DFKnb4b(void* s, void* d, uint32 num_elm, uint32 source_stride, uint32 dest_stride);
     * }
     */
    public static int DFKnb4b(MemorySegment s, MemorySegment d, int num_elm, int source_stride, int dest_stride) {
        var mh$ = DFKnb4b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKnb8b$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$2,"DFKnb8b");
    }
    /**
     * {@snippet :
     * intn DFKnb8b(void* s, void* d, uint32 num_elm, uint32 source_stride, uint32 dest_stride);
     * }
     */
    public static int DFKnb8b(MemorySegment s, MemorySegment d, int num_elm, int source_stride, int dest_stride) {
        var mh$ = DFKnb8b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKsb2b$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$3,"DFKsb2b");
    }
    /**
     * {@snippet :
     * intn DFKsb2b(void* s, void* d, uint32 num_elm, uint32 source_stride, uint32 dest_stride);
     * }
     */
    public static int DFKsb2b(MemorySegment s, MemorySegment d, int num_elm, int source_stride, int dest_stride) {
        var mh$ = DFKsb2b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKsb4b$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$4,"DFKsb4b");
    }
    /**
     * {@snippet :
     * intn DFKsb4b(void* s, void* d, uint32 num_elm, uint32 source_stride, uint32 dest_stride);
     * }
     */
    public static int DFKsb4b(MemorySegment s, MemorySegment d, int num_elm, int source_stride, int dest_stride) {
        var mh$ = DFKsb4b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKsb8b$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$5,"DFKsb8b");
    }
    /**
     * {@snippet :
     * intn DFKsb8b(void* s, void* d, uint32 num_elm, uint32 source_stride, uint32 dest_stride);
     * }
     */
    public static int DFKsb8b(MemorySegment s, MemorySegment d, int num_elm, int source_stride, int dest_stride) {
        var mh$ = DFKsb8b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANstart$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$0,"ANstart");
    }
    /**
     * {@snippet :
     * int32 ANstart(int32 file_id);
     * }
     */
    public static int ANstart(int file_id) {
        var mh$ = ANstart$MH();
        try {
            return (int)mh$.invokeExact(file_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANfileinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$1,"ANfileinfo");
    }
    /**
     * {@snippet :
     * intn ANfileinfo(int32 an_id, int32* n_file_label, int32* n_file_desc, int32* n_obj_label, int32* n_obj_desc);
     * }
     */
    public static int ANfileinfo(int an_id, MemorySegment n_file_label, MemorySegment n_file_desc, MemorySegment n_obj_label, MemorySegment n_obj_desc) {
        var mh$ = ANfileinfo$MH();
        try {
            return (int)mh$.invokeExact(an_id, n_file_label, n_file_desc, n_obj_label, n_obj_desc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANend$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$2,"ANend");
    }
    /**
     * {@snippet :
     * int32 ANend(int32 an_id);
     * }
     */
    public static int ANend(int an_id) {
        var mh$ = ANend$MH();
        try {
            return (int)mh$.invokeExact(an_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANcreate$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$3,"ANcreate");
    }
    /**
     * {@snippet :
     * int32 ANcreate(int32 an_id, uint16 elem_tag, uint16 elem_ref, ann_type type);
     * }
     */
    public static int ANcreate(int an_id, short elem_tag, short elem_ref, int type) {
        var mh$ = ANcreate$MH();
        try {
            return (int)mh$.invokeExact(an_id, elem_tag, elem_ref, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANcreatef$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$4,"ANcreatef");
    }
    /**
     * {@snippet :
     * int32 ANcreatef(int32 an_id, ann_type type);
     * }
     */
    public static int ANcreatef(int an_id, int type) {
        var mh$ = ANcreatef$MH();
        try {
            return (int)mh$.invokeExact(an_id, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANselect$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$5,"ANselect");
    }
    /**
     * {@snippet :
     * int32 ANselect(int32 an_id, int32 idx, ann_type type);
     * }
     */
    public static int ANselect(int an_id, int idx, int type) {
        var mh$ = ANselect$MH();
        try {
            return (int)mh$.invokeExact(an_id, idx, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANnumann$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$0,"ANnumann");
    }
    /**
     * {@snippet :
     * intn ANnumann(int32 an_id, ann_type type, uint16 elem_tag, uint16 elem_ref);
     * }
     */
    public static int ANnumann(int an_id, int type, short elem_tag, short elem_ref) {
        var mh$ = ANnumann$MH();
        try {
            return (int)mh$.invokeExact(an_id, type, elem_tag, elem_ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANannlist$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$2,"ANannlist");
    }
    /**
     * {@snippet :
     * intn ANannlist(int32 an_id, ann_type type, uint16 elem_tag, uint16 elem_ref, int32 ann_list[]);
     * }
     */
    public static int ANannlist(int an_id, int type, short elem_tag, short elem_ref, MemorySegment ann_list) {
        var mh$ = ANannlist$MH();
        try {
            return (int)mh$.invokeExact(an_id, type, elem_tag, elem_ref, ann_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANannlen$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$3,"ANannlen");
    }
    /**
     * {@snippet :
     * int32 ANannlen(int32 ann_id);
     * }
     */
    public static int ANannlen(int ann_id) {
        var mh$ = ANannlen$MH();
        try {
            return (int)mh$.invokeExact(ann_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANwriteann$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$4,"ANwriteann");
    }
    /**
     * {@snippet :
     * int32 ANwriteann(int32 ann_id, char* ann, int32 annlen);
     * }
     */
    public static int ANwriteann(int ann_id, MemorySegment ann, int annlen) {
        var mh$ = ANwriteann$MH();
        try {
            return (int)mh$.invokeExact(ann_id, ann, annlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANreadann$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$5,"ANreadann");
    }
    /**
     * {@snippet :
     * int32 ANreadann(int32 ann_id, char* ann, int32 maxlen);
     * }
     */
    public static int ANreadann(int ann_id, MemorySegment ann, int maxlen) {
        var mh$ = ANreadann$MH();
        try {
            return (int)mh$.invokeExact(ann_id, ann, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANendaccess$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$0,"ANendaccess");
    }
    /**
     * {@snippet :
     * intn ANendaccess(int32 ann_id);
     * }
     */
    public static int ANendaccess(int ann_id) {
        var mh$ = ANendaccess$MH();
        try {
            return (int)mh$.invokeExact(ann_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANget_tagref$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$2,"ANget_tagref");
    }
    /**
     * {@snippet :
     * int32 ANget_tagref(int32 an_id, int32 idx, ann_type type, uint16* ann_tag, uint16* ann_ref);
     * }
     */
    public static int ANget_tagref(int an_id, int idx, int type, MemorySegment ann_tag, MemorySegment ann_ref) {
        var mh$ = ANget_tagref$MH();
        try {
            return (int)mh$.invokeExact(an_id, idx, type, ann_tag, ann_ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANid2tagref$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$3,"ANid2tagref");
    }
    /**
     * {@snippet :
     * int32 ANid2tagref(int32 an_id, uint16* ann_tag, uint16* ann_ref);
     * }
     */
    public static int ANid2tagref(int an_id, MemorySegment ann_tag, MemorySegment ann_ref) {
        var mh$ = ANid2tagref$MH();
        try {
            return (int)mh$.invokeExact(an_id, ann_tag, ann_ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANtagref2id$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$4,"ANtagref2id");
    }
    /**
     * {@snippet :
     * int32 ANtagref2id(int32 an_id, uint16 ann_tag, uint16 ann_ref);
     * }
     */
    public static int ANtagref2id(int an_id, short ann_tag, short ann_ref) {
        var mh$ = ANtagref2id$MH();
        try {
            return (int)mh$.invokeExact(an_id, ann_tag, ann_ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANatype2tag$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$5,"ANatype2tag");
    }
    /**
     * {@snippet :
     * uint16 ANatype2tag(ann_type atype);
     * }
     */
    public static short ANatype2tag(int atype) {
        var mh$ = ANatype2tag$MH();
        try {
            return (short)mh$.invokeExact(atype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANtag2atype$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$0,"ANtag2atype");
    }
    /**
     * {@snippet :
     * ann_type ANtag2atype(uint16 atag);
     * }
     */
    public static int ANtag2atype(short atag) {
        var mh$ = ANtag2atype$MH();
        try {
            return (int)mh$.invokeExact(atag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rigcompare$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$1,"rigcompare");
    }
    /**
     * {@snippet :
     * intn rigcompare(void* k1, void* k2, intn cmparg);
     * }
     */
    public static int rigcompare(MemorySegment k1, MemorySegment k2, int cmparg) {
        var mh$ = rigcompare$MH();
        try {
            return (int)mh$.invokeExact(k1, k2, cmparg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRstart$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$2,"GRstart");
    }
    /**
     * {@snippet :
     * int32 GRstart(int32 hdf_file_id);
     * }
     */
    public static int GRstart(int hdf_file_id) {
        var mh$ = GRstart$MH();
        try {
            return (int)mh$.invokeExact(hdf_file_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRfileinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$3,"GRfileinfo");
    }
    /**
     * {@snippet :
     * intn GRfileinfo(int32 grid, int32* n_datasets, int32* n_attrs);
     * }
     */
    public static int GRfileinfo(int grid, MemorySegment n_datasets, MemorySegment n_attrs) {
        var mh$ = GRfileinfo$MH();
        try {
            return (int)mh$.invokeExact(grid, n_datasets, n_attrs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRend$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$4,"GRend");
    }
    /**
     * {@snippet :
     * intn GRend(int32 grid);
     * }
     */
    public static int GRend(int grid) {
        var mh$ = GRend$MH();
        try {
            return (int)mh$.invokeExact(grid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRcreate$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$6,"GRcreate");
    }
    /**
     * {@snippet :
     * int32 GRcreate(int32 grid, char* name, int32 ncomp, int32 nt, int32 il, int32 dimsizes[2]);
     * }
     */
    public static int GRcreate(int grid, MemorySegment name, int ncomp, int nt, int il, MemorySegment dimsizes) {
        var mh$ = GRcreate$MH();
        try {
            return (int)mh$.invokeExact(grid, name, ncomp, nt, il, dimsizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRselect$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$0,"GRselect");
    }
    /**
     * {@snippet :
     * int32 GRselect(int32 grid, int32 idx);
     * }
     */
    public static int GRselect(int grid, int idx) {
        var mh$ = GRselect$MH();
        try {
            return (int)mh$.invokeExact(grid, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRnametoindex$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$1,"GRnametoindex");
    }
    /**
     * {@snippet :
     * int32 GRnametoindex(int32 grid, char* name);
     * }
     */
    public static int GRnametoindex(int grid, MemorySegment name) {
        var mh$ = GRnametoindex$MH();
        try {
            return (int)mh$.invokeExact(grid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetiminfo$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$3,"GRgetiminfo");
    }
    /**
     * {@snippet :
     * intn GRgetiminfo(int32 riid, char* name, int32* ncomp, int32* nt, int32* il, int32 dimsizes[2], int32* n_attr);
     * }
     */
    public static int GRgetiminfo(int riid, MemorySegment name, MemorySegment ncomp, MemorySegment nt, MemorySegment il, MemorySegment dimsizes, MemorySegment n_attr) {
        var mh$ = GRgetiminfo$MH();
        try {
            return (int)mh$.invokeExact(riid, name, ncomp, nt, il, dimsizes, n_attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetnluts$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$4,"GRgetnluts");
    }
    /**
     * {@snippet :
     * intn GRgetnluts(int32 riid);
     * }
     */
    public static int GRgetnluts(int riid) {
        var mh$ = GRgetnluts$MH();
        try {
            return (int)mh$.invokeExact(riid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRwriteimage$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$5,"GRwriteimage");
    }
    /**
     * {@snippet :
     * intn GRwriteimage(int32 riid, int32 start[2], int32 stride[2], int32 count[2], void* data);
     * }
     */
    public static int GRwriteimage(int riid, MemorySegment start, MemorySegment stride, MemorySegment count, MemorySegment data) {
        var mh$ = GRwriteimage$MH();
        try {
            return (int)mh$.invokeExact(riid, start, stride, count, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRreadimage$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$0,"GRreadimage");
    }
    /**
     * {@snippet :
     * intn GRreadimage(int32 riid, int32 start[2], int32 stride[2], int32 count[2], void* data);
     * }
     */
    public static int GRreadimage(int riid, MemorySegment start, MemorySegment stride, MemorySegment count, MemorySegment data) {
        var mh$ = GRreadimage$MH();
        try {
            return (int)mh$.invokeExact(riid, start, stride, count, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRendaccess$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$1,"GRendaccess");
    }
    /**
     * {@snippet :
     * intn GRendaccess(int32 riid);
     * }
     */
    public static int GRendaccess(int riid) {
        var mh$ = GRendaccess$MH();
        try {
            return (int)mh$.invokeExact(riid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRidtoref$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$2,"GRidtoref");
    }
    /**
     * {@snippet :
     * uint16 GRidtoref(int32 riid);
     * }
     */
    public static short GRidtoref(int riid) {
        var mh$ = GRidtoref$MH();
        try {
            return (short)mh$.invokeExact(riid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRreftoindex$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$3,"GRreftoindex");
    }
    /**
     * {@snippet :
     * int32 GRreftoindex(int32 grid, uint16 ref);
     * }
     */
    public static int GRreftoindex(int grid, short ref) {
        var mh$ = GRreftoindex$MH();
        try {
            return (int)mh$.invokeExact(grid, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRreqlutil$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$4,"GRreqlutil");
    }
    /**
     * {@snippet :
     * intn GRreqlutil(int32 riid, intn il);
     * }
     */
    public static int GRreqlutil(int riid, int il) {
        var mh$ = GRreqlutil$MH();
        try {
            return (int)mh$.invokeExact(riid, il);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRreqimageil$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$5,"GRreqimageil");
    }
    /**
     * {@snippet :
     * intn GRreqimageil(int32 riid, intn il);
     * }
     */
    public static int GRreqimageil(int riid, int il) {
        var mh$ = GRreqimageil$MH();
        try {
            return (int)mh$.invokeExact(riid, il);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetlutid$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$0,"GRgetlutid");
    }
    /**
     * {@snippet :
     * int32 GRgetlutid(int32 riid, int32 idx);
     * }
     */
    public static int GRgetlutid(int riid, int idx) {
        var mh$ = GRgetlutid$MH();
        try {
            return (int)mh$.invokeExact(riid, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRluttoref$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$1,"GRluttoref");
    }
    /**
     * {@snippet :
     * uint16 GRluttoref(int32 lutid);
     * }
     */
    public static short GRluttoref(int lutid) {
        var mh$ = GRluttoref$MH();
        try {
            return (short)mh$.invokeExact(lutid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetlutinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$2,"GRgetlutinfo");
    }
    /**
     * {@snippet :
     * intn GRgetlutinfo(int32 riid, int32* ncomp, int32* nt, int32* il, int32* nentries);
     * }
     */
    public static int GRgetlutinfo(int riid, MemorySegment ncomp, MemorySegment nt, MemorySegment il, MemorySegment nentries) {
        var mh$ = GRgetlutinfo$MH();
        try {
            return (int)mh$.invokeExact(riid, ncomp, nt, il, nentries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRwritelut$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$4,"GRwritelut");
    }
    /**
     * {@snippet :
     * intn GRwritelut(int32 riid, int32 ncomps, int32 nt, int32 il, int32 nentries, void* data);
     * }
     */
    public static int GRwritelut(int riid, int ncomps, int nt, int il, int nentries, MemorySegment data) {
        var mh$ = GRwritelut$MH();
        try {
            return (int)mh$.invokeExact(riid, ncomps, nt, il, nentries, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRreadlut$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$5,"GRreadlut");
    }
    /**
     * {@snippet :
     * intn GRreadlut(int32 lutid, void* data);
     * }
     */
    public static int GRreadlut(int lutid, MemorySegment data) {
        var mh$ = GRreadlut$MH();
        try {
            return (int)mh$.invokeExact(lutid, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRsetexternalfile$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$0,"GRsetexternalfile");
    }
    /**
     * {@snippet :
     * intn GRsetexternalfile(int32 riid, char* filename, int32 offset);
     * }
     */
    public static int GRsetexternalfile(int riid, MemorySegment filename, int offset) {
        var mh$ = GRsetexternalfile$MH();
        try {
            return (int)mh$.invokeExact(riid, filename, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRsetaccesstype$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$1,"GRsetaccesstype");
    }
    /**
     * {@snippet :
     * intn GRsetaccesstype(int32 riid, uintn accesstype);
     * }
     */
    public static int GRsetaccesstype(int riid, int accesstype) {
        var mh$ = GRsetaccesstype$MH();
        try {
            return (int)mh$.invokeExact(riid, accesstype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRsetcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$2,"GRsetcompress");
    }
    /**
     * {@snippet :
     * intn GRsetcompress(int32 riid, comp_coder_t comp_type, comp_info* cinfo);
     * }
     */
    public static int GRsetcompress(int riid, int comp_type, MemorySegment cinfo) {
        var mh$ = GRsetcompress$MH();
        try {
            return (int)mh$.invokeExact(riid, comp_type, cinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$3,"GRgetcompress");
    }
    /**
     * {@snippet :
     * intn GRgetcompress(int32 riid, comp_coder_t* comp_type, comp_info* cinfo);
     * }
     */
    public static int GRgetcompress(int riid, MemorySegment comp_type, MemorySegment cinfo) {
        var mh$ = GRgetcompress$MH();
        try {
            return (int)mh$.invokeExact(riid, comp_type, cinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetcompinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$4,"GRgetcompinfo");
    }
    /**
     * {@snippet :
     * intn GRgetcompinfo(int32 riid, comp_coder_t* comp_type, comp_info* cinfo);
     * }
     */
    public static int GRgetcompinfo(int riid, MemorySegment comp_type, MemorySegment cinfo) {
        var mh$ = GRgetcompinfo$MH();
        try {
            return (int)mh$.invokeExact(riid, comp_type, cinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRsetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$6,"GRsetattr");
    }
    /**
     * {@snippet :
     * intn GRsetattr(int32 id, char* name, int32 attr_nt, int32 count, void* data);
     * }
     */
    public static int GRsetattr(int id, MemorySegment name, int attr_nt, int count, MemorySegment data) {
        var mh$ = GRsetattr$MH();
        try {
            return (int)mh$.invokeExact(id, name, attr_nt, count, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRattrinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$1,"GRattrinfo");
    }
    /**
     * {@snippet :
     * intn GRattrinfo(int32 id, int32 idx, char* name, int32* attr_nt, int32* count);
     * }
     */
    public static int GRattrinfo(int id, int idx, MemorySegment name, MemorySegment attr_nt, MemorySegment count) {
        var mh$ = GRattrinfo$MH();
        try {
            return (int)mh$.invokeExact(id, idx, name, attr_nt, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$2,"GRgetattr");
    }
    /**
     * {@snippet :
     * intn GRgetattr(int32 id, int32 idx, void* data);
     * }
     */
    public static int GRgetattr(int id, int idx, MemorySegment data) {
        var mh$ = GRgetattr$MH();
        try {
            return (int)mh$.invokeExact(id, idx, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRfindattr$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$3,"GRfindattr");
    }
    /**
     * {@snippet :
     * int32 GRfindattr(int32 id, char* name);
     * }
     */
    public static int GRfindattr(int id, MemorySegment name) {
        var mh$ = GRfindattr$MH();
        try {
            return (int)mh$.invokeExact(id, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetcomptype$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$4,"GRgetcomptype");
    }
    /**
     * {@snippet :
     * intn GRgetcomptype(int32 riid, comp_coder_t* comp_type);
     * }
     */
    public static int GRgetcomptype(int riid, MemorySegment comp_type) {
        var mh$ = GRgetcomptype$MH();
        try {
            return (int)mh$.invokeExact(riid, comp_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRPshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$5,"GRPshutdown");
    }
    /**
     * {@snippet :
     * intn GRPshutdown();
     * }
     */
    public static int GRPshutdown() {
        var mh$ = GRPshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GR2bmapped$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$0,"GR2bmapped");
    }
    /**
     * {@snippet :
     * intn GR2bmapped(int32 riid, intn* tobe_mapped, intn* created_byGR);
     * }
     */
    public static int GR2bmapped(int riid, MemorySegment tobe_mapped, MemorySegment created_byGR) {
        var mh$ = GR2bmapped$MH();
        try {
            return (int)mh$.invokeExact(riid, tobe_mapped, created_byGR);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRsetchunk$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$5,"GRsetchunk");
    }
    /**
     * {@snippet :
     * intn GRsetchunk(int32 riid, HDF_CHUNK_DEF chunk_def, int32 flags);
     * }
     */
    public static int GRsetchunk(int riid, MemorySegment chunk_def, int flags) {
        var mh$ = GRsetchunk$MH();
        try {
            return (int)mh$.invokeExact(riid, chunk_def, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetchunkinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$0,"GRgetchunkinfo");
    }
    /**
     * {@snippet :
     * intn GRgetchunkinfo(int32 riid, HDF_CHUNK_DEF* chunk_def, int32* flags);
     * }
     */
    public static int GRgetchunkinfo(int riid, MemorySegment chunk_def, MemorySegment flags) {
        var mh$ = GRgetchunkinfo$MH();
        try {
            return (int)mh$.invokeExact(riid, chunk_def, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRwritechunk$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$1,"GRwritechunk");
    }
    /**
     * {@snippet :
     * intn GRwritechunk(int32 riid, int32* origin, void* datap);
     * }
     */
    public static int GRwritechunk(int riid, MemorySegment origin, MemorySegment datap) {
        var mh$ = GRwritechunk$MH();
        try {
            return (int)mh$.invokeExact(riid, origin, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRreadchunk$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$2,"GRreadchunk");
    }
    /**
     * {@snippet :
     * intn GRreadchunk(int32 riid, int32* origin, void* datap);
     * }
     */
    public static int GRreadchunk(int riid, MemorySegment origin, MemorySegment datap) {
        var mh$ = GRreadchunk$MH();
        try {
            return (int)mh$.invokeExact(riid, origin, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRsetchunkcache$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$3,"GRsetchunkcache");
    }
    /**
     * {@snippet :
     * intn GRsetchunkcache(int32 riid, int32 maxcache, int32 flags);
     * }
     */
    public static int GRsetchunkcache(int riid, int maxcache, int flags) {
        var mh$ = GRsetchunkcache$MH();
        try {
            return (int)mh$.invokeExact(riid, maxcache, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vsetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$4,"Vsetattr");
    }
    /**
     * {@snippet :
     * intn Vsetattr(int32 vgid, char* attrname, int32 datatype, int32 count, void* values);
     * }
     */
    public static int Vsetattr(int vgid, MemorySegment attrname, int datatype, int count, MemorySegment values) {
        var mh$ = Vsetattr$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrname, datatype, count, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vnattrs$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$5,"Vnattrs");
    }
    /**
     * {@snippet :
     * intn Vnattrs(int32 vgid);
     * }
     */
    public static int Vnattrs(int vgid) {
        var mh$ = Vnattrs$MH();
        try {
            return (int)mh$.invokeExact(vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vnattrs2$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$0,"Vnattrs2");
    }
    /**
     * {@snippet :
     * intn Vnattrs2(int32 vgid);
     * }
     */
    public static int Vnattrs2(int vgid) {
        var mh$ = Vnattrs2$MH();
        try {
            return (int)mh$.invokeExact(vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vnoldattrs$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$1,"Vnoldattrs");
    }
    /**
     * {@snippet :
     * intn Vnoldattrs(int32 vgid);
     * }
     */
    public static int Vnoldattrs(int vgid) {
        var mh$ = Vnoldattrs$MH();
        try {
            return (int)mh$.invokeExact(vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vfindattr$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$2,"Vfindattr");
    }
    /**
     * {@snippet :
     * intn Vfindattr(int32 vgid, char* attrname);
     * }
     */
    public static int Vfindattr(int vgid, MemorySegment attrname) {
        var mh$ = Vfindattr$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vattrinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$4,"Vattrinfo");
    }
    /**
     * {@snippet :
     * intn Vattrinfo(int32 vgid, intn attrindex, char* name, int32* datatype, int32* count, int32* size);
     * }
     */
    public static int Vattrinfo(int vgid, int attrindex, MemorySegment name, MemorySegment datatype, MemorySegment count, MemorySegment size) {
        var mh$ = Vattrinfo$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrindex, name, datatype, count, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vattrinfo2$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$6,"Vattrinfo2");
    }
    /**
     * {@snippet :
     * intn Vattrinfo2(int32 vgid, intn attrindex, char* name, int32* datatype, int32* count, int32* size, int32* nfields, uint16* refnum);
     * }
     */
    public static int Vattrinfo2(int vgid, int attrindex, MemorySegment name, MemorySegment datatype, MemorySegment count, MemorySegment size, MemorySegment nfields, MemorySegment refnum) {
        var mh$ = Vattrinfo2$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrindex, name, datatype, count, size, nfields, refnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$0,"Vgetattr");
    }
    /**
     * {@snippet :
     * intn Vgetattr(int32 vgid, intn attrindex, void* values);
     * }
     */
    public static int Vgetattr(int vgid, int attrindex, MemorySegment values) {
        var mh$ = Vgetattr$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrindex, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetattr2$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$1,"Vgetattr2");
    }
    /**
     * {@snippet :
     * intn Vgetattr2(int32 vgid, intn attrindex, void* values);
     * }
     */
    public static int Vgetattr2(int vgid, int attrindex, MemorySegment values) {
        var mh$ = Vgetattr2$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrindex, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetversion$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$2,"Vgetversion");
    }
    /**
     * {@snippet :
     * int32 Vgetversion(int32 vgid);
     * }
     */
    public static int Vgetversion(int vgid) {
        var mh$ = Vgetversion$MH();
        try {
            return (int)mh$.invokeExact(vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfindex$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$3,"VSfindex");
    }
    /**
     * {@snippet :
     * intn VSfindex(int32 vsid, char* fieldname, int32* fldindex);
     * }
     */
    public static int VSfindex(int vsid, MemorySegment fieldname, MemorySegment fldindex) {
        var mh$ = VSfindex$MH();
        try {
            return (int)mh$.invokeExact(vsid, fieldname, fldindex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$5,"VSsetattr");
    }
    /**
     * {@snippet :
     * intn VSsetattr(int32 vsid, int32 findex, char* attrname, int32 datatype, int32 count, void* values);
     * }
     */
    public static int VSsetattr(int vsid, int findex, MemorySegment attrname, int datatype, int count, MemorySegment values) {
        var mh$ = VSsetattr$MH();
        try {
            return (int)mh$.invokeExact(vsid, findex, attrname, datatype, count, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSnattrs$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$0,"VSnattrs");
    }
    /**
     * {@snippet :
     * intn VSnattrs(int32 vsid);
     * }
     */
    public static int VSnattrs(int vsid) {
        var mh$ = VSnattrs$MH();
        try {
            return (int)mh$.invokeExact(vsid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfnattrs$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$1,"VSfnattrs");
    }
    /**
     * {@snippet :
     * intn VSfnattrs(int32 vsid, int32 findex);
     * }
     */
    public static int VSfnattrs(int vsid, int findex) {
        var mh$ = VSfnattrs$MH();
        try {
            return (int)mh$.invokeExact(vsid, findex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfindattr$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$2,"VSfindattr");
    }
    /**
     * {@snippet :
     * intn VSfindattr(int32 vsid, int32 findex, char* attrname);
     * }
     */
    public static int VSfindattr(int vsid, int findex, MemorySegment attrname) {
        var mh$ = VSfindattr$MH();
        try {
            return (int)mh$.invokeExact(vsid, findex, attrname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSattrinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$4,"VSattrinfo");
    }
    /**
     * {@snippet :
     * intn VSattrinfo(int32 vsid, int32 findex, intn attrindex, char* name, int32* datatype, int32* count, int32* size);
     * }
     */
    public static int VSattrinfo(int vsid, int findex, int attrindex, MemorySegment name, MemorySegment datatype, MemorySegment count, MemorySegment size) {
        var mh$ = VSattrinfo$MH();
        try {
            return (int)mh$.invokeExact(vsid, findex, attrindex, name, datatype, count, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$6,"VSgetattr");
    }
    /**
     * {@snippet :
     * intn VSgetattr(int32 vsid, int32 findex, intn attrindex, void* values);
     * }
     */
    public static int VSgetattr(int vsid, int findex, int attrindex, MemorySegment values) {
        var mh$ = VSgetattr$MH();
        try {
            return (int)mh$.invokeExact(vsid, findex, attrindex, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSisattr$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$0,"VSisattr");
    }
    /**
     * {@snippet :
     * intn VSisattr(int32 vsid);
     * }
     */
    public static int VSisattr(int vsid) {
        var mh$ = VSisattr$MH();
        try {
            return (int)mh$.invokeExact(vsid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vicheckcompat$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$1,"vicheckcompat");
    }
    /**
     * {@snippet :
     * int32 vicheckcompat(HFILEID f);
     * }
     */
    public static int vicheckcompat(int f) {
        var mh$ = vicheckcompat$MH();
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vimakecompat$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$2,"vimakecompat");
    }
    /**
     * {@snippet :
     * int32 vimakecompat(HFILEID f);
     * }
     */
    public static int vimakecompat(int f) {
        var mh$ = vimakecompat$MH();
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vcheckcompat$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$3,"vcheckcompat");
    }
    /**
     * {@snippet :
     * int32 vcheckcompat(char* fs);
     * }
     */
    public static int vcheckcompat(MemorySegment fs) {
        var mh$ = vcheckcompat$MH();
        try {
            return (int)mh$.invokeExact(fs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vmakecompat$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$4,"vmakecompat");
    }
    /**
     * {@snippet :
     * int32 vmakecompat(char* fs);
     * }
     */
    public static int vmakecompat(MemorySegment fs) {
        var mh$ = vmakecompat$MH();
        try {
            return (int)mh$.invokeExact(fs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSelts$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$5,"VSelts");
    }
    /**
     * {@snippet :
     * int32 VSelts(int32 vkey);
     * }
     */
    public static int VSelts(int vkey) {
        var mh$ = VSelts$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetinterlace$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$0,"VSgetinterlace");
    }
    /**
     * {@snippet :
     * int32 VSgetinterlace(int32 vkey);
     * }
     */
    public static int VSgetinterlace(int vkey) {
        var mh$ = VSgetinterlace$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetinterlace$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$1,"VSsetinterlace");
    }
    /**
     * {@snippet :
     * intn VSsetinterlace(int32 vkey, int32 interlace);
     * }
     */
    public static int VSsetinterlace(int vkey, int interlace) {
        var mh$ = VSsetinterlace$MH();
        try {
            return (int)mh$.invokeExact(vkey, interlace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetfields$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$2,"VSgetfields");
    }
    /**
     * {@snippet :
     * int32 VSgetfields(int32 vkey, char* fields);
     * }
     */
    public static int VSgetfields(int vkey, MemorySegment fields) {
        var mh$ = VSgetfields$MH();
        try {
            return (int)mh$.invokeExact(vkey, fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfexist$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$3,"VSfexist");
    }
    /**
     * {@snippet :
     * intn VSfexist(int32 vkey, char* fields);
     * }
     */
    public static int VSfexist(int vkey, MemorySegment fields) {
        var mh$ = VSfexist$MH();
        try {
            return (int)mh$.invokeExact(vkey, fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsizeof$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$4,"VSsizeof");
    }
    /**
     * {@snippet :
     * int32 VSsizeof(int32 vkey, char* fields);
     * }
     */
    public static int VSsizeof(int vkey, MemorySegment fields) {
        var mh$ = VSsizeof$MH();
        try {
            return (int)mh$.invokeExact(vkey, fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSdump$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$5,"VSdump");
    }
    /**
     * {@snippet :
     * void VSdump(int32 vkey);
     * }
     */
    public static void VSdump(int vkey) {
        var mh$ = VSdump$MH();
        try {
            mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetname$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$0,"VSsetname");
    }
    /**
     * {@snippet :
     * int32 VSsetname(int32 vkey, char* vsname);
     * }
     */
    public static int VSsetname(int vkey, MemorySegment vsname) {
        var mh$ = VSsetname$MH();
        try {
            return (int)mh$.invokeExact(vkey, vsname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetclass$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$1,"VSsetclass");
    }
    /**
     * {@snippet :
     * int32 VSsetclass(int32 vkey, char* vsclass);
     * }
     */
    public static int VSsetclass(int vkey, MemorySegment vsclass) {
        var mh$ = VSsetclass$MH();
        try {
            return (int)mh$.invokeExact(vkey, vsclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetname$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$2,"VSgetname");
    }
    /**
     * {@snippet :
     * int32 VSgetname(int32 vkey, char* vsname);
     * }
     */
    public static int VSgetname(int vkey, MemorySegment vsname) {
        var mh$ = VSgetname$MH();
        try {
            return (int)mh$.invokeExact(vkey, vsname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetclass$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$3,"VSgetclass");
    }
    /**
     * {@snippet :
     * int32 VSgetclass(int32 vkey, char* vsclass);
     * }
     */
    public static int VSgetclass(int vkey, MemorySegment vsclass) {
        var mh$ = VSgetclass$MH();
        try {
            return (int)mh$.invokeExact(vkey, vsclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSinquire$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$4,"VSinquire");
    }
    /**
     * {@snippet :
     * intn VSinquire(int32 vkey, int32* nelt, int32* interlace, char* fields, int32* eltsize, char* vsname);
     * }
     */
    public static int VSinquire(int vkey, MemorySegment nelt, MemorySegment interlace, MemorySegment fields, MemorySegment eltsize, MemorySegment vsname) {
        var mh$ = VSinquire$MH();
        try {
            return (int)mh$.invokeExact(vkey, nelt, interlace, fields, eltsize, vsname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSisinternal$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$5,"VSisinternal");
    }
    /**
     * {@snippet :
     * intn VSisinternal(char* vsclass);
     * }
     */
    public static int VSisinternal(MemorySegment vsclass) {
        var mh$ = VSisinternal$MH();
        try {
            return (int)mh$.invokeExact(vsclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSlone$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$0,"VSlone");
    }
    /**
     * {@snippet :
     * int32 VSlone(HFILEID f, int32* idarray, int32 asize);
     * }
     */
    public static int VSlone(int f, MemorySegment idarray, int asize) {
        var mh$ = VSlone$MH();
        try {
            return (int)mh$.invokeExact(f, idarray, asize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vlone$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$1,"Vlone");
    }
    /**
     * {@snippet :
     * int32 Vlone(HFILEID f, int32* idarray, int32 asize);
     * }
     */
    public static int Vlone(int f, MemorySegment idarray, int asize) {
        var mh$ = Vlone$MH();
        try {
            return (int)mh$.invokeExact(f, idarray, asize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vfind$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$2,"Vfind");
    }
    /**
     * {@snippet :
     * int32 Vfind(HFILEID f, char* vgname);
     * }
     */
    public static int Vfind(int f, MemorySegment vgname) {
        var mh$ = Vfind$MH();
        try {
            return (int)mh$.invokeExact(f, vgname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfind$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$3,"VSfind");
    }
    /**
     * {@snippet :
     * int32 VSfind(HFILEID f, char* vsname);
     * }
     */
    public static int VSfind(int f, MemorySegment vsname) {
        var mh$ = VSfind$MH();
        try {
            return (int)mh$.invokeExact(f, vsname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vfindclass$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$4,"Vfindclass");
    }
    /**
     * {@snippet :
     * int32 Vfindclass(HFILEID f, char* vgclass);
     * }
     */
    public static int Vfindclass(int f, MemorySegment vgclass) {
        var mh$ = Vfindclass$MH();
        try {
            return (int)mh$.invokeExact(f, vgclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfindclass$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$5,"VSfindclass");
    }
    /**
     * {@snippet :
     * int32 VSfindclass(HFILEID f, char* vsclass);
     * }
     */
    public static int VSfindclass(int f, MemorySegment vsclass) {
        var mh$ = VSfindclass$MH();
        try {
            return (int)mh$.invokeExact(f, vsclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSofclass$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$0,"VSofclass");
    }
    /**
     * {@snippet :
     * intn VSofclass(int32 id, char* vsclass, uintn start_vd, uintn array_size, uint16* refarray);
     * }
     */
    public static int VSofclass(int id, MemorySegment vsclass, int start_vd, int array_size, MemorySegment refarray) {
        var mh$ = VSofclass$MH();
        try {
            return (int)mh$.invokeExact(id, vsclass, start_vd, array_size, refarray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetvdatas$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$1,"VSgetvdatas");
    }
    /**
     * {@snippet :
     * intn VSgetvdatas(int32 id, uintn start_vd, uintn array_size, uint16* refarray);
     * }
     */
    public static int VSgetvdatas(int id, int start_vd, int array_size, MemorySegment refarray) {
        var mh$ = VSgetvdatas$MH();
        try {
            return (int)mh$.invokeExact(id, start_vd, array_size, refarray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetblocksize$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$2,"VSsetblocksize");
    }
    /**
     * {@snippet :
     * intn VSsetblocksize(int32 vkey, int32 block_size);
     * }
     */
    public static int VSsetblocksize(int vkey, int block_size) {
        var mh$ = VSsetblocksize$MH();
        try {
            return (int)mh$.invokeExact(vkey, block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetnumblocks$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$3,"VSsetnumblocks");
    }
    /**
     * {@snippet :
     * intn VSsetnumblocks(int32 vkey, int32 num_blocks);
     * }
     */
    public static int VSsetnumblocks(int vkey, int num_blocks) {
        var mh$ = VSsetnumblocks$MH();
        try {
            return (int)mh$.invokeExact(vkey, num_blocks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetblockinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$4,"VSgetblockinfo");
    }
    /**
     * {@snippet :
     * intn VSgetblockinfo(int32 vkey, int32* block_size, int32* num_blocks);
     * }
     */
    public static int VSgetblockinfo(int vkey, MemorySegment block_size, MemorySegment num_blocks) {
        var mh$ = VSgetblockinfo$MH();
        try {
            return (int)mh$.invokeExact(vkey, block_size, num_blocks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vsetzap$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$5,"Vsetzap");
    }
    /**
     * {@snippet :
     * void Vsetzap();
     * }
     */
    public static void Vsetzap() {
        var mh$ = Vsetzap$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vcompare$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$0,"vcompare");
    }
    /**
     * {@snippet :
     * intn vcompare(void* k1, void* k2, intn cmparg);
     * }
     */
    public static int vcompare(MemorySegment k1, MemorySegment k2, int cmparg) {
        var mh$ = vcompare$MH();
        try {
            return (int)mh$.invokeExact(k1, k2, cmparg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vcompareref$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$1,"vcompareref");
    }
    /**
     * {@snippet :
     * intn vcompareref(void* k1, void* k2, intn cmparg);
     * }
     */
    public static int vcompareref(MemorySegment k1, MemorySegment k2, int cmparg) {
        var mh$ = vcompareref$MH();
        try {
            return (int)mh$.invokeExact(k1, k2, cmparg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdestroynode$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$2,"vdestroynode");
    }
    /**
     * {@snippet :
     * void vdestroynode(void* n);
     * }
     */
    public static void vdestroynode(MemorySegment n) {
        var mh$ = vdestroynode$MH();
        try {
            mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vtfreekey$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$3,"vtfreekey");
    }
    /**
     * {@snippet :
     * void vtfreekey(void* k);
     * }
     */
    public static void vtfreekey(MemorySegment k) {
        var mh$ = vtfreekey$MH();
        try {
            mh$.invokeExact(k);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vinitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$4,"Vinitialize");
    }
    /**
     * {@snippet :
     * intn Vinitialize(HFILEID f);
     * }
     */
    public static int Vinitialize(int f) {
        var mh$ = Vinitialize$MH();
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vfinish$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$5,"Vfinish");
    }
    /**
     * {@snippet :
     * intn Vfinish(HFILEID f);
     * }
     */
    public static int Vfinish(int f) {
        var mh$ = Vfinish$MH();
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vopen$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$0,"Vopen");
    }
    /**
     * {@snippet :
     * HFILEID Vopen(char* path, intn acc_mode, int16 ndds);
     * }
     */
    public static int Vopen(MemorySegment path, int acc_mode, short ndds) {
        var mh$ = Vopen$MH();
        try {
            return (int)mh$.invokeExact(path, acc_mode, ndds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vclose$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$1,"Vclose");
    }
    /**
     * {@snippet :
     * intn Vclose(HFILEID f);
     * }
     */
    public static int Vclose(int f) {
        var mh$ = Vclose$MH();
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vexistvg$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$2,"vexistvg");
    }
    /**
     * {@snippet :
     * int32 vexistvg(HFILEID f, uint16 vgid);
     * }
     */
    public static int vexistvg(int f, short vgid) {
        var mh$ = vexistvg$MH();
        try {
            return (int)mh$.invokeExact(f, vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vattach$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$3,"Vattach");
    }
    /**
     * {@snippet :
     * int32 Vattach(HFILEID f, int32 vgid, char* accesstype);
     * }
     */
    public static int Vattach(int f, int vgid, MemorySegment accesstype) {
        var mh$ = Vattach$MH();
        try {
            return (int)mh$.invokeExact(f, vgid, accesstype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vdetach$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$4,"Vdetach");
    }
    /**
     * {@snippet :
     * int32 Vdetach(int32 vkey);
     * }
     */
    public static int Vdetach(int vkey) {
        var mh$ = Vdetach$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vinsert$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$5,"Vinsert");
    }
    /**
     * {@snippet :
     * int32 Vinsert(int32 vkey, int32 vskey);
     * }
     */
    public static int Vinsert(int vkey, int vskey) {
        var mh$ = Vinsert$MH();
        try {
            return (int)mh$.invokeExact(vkey, vskey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vflocate$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$0,"Vflocate");
    }
    /**
     * {@snippet :
     * int32 Vflocate(int32 vkey, char* field);
     * }
     */
    public static int Vflocate(int vkey, MemorySegment field) {
        var mh$ = Vflocate$MH();
        try {
            return (int)mh$.invokeExact(vkey, field);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vinqtagref$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$1,"Vinqtagref");
    }
    /**
     * {@snippet :
     * intn Vinqtagref(int32 vkey, int32 tag, int32 ref);
     * }
     */
    public static int Vinqtagref(int vkey, int tag, int ref) {
        var mh$ = Vinqtagref$MH();
        try {
            return (int)mh$.invokeExact(vkey, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vntagrefs$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$2,"Vntagrefs");
    }
    /**
     * {@snippet :
     * int32 Vntagrefs(int32 vkey);
     * }
     */
    public static int Vntagrefs(int vkey) {
        var mh$ = Vntagrefs$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vnrefs$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$3,"Vnrefs");
    }
    /**
     * {@snippet :
     * int32 Vnrefs(int32 vkey, int32 tag);
     * }
     */
    public static int Vnrefs(int vkey, int tag) {
        var mh$ = Vnrefs$MH();
        try {
            return (int)mh$.invokeExact(vkey, tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgettagrefs$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$4,"Vgettagrefs");
    }
    /**
     * {@snippet :
     * int32 Vgettagrefs(int32 vkey, int32 tagarray[], int32 refarray[], int32 n);
     * }
     */
    public static int Vgettagrefs(int vkey, MemorySegment tagarray, MemorySegment refarray, int n) {
        var mh$ = Vgettagrefs$MH();
        try {
            return (int)mh$.invokeExact(vkey, tagarray, refarray, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetuservgs$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$5,"Vgetuservgs");
    }
    /**
     * {@snippet :
     * int32 Vgetuservgs(int32 id, int32 start_ref, int32 n_vgs, int32* refarray);
     * }
     */
    public static int Vgetuservgs(int id, int start_ref, int n_vgs, MemorySegment refarray) {
        var mh$ = Vgetuservgs$MH();
        try {
            return (int)mh$.invokeExact(id, start_ref, n_vgs, refarray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgettagref$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$0,"Vgettagref");
    }
    /**
     * {@snippet :
     * intn Vgettagref(int32 vkey, int32 which, int32* tag, int32* ref);
     * }
     */
    public static int Vgettagref(int vkey, int which, MemorySegment tag, MemorySegment ref) {
        var mh$ = Vgettagref$MH();
        try {
            return (int)mh$.invokeExact(vkey, which, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VQueryref$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$1,"VQueryref");
    }
    /**
     * {@snippet :
     * int32 VQueryref(int32 vkey);
     * }
     */
    public static int VQueryref(int vkey) {
        var mh$ = VQueryref$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VQuerytag$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$2,"VQuerytag");
    }
    /**
     * {@snippet :
     * int32 VQuerytag(int32 vkey);
     * }
     */
    public static int VQuerytag(int vkey) {
        var mh$ = VQuerytag$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vaddtagref$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$3,"Vaddtagref");
    }
    /**
     * {@snippet :
     * int32 Vaddtagref(int32 vkey, int32 tag, int32 ref);
     * }
     */
    public static int Vaddtagref(int vkey, int tag, int ref) {
        var mh$ = Vaddtagref$MH();
        try {
            return (int)mh$.invokeExact(vkey, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ventries$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$4,"Ventries");
    }
    /**
     * {@snippet :
     * int32 Ventries(HFILEID f, int32 vgid);
     * }
     */
    public static int Ventries(int f, int vgid) {
        var mh$ = Ventries$MH();
        try {
            return (int)mh$.invokeExact(f, vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vsetname$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$5,"Vsetname");
    }
    /**
     * {@snippet :
     * int32 Vsetname(int32 vkey, char* vgname);
     * }
     */
    public static int Vsetname(int vkey, MemorySegment vgname) {
        var mh$ = Vsetname$MH();
        try {
            return (int)mh$.invokeExact(vkey, vgname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vsetclass$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$0,"Vsetclass");
    }
    /**
     * {@snippet :
     * int32 Vsetclass(int32 vkey, char* vgclass);
     * }
     */
    public static int Vsetclass(int vkey, MemorySegment vgclass) {
        var mh$ = Vsetclass$MH();
        try {
            return (int)mh$.invokeExact(vkey, vgclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Visvg$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$1,"Visvg");
    }
    /**
     * {@snippet :
     * intn Visvg(int32 vkey, int32 id);
     * }
     */
    public static int Visvg(int vkey, int id) {
        var mh$ = Visvg$MH();
        try {
            return (int)mh$.invokeExact(vkey, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Visvs$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$2,"Visvs");
    }
    /**
     * {@snippet :
     * intn Visvs(int32 vkey, int32 id);
     * }
     */
    public static int Visvs(int vkey, int id) {
        var mh$ = Visvs$MH();
        try {
            return (int)mh$.invokeExact(vkey, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetid$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$3,"Vgetid");
    }
    /**
     * {@snippet :
     * int32 Vgetid(HFILEID f, int32 vgid);
     * }
     */
    public static int Vgetid(int f, int vgid) {
        var mh$ = Vgetid$MH();
        try {
            return (int)mh$.invokeExact(f, vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetnext$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$4,"Vgetnext");
    }
    /**
     * {@snippet :
     * int32 Vgetnext(int32 vkey, int32 id);
     * }
     */
    public static int Vgetnext(int vkey, int id) {
        var mh$ = Vgetnext$MH();
        try {
            return (int)mh$.invokeExact(vkey, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetname$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$5,"Vgetname");
    }
    /**
     * {@snippet :
     * int32 Vgetname(int32 vkey, char* vgname);
     * }
     */
    public static int Vgetname(int vkey, MemorySegment vgname) {
        var mh$ = Vgetname$MH();
        try {
            return (int)mh$.invokeExact(vkey, vgname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetnamelen$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$0,"Vgetnamelen");
    }
    /**
     * {@snippet :
     * int32 Vgetnamelen(int32 vkey, uint16* name_len);
     * }
     */
    public static int Vgetnamelen(int vkey, MemorySegment name_len) {
        var mh$ = Vgetnamelen$MH();
        try {
            return (int)mh$.invokeExact(vkey, name_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetclassnamelen$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$1,"Vgetclassnamelen");
    }
    /**
     * {@snippet :
     * int32 Vgetclassnamelen(int32 vkey, uint16* classname_len);
     * }
     */
    public static int Vgetclassnamelen(int vkey, MemorySegment classname_len) {
        var mh$ = Vgetclassnamelen$MH();
        try {
            return (int)mh$.invokeExact(vkey, classname_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetclass$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$2,"Vgetclass");
    }
    /**
     * {@snippet :
     * int32 Vgetclass(int32 vkey, char* vgclass);
     * }
     */
    public static int Vgetclass(int vkey, MemorySegment vgclass) {
        var mh$ = Vgetclass$MH();
        try {
            return (int)mh$.invokeExact(vkey, vgclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vinquire$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$3,"Vinquire");
    }
    /**
     * {@snippet :
     * intn Vinquire(int32 vkey, int32* nentries, char* vgname);
     * }
     */
    public static int Vinquire(int vkey, MemorySegment nentries, MemorySegment vgname) {
        var mh$ = Vinquire$MH();
        try {
            return (int)mh$.invokeExact(vkey, nentries, vgname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vdelete$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$4,"Vdelete");
    }
    /**
     * {@snippet :
     * int32 Vdelete(int32 f, int32 ref);
     * }
     */
    public static int Vdelete(int f, int ref) {
        var mh$ = Vdelete$MH();
        try {
            return (int)mh$.invokeExact(f, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgisinternal$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$5,"Vgisinternal");
    }
    /**
     * {@snippet :
     * intn Vgisinternal(int32 vkey);
     * }
     */
    public static int Vgisinternal(int vkey) {
        var mh$ = Vgisinternal$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Visinternal$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$0,"Visinternal");
    }
    /**
     * {@snippet :
     * intn Visinternal(char* classname);
     * }
     */
    public static int Visinternal(MemorySegment classname) {
        var mh$ = Visinternal$MH();
        try {
            return (int)mh$.invokeExact(classname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetvgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$1,"Vgetvgroups");
    }
    /**
     * {@snippet :
     * intn Vgetvgroups(int32 id, uintn start_vg, uintn n_vgs, uint16* refarray);
     * }
     */
    public static int Vgetvgroups(int id, int start_vg, int n_vgs, MemorySegment refarray) {
        var mh$ = Vgetvgroups$MH();
        try {
            return (int)mh$.invokeExact(id, start_vg, n_vgs, refarray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vdeletetagref$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$2,"Vdeletetagref");
    }
    /**
     * {@snippet :
     * intn Vdeletetagref(int32 vkey, int32 tag, int32 ref);
     * }
     */
    public static int Vdeletetagref(int vkey, int tag, int ref) {
        var mh$ = Vdeletetagref$MH();
        try {
            return (int)mh$.invokeExact(vkey, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VPshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$3,"VPshutdown");
    }
    /**
     * {@snippet :
     * intn VPshutdown();
     * }
     */
    public static int VPshutdown() {
        var mh$ = VPshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanattrs$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$4,"scanattrs");
    }
    /**
     * {@snippet :
     * int32 scanattrs(char* attrs, int32* attrc, char*** attrv);
     * }
     */
    public static int scanattrs(MemorySegment attrs, MemorySegment attrc, MemorySegment attrv) {
        var mh$ = scanattrs$MH();
        try {
            return (int)mh$.invokeExact(attrs, attrc, attrv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VHstoredata$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$6,"VHstoredata");
    }
    /**
     * {@snippet :
     * int32 VHstoredata(HFILEID f, char* field, const uint8* buf, int32 n, int32 datatype, char* vsname, char* vsclass);
     * }
     */
    public static int VHstoredata(int f, MemorySegment field, MemorySegment buf, int n, int datatype, MemorySegment vsname, MemorySegment vsclass) {
        var mh$ = VHstoredata$MH();
        try {
            return (int)mh$.invokeExact(f, field, buf, n, datatype, vsname, vsclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VHstoredatam$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$1,"VHstoredatam");
    }
    /**
     * {@snippet :
     * int32 VHstoredatam(HFILEID f, char* field, const uint8* buf, int32 n, int32 datatype, char* vsname, char* vsclass, int32 order);
     * }
     */
    public static int VHstoredatam(int f, MemorySegment field, MemorySegment buf, int n, int datatype, MemorySegment vsname, MemorySegment vsclass, int order) {
        var mh$ = VHstoredatam$MH();
        try {
            return (int)mh$.invokeExact(f, field, buf, n, datatype, vsname, vsclass, order);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VHmakegroup$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$3,"VHmakegroup");
    }
    /**
     * {@snippet :
     * int32 VHmakegroup(HFILEID f, int32 tagarray[], int32 refarray[], int32 n, char* vgname, char* vgclass);
     * }
     */
    public static int VHmakegroup(int f, MemorySegment tagarray, MemorySegment refarray, int n, MemorySegment vgname, MemorySegment vgclass) {
        var mh$ = VHmakegroup$MH();
        try {
            return (int)mh$.invokeExact(f, tagarray, refarray, n, vgname, vgclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSPhshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$4,"VSPhshutdown");
    }
    /**
     * {@snippet :
     * intn VSPhshutdown();
     * }
     */
    public static int VSPhshutdown() {
        var mh$ = VSPhshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vexistvs$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$5,"vexistvs");
    }
    /**
     * {@snippet :
     * int32 vexistvs(HFILEID f, uint16 vsref);
     * }
     */
    public static int vexistvs(int f, short vsref) {
        var mh$ = vexistvs$MH();
        try {
            return (int)mh$.invokeExact(f, vsref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsdestroynode$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$0,"vsdestroynode");
    }
    /**
     * {@snippet :
     * void vsdestroynode(void* n);
     * }
     */
    public static void vsdestroynode(MemorySegment n) {
        var mh$ = vsdestroynode$MH();
        try {
            mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfdestroynode$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$1,"vfdestroynode");
    }
    /**
     * {@snippet :
     * void vfdestroynode(void* n);
     * }
     */
    public static void vfdestroynode(MemorySegment n) {
        var mh$ = vfdestroynode$MH();
        try {
            mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSattach$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$2,"VSattach");
    }
    /**
     * {@snippet :
     * int32 VSattach(HFILEID f, int32 vsref, char* accesstype);
     * }
     */
    public static int VSattach(int f, int vsref, MemorySegment accesstype) {
        var mh$ = VSattach$MH();
        try {
            return (int)mh$.invokeExact(f, vsref, accesstype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSdetach$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$3,"VSdetach");
    }
    /**
     * {@snippet :
     * int32 VSdetach(int32 vkey);
     * }
     */
    public static int VSdetach(int vkey) {
        var mh$ = VSdetach$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSQuerytag$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$4,"VSQuerytag");
    }
    /**
     * {@snippet :
     * int32 VSQuerytag(int32 vkey);
     * }
     */
    public static int VSQuerytag(int vkey) {
        var mh$ = VSQuerytag$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSQueryref$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$5,"VSQueryref");
    }
    /**
     * {@snippet :
     * int32 VSQueryref(int32 vkey);
     * }
     */
    public static int VSQueryref(int vkey) {
        var mh$ = VSQueryref$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetid$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$0,"VSgetid");
    }
    /**
     * {@snippet :
     * int32 VSgetid(HFILEID f, int32 vsref);
     * }
     */
    public static int VSgetid(int f, int vsref) {
        var mh$ = VSgetid$MH();
        try {
            return (int)mh$.invokeExact(f, vsref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetversion$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$1,"VSgetversion");
    }
    /**
     * {@snippet :
     * int32 VSgetversion(int32 vkey);
     * }
     */
    public static int VSgetversion(int vkey) {
        var mh$ = VSgetversion$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSdelete$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$2,"VSdelete");
    }
    /**
     * {@snippet :
     * int32 VSdelete(int32 f, int32 ref);
     * }
     */
    public static int VSdelete(int f, int ref) {
        var mh$ = VSdelete$MH();
        try {
            return (int)mh$.invokeExact(f, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSappendable$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$3,"VSappendable");
    }
    /**
     * {@snippet :
     * int32 VSappendable(int32 vkey, int32 blk);
     * }
     */
    public static int VSappendable(int vkey, int blk) {
        var mh$ = VSappendable$MH();
        try {
            return (int)mh$.invokeExact(vkey, blk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetfields$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$4,"VSsetfields");
    }
    /**
     * {@snippet :
     * intn VSsetfields(int32 vkey, char* fields);
     * }
     */
    public static int VSsetfields(int vkey, MemorySegment fields) {
        var mh$ = VSsetfields$MH();
        try {
            return (int)mh$.invokeExact(vkey, fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfdefine$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$5,"VSfdefine");
    }
    /**
     * {@snippet :
     * intn VSfdefine(int32 vkey, char* field, int32 localtype, int32 order);
     * }
     */
    public static int VSfdefine(int vkey, MemorySegment field, int localtype, int order) {
        var mh$ = VSfdefine$MH();
        try {
            return (int)mh$.invokeExact(vkey, field, localtype, order);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VFnfields$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$0,"VFnfields");
    }
    /**
     * {@snippet :
     * int32 VFnfields(int32 vkey);
     * }
     */
    public static int VFnfields(int vkey) {
        var mh$ = VFnfields$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VFfieldname$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$2,"VFfieldname");
    }
    /**
     * {@snippet :
     * char* VFfieldname(int32 vkey, int32 idx);
     * }
     */
    public static MemorySegment VFfieldname(int vkey, int idx) {
        var mh$ = VFfieldname$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vkey, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VFfieldtype$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$3,"VFfieldtype");
    }
    /**
     * {@snippet :
     * int32 VFfieldtype(int32 vkey, int32 idx);
     * }
     */
    public static int VFfieldtype(int vkey, int idx) {
        var mh$ = VFfieldtype$MH();
        try {
            return (int)mh$.invokeExact(vkey, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VFfieldisize$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$4,"VFfieldisize");
    }
    /**
     * {@snippet :
     * int32 VFfieldisize(int32 vkey, int32 idx);
     * }
     */
    public static int VFfieldisize(int vkey, int idx) {
        var mh$ = VFfieldisize$MH();
        try {
            return (int)mh$.invokeExact(vkey, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VFfieldesize$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$5,"VFfieldesize");
    }
    /**
     * {@snippet :
     * int32 VFfieldesize(int32 vkey, int32 idx);
     * }
     */
    public static int VFfieldesize(int vkey, int idx) {
        var mh$ = VFfieldesize$MH();
        try {
            return (int)mh$.invokeExact(vkey, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VFfieldorder$MH() {
        return RuntimeHelper.requireNonNull(constants$211.const$0,"VFfieldorder");
    }
    /**
     * {@snippet :
     * int32 VFfieldorder(int32 vkey, int32 idx);
     * }
     */
    public static int VFfieldorder(int vkey, int idx) {
        var mh$ = VFfieldorder$MH();
        try {
            return (int)mh$.invokeExact(vkey, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetexternalfile$MH() {
        return RuntimeHelper.requireNonNull(constants$211.const$1,"VSsetexternalfile");
    }
    /**
     * {@snippet :
     * intn VSsetexternalfile(int32 vkey, char* filename, int32 offset);
     * }
     */
    public static int VSsetexternalfile(int vkey, MemorySegment filename, int offset) {
        var mh$ = VSsetexternalfile$MH();
        try {
            return (int)mh$.invokeExact(vkey, filename, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetexternalfile$MH() {
        return RuntimeHelper.requireNonNull(constants$211.const$2,"VSgetexternalfile");
    }
    /**
     * {@snippet :
     * intn VSgetexternalfile(int32 vkey, uintn name_len, char* filename, int32* offset);
     * }
     */
    public static int VSgetexternalfile(int vkey, int name_len, MemorySegment filename, MemorySegment offset) {
        var mh$ = VSgetexternalfile$MH();
        try {
            return (int)mh$.invokeExact(vkey, name_len, filename, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetexternalinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$211.const$3,"VSgetexternalinfo");
    }
    /**
     * {@snippet :
     * intn VSgetexternalinfo(int32 vkey, uintn name_len, char* filename, int32* offset, int32* length);
     * }
     */
    public static int VSgetexternalinfo(int vkey, int name_len, MemorySegment filename, MemorySegment offset, MemorySegment length) {
        var mh$ = VSgetexternalinfo$MH();
        try {
            return (int)mh$.invokeExact(vkey, name_len, filename, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfpack$MH() {
        return RuntimeHelper.requireNonNull(constants$211.const$5,"VSfpack");
    }
    /**
     * {@snippet :
     * intn VSfpack(int32 vsid, intn packtype, char* fields_in_buf, void* buf, intn bufsz, intn n_records, char* fields, void* fldbufpt[]);
     * }
     */
    public static int VSfpack(int vsid, int packtype, MemorySegment fields_in_buf, MemorySegment buf, int bufsz, int n_records, MemorySegment fields, MemorySegment fldbufpt) {
        var mh$ = VSfpack$MH();
        try {
            return (int)mh$.invokeExact(vsid, packtype, fields_in_buf, buf, bufsz, n_records, fields, fldbufpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSPshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$212.const$0,"VSPshutdown");
    }
    /**
     * {@snippet :
     * intn VSPshutdown();
     * }
     */
    public static int VSPshutdown() {
        var mh$ = VSPshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSseek$MH() {
        return RuntimeHelper.requireNonNull(constants$212.const$1,"VSseek");
    }
    /**
     * {@snippet :
     * int32 VSseek(int32 vkey, int32 eltpos);
     * }
     */
    public static int VSseek(int vkey, int eltpos) {
        var mh$ = VSseek$MH();
        try {
            return (int)mh$.invokeExact(vkey, eltpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSread$MH() {
        return RuntimeHelper.requireNonNull(constants$212.const$2,"VSread");
    }
    /**
     * {@snippet :
     * int32 VSread(int32 vkey, uint8 buf[], int32 nelt, int32 interlace);
     * }
     */
    public static int VSread(int vkey, MemorySegment buf, int nelt, int interlace) {
        var mh$ = VSread$MH();
        try {
            return (int)mh$.invokeExact(vkey, buf, nelt, interlace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$212.const$3,"VSwrite");
    }
    /**
     * {@snippet :
     * int32 VSwrite(int32 vkey, const uint8 buf[], int32 nelt, int32 interlace);
     * }
     */
    public static int VSwrite(int vkey, MemorySegment buf, int nelt, int interlace) {
        var mh$ = VSwrite$MH();
        try {
            return (int)mh$.invokeExact(vkey, buf, nelt, interlace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANgetdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$213.const$3,"ANgetdatainfo");
    }
    /**
     * {@snippet :
     * intn ANgetdatainfo(int32 ann_id, int32* offset, int32* length);
     * }
     */
    public static int ANgetdatainfo(int ann_id, MemorySegment offset, MemorySegment length) {
        var mh$ = ANgetdatainfo$MH();
        try {
            return (int)mh$.invokeExact(ann_id, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDgetdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$213.const$5,"HDgetdatainfo");
    }
    /**
     * {@snippet :
     * intn HDgetdatainfo(int32 file_id, uint16 data_tag, uint16 data_ref, int32* chk_coord, uintn start_block, uintn info_count, int32* offsetarray, int32* lengtharray);
     * }
     */
    public static int HDgetdatainfo(int file_id, short data_tag, short data_ref, MemorySegment chk_coord, int start_block, int info_count, MemorySegment offsetarray, MemorySegment lengtharray) {
        var mh$ = HDgetdatainfo$MH();
        try {
            return (int)mh$.invokeExact(file_id, data_tag, data_ref, chk_coord, start_block, info_count, offsetarray, lengtharray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$214.const$0,"VSgetdatainfo");
    }
    /**
     * {@snippet :
     * intn VSgetdatainfo(int32 vsid, uintn start_block, uintn info_count, int32* offsetarray, int32* lengtharray);
     * }
     */
    public static int VSgetdatainfo(int vsid, int start_block, int info_count, MemorySegment offsetarray, MemorySegment lengtharray) {
        var mh$ = VSgetdatainfo$MH();
        try {
            return (int)mh$.invokeExact(vsid, start_block, info_count, offsetarray, lengtharray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetattdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$214.const$1,"VSgetattdatainfo");
    }
    /**
     * {@snippet :
     * intn VSgetattdatainfo(int32 vsid, int32 findex, intn attrindex, int32* offset, int32* length);
     * }
     */
    public static int VSgetattdatainfo(int vsid, int findex, int attrindex, MemorySegment offset, MemorySegment length) {
        var mh$ = VSgetattdatainfo$MH();
        try {
            return (int)mh$.invokeExact(vsid, findex, attrindex, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetattdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$214.const$2,"Vgetattdatainfo");
    }
    /**
     * {@snippet :
     * intn Vgetattdatainfo(int32 vgid, intn attrindex, int32* offset, int32* length);
     * }
     */
    public static int Vgetattdatainfo(int vgid, int attrindex, MemorySegment offset, MemorySegment length) {
        var mh$ = Vgetattdatainfo$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrindex, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$214.const$3,"GRgetdatainfo");
    }
    /**
     * {@snippet :
     * intn GRgetdatainfo(int32 riid, uintn start_block, uintn info_count, int32* offsetarray, int32* lengtharray);
     * }
     */
    public static int GRgetdatainfo(int riid, int start_block, int info_count, MemorySegment offsetarray, MemorySegment lengtharray) {
        var mh$ = GRgetdatainfo$MH();
        try {
            return (int)mh$.invokeExact(riid, start_block, info_count, offsetarray, lengtharray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetattdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$214.const$4,"GRgetattdatainfo");
    }
    /**
     * {@snippet :
     * intn GRgetattdatainfo(int32 id, int32 attrindex, int32* offset, int32* length);
     * }
     */
    public static int GRgetattdatainfo(int id, int attrindex, MemorySegment offset, MemorySegment length) {
        var mh$ = GRgetattdatainfo$MH();
        try {
            return (int)mh$.invokeExact(id, attrindex, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetpalinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$214.const$5,"GRgetpalinfo");
    }
    /**
     * {@snippet :
     * intn GRgetpalinfo(int32 gr_id, uintn pal_count, hdf_ddinfo_t* palinfo_array);
     * }
     */
    public static int GRgetpalinfo(int gr_id, int pal_count, MemorySegment palinfo_array) {
        var mh$ = GRgetpalinfo$MH();
        try {
            return (int)mh$.invokeExact(gr_id, pal_count, palinfo_array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef short gr_interlace_t;
     * }
     */
    public static final OfShort gr_interlace_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int nc_type;
     * }
     */
    public static final OfInt nc_type = JAVA_INT;
    /**
     * {@snippet :
     * typedef int nclong;
     * }
     */
    public static final OfInt nclong = JAVA_INT;
    public static MemoryLayout sd_ncerr$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle sd_ncerr$VH() {
        return constants$86.const$3;
    }
    public static MemorySegment sd_ncerr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$215.const$0,"sd_ncerr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int sd_ncerr;
     * }
     */
    public static int sd_ncerr$get() {
        return (int) constants$86.const$3.get(RuntimeHelper.requireNonNull(constants$215.const$0, "sd_ncerr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int sd_ncerr;
     * }
     */
    public static void sd_ncerr$set(int x) {
        constants$86.const$3.set(RuntimeHelper.requireNonNull(constants$215.const$0, "sd_ncerr"), x);
    }
    public static MemoryLayout sd_ncopts$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle sd_ncopts$VH() {
        return constants$86.const$3;
    }
    public static MemorySegment sd_ncopts$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$215.const$1,"sd_ncopts");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int sd_ncopts;
     * }
     */
    public static int sd_ncopts$get() {
        return (int) constants$86.const$3.get(RuntimeHelper.requireNonNull(constants$215.const$1, "sd_ncopts"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int sd_ncopts;
     * }
     */
    public static void sd_ncopts$set(int x) {
        constants$86.const$3.set(RuntimeHelper.requireNonNull(constants$215.const$1, "sd_ncopts"), x);
    }
    public static MethodHandle sd_nccreate$MH() {
        return RuntimeHelper.requireNonNull(constants$215.const$2,"sd_nccreate");
    }
    /**
     * {@snippet :
     * int sd_nccreate(char* path, int cmode);
     * }
     */
    public static int sd_nccreate(MemorySegment path, int cmode) {
        var mh$ = sd_nccreate$MH();
        try {
            return (int)mh$.invokeExact(path, cmode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncopen$MH() {
        return RuntimeHelper.requireNonNull(constants$215.const$3,"sd_ncopen");
    }
    /**
     * {@snippet :
     * int sd_ncopen(char* path, int mode);
     * }
     */
    public static int sd_ncopen(MemorySegment path, int mode) {
        var mh$ = sd_ncopen$MH();
        try {
            return (int)mh$.invokeExact(path, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncredef$MH() {
        return RuntimeHelper.requireNonNull(constants$215.const$4,"sd_ncredef");
    }
    /**
     * {@snippet :
     * int sd_ncredef(int cdfid);
     * }
     */
    public static int sd_ncredef(int cdfid) {
        var mh$ = sd_ncredef$MH();
        try {
            return (int)mh$.invokeExact(cdfid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncendef$MH() {
        return RuntimeHelper.requireNonNull(constants$215.const$5,"sd_ncendef");
    }
    /**
     * {@snippet :
     * int sd_ncendef(int cdfid);
     * }
     */
    public static int sd_ncendef(int cdfid) {
        var mh$ = sd_ncendef$MH();
        try {
            return (int)mh$.invokeExact(cdfid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncclose$MH() {
        return RuntimeHelper.requireNonNull(constants$216.const$0,"sd_ncclose");
    }
    /**
     * {@snippet :
     * int sd_ncclose(int cdfid);
     * }
     */
    public static int sd_ncclose(int cdfid) {
        var mh$ = sd_ncclose$MH();
        try {
            return (int)mh$.invokeExact(cdfid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncinquire$MH() {
        return RuntimeHelper.requireNonNull(constants$216.const$1,"sd_ncinquire");
    }
    /**
     * {@snippet :
     * int sd_ncinquire(int cdfid, int* ndims, int* nvars, int* natts, int* recdim);
     * }
     */
    public static int sd_ncinquire(int cdfid, MemorySegment ndims, MemorySegment nvars, MemorySegment natts, MemorySegment recdim) {
        var mh$ = sd_ncinquire$MH();
        try {
            return (int)mh$.invokeExact(cdfid, ndims, nvars, natts, recdim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncsync$MH() {
        return RuntimeHelper.requireNonNull(constants$216.const$2,"sd_ncsync");
    }
    /**
     * {@snippet :
     * int sd_ncsync(int cdfid);
     * }
     */
    public static int sd_ncsync(int cdfid) {
        var mh$ = sd_ncsync$MH();
        try {
            return (int)mh$.invokeExact(cdfid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncabort$MH() {
        return RuntimeHelper.requireNonNull(constants$216.const$3,"sd_ncabort");
    }
    /**
     * {@snippet :
     * int sd_ncabort(int cdfid);
     * }
     */
    public static int sd_ncabort(int cdfid) {
        var mh$ = sd_ncabort$MH();
        try {
            return (int)mh$.invokeExact(cdfid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncnobuf$MH() {
        return RuntimeHelper.requireNonNull(constants$216.const$4,"sd_ncnobuf");
    }
    /**
     * {@snippet :
     * int sd_ncnobuf(int cdfid);
     * }
     */
    public static int sd_ncnobuf(int cdfid) {
        var mh$ = sd_ncnobuf$MH();
        try {
            return (int)mh$.invokeExact(cdfid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncdimdef$MH() {
        return RuntimeHelper.requireNonNull(constants$216.const$5,"sd_ncdimdef");
    }
    /**
     * {@snippet :
     * int sd_ncdimdef(int cdfid, char* name, long length);
     * }
     */
    public static int sd_ncdimdef(int cdfid, MemorySegment name, long length) {
        var mh$ = sd_ncdimdef$MH();
        try {
            return (int)mh$.invokeExact(cdfid, name, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncdimid$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$0,"sd_ncdimid");
    }
    /**
     * {@snippet :
     * int sd_ncdimid(int cdfid, char* name);
     * }
     */
    public static int sd_ncdimid(int cdfid, MemorySegment name) {
        var mh$ = sd_ncdimid$MH();
        try {
            return (int)mh$.invokeExact(cdfid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncdiminq$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$1,"sd_ncdiminq");
    }
    /**
     * {@snippet :
     * int sd_ncdiminq(int cdfid, int dimid, char* name, long* length);
     * }
     */
    public static int sd_ncdiminq(int cdfid, int dimid, MemorySegment name, MemorySegment length) {
        var mh$ = sd_ncdiminq$MH();
        try {
            return (int)mh$.invokeExact(cdfid, dimid, name, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncdimrename$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$2,"sd_ncdimrename");
    }
    /**
     * {@snippet :
     * int sd_ncdimrename(int cdfid, int dimid, char* name);
     * }
     */
    public static int sd_ncdimrename(int cdfid, int dimid, MemorySegment name) {
        var mh$ = sd_ncdimrename$MH();
        try {
            return (int)mh$.invokeExact(cdfid, dimid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvardef$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$3,"sd_ncvardef");
    }
    /**
     * {@snippet :
     * int sd_ncvardef(int cdfid, char* name, nc_type datatype, int ndims, int* dim);
     * }
     */
    public static int sd_ncvardef(int cdfid, MemorySegment name, int datatype, int ndims, MemorySegment dim) {
        var mh$ = sd_ncvardef$MH();
        try {
            return (int)mh$.invokeExact(cdfid, name, datatype, ndims, dim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarid$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$4,"sd_ncvarid");
    }
    /**
     * {@snippet :
     * int sd_ncvarid(int cdfid, char* name);
     * }
     */
    public static int sd_ncvarid(int cdfid, MemorySegment name) {
        var mh$ = sd_ncvarid$MH();
        try {
            return (int)mh$.invokeExact(cdfid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarinq$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$6,"sd_ncvarinq");
    }
    /**
     * {@snippet :
     * int sd_ncvarinq(int cdfid, int varid, char* name, nc_type* datatype, int* ndims, int* dim, int* natts);
     * }
     */
    public static int sd_ncvarinq(int cdfid, int varid, MemorySegment name, MemorySegment datatype, MemorySegment ndims, MemorySegment dim, MemorySegment natts) {
        var mh$ = sd_ncvarinq$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name, datatype, ndims, dim, natts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarput1$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$0,"sd_ncvarput1");
    }
    /**
     * {@snippet :
     * int sd_ncvarput1(int cdfid, int varid, long* coords, void* value);
     * }
     */
    public static int sd_ncvarput1(int cdfid, int varid, MemorySegment coords, MemorySegment value) {
        var mh$ = sd_ncvarput1$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, coords, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarget1$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$1,"sd_ncvarget1");
    }
    /**
     * {@snippet :
     * int sd_ncvarget1(int cdfid, int varid, long* coords, void* value);
     * }
     */
    public static int sd_ncvarget1(int cdfid, int varid, MemorySegment coords, MemorySegment value) {
        var mh$ = sd_ncvarget1$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, coords, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarput$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$2,"sd_ncvarput");
    }
    /**
     * {@snippet :
     * int sd_ncvarput(int cdfid, int varid, long* start, long* count, void* value);
     * }
     */
    public static int sd_ncvarput(int cdfid, int varid, MemorySegment start, MemorySegment count, MemorySegment value) {
        var mh$ = sd_ncvarput$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, start, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarget$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$3,"sd_ncvarget");
    }
    /**
     * {@snippet :
     * int sd_ncvarget(int cdfid, int varid, long* start, long* count, void* value);
     * }
     */
    public static int sd_ncvarget(int cdfid, int varid, MemorySegment start, MemorySegment count, MemorySegment value) {
        var mh$ = sd_ncvarget$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, start, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarputs$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$4,"sd_ncvarputs");
    }
    /**
     * {@snippet :
     * int sd_ncvarputs(int cdfid, int varid, long* start, long* count, long* stride, void* values);
     * }
     */
    public static int sd_ncvarputs(int cdfid, int varid, MemorySegment start, MemorySegment count, MemorySegment stride, MemorySegment values) {
        var mh$ = sd_ncvarputs$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, start, count, stride, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvargets$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$5,"sd_ncvargets");
    }
    /**
     * {@snippet :
     * int sd_ncvargets(int cdfid, int varid, long* start, long* count, long* stride, void* values);
     * }
     */
    public static int sd_ncvargets(int cdfid, int varid, MemorySegment start, MemorySegment count, MemorySegment stride, MemorySegment values) {
        var mh$ = sd_ncvargets$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, start, count, stride, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarputg$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$0,"sd_ncvarputg");
    }
    /**
     * {@snippet :
     * int sd_ncvarputg(int cdfid, int varid, long* start, long* count, long* stride, long* imap, void* values);
     * }
     */
    public static int sd_ncvarputg(int cdfid, int varid, MemorySegment start, MemorySegment count, MemorySegment stride, MemorySegment imap, MemorySegment values) {
        var mh$ = sd_ncvarputg$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, start, count, stride, imap, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvargetg$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$1,"sd_ncvargetg");
    }
    /**
     * {@snippet :
     * int sd_ncvargetg(int cdfid, int varid, long* start, long* count, long* stride, long* imap, void* values);
     * }
     */
    public static int sd_ncvargetg(int cdfid, int varid, MemorySegment start, MemorySegment count, MemorySegment stride, MemorySegment imap, MemorySegment values) {
        var mh$ = sd_ncvargetg$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, start, count, stride, imap, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarrename$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$2,"sd_ncvarrename");
    }
    /**
     * {@snippet :
     * int sd_ncvarrename(int cdfid, int varid, char* name);
     * }
     */
    public static int sd_ncvarrename(int cdfid, int varid, MemorySegment name) {
        var mh$ = sd_ncvarrename$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattput$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$3,"sd_ncattput");
    }
    /**
     * {@snippet :
     * int sd_ncattput(int cdfid, int varid, char* name, nc_type datatype, int len, void* value);
     * }
     */
    public static int sd_ncattput(int cdfid, int varid, MemorySegment name, int datatype, int len, MemorySegment value) {
        var mh$ = sd_ncattput$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name, datatype, len, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattinq$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$4,"sd_ncattinq");
    }
    /**
     * {@snippet :
     * int sd_ncattinq(int cdfid, int varid, char* name, nc_type* datatype, int* len);
     * }
     */
    public static int sd_ncattinq(int cdfid, int varid, MemorySegment name, MemorySegment datatype, MemorySegment len) {
        var mh$ = sd_ncattinq$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name, datatype, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattget$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$5,"sd_ncattget");
    }
    /**
     * {@snippet :
     * int sd_ncattget(int cdfid, int varid, char* name, void* value);
     * }
     */
    public static int sd_ncattget(int cdfid, int varid, MemorySegment name, MemorySegment value) {
        var mh$ = sd_ncattget$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$220.const$1,"sd_ncattcopy");
    }
    /**
     * {@snippet :
     * int sd_ncattcopy(int incdf, int invar, char* name, int outcdf, int outvar);
     * }
     */
    public static int sd_ncattcopy(int incdf, int invar, MemorySegment name, int outcdf, int outvar) {
        var mh$ = sd_ncattcopy$MH();
        try {
            return (int)mh$.invokeExact(incdf, invar, name, outcdf, outvar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattname$MH() {
        return RuntimeHelper.requireNonNull(constants$220.const$2,"sd_ncattname");
    }
    /**
     * {@snippet :
     * int sd_ncattname(int cdfid, int varid, int attnum, char* name);
     * }
     */
    public static int sd_ncattname(int cdfid, int varid, int attnum, MemorySegment name) {
        var mh$ = sd_ncattname$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, attnum, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattrename$MH() {
        return RuntimeHelper.requireNonNull(constants$220.const$3,"sd_ncattrename");
    }
    /**
     * {@snippet :
     * int sd_ncattrename(int cdfid, int varid, char* name, char* newname);
     * }
     */
    public static int sd_ncattrename(int cdfid, int varid, MemorySegment name, MemorySegment newname) {
        var mh$ = sd_ncattrename$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name, newname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattdel$MH() {
        return RuntimeHelper.requireNonNull(constants$220.const$4,"sd_ncattdel");
    }
    /**
     * {@snippet :
     * int sd_ncattdel(int cdfid, int varid, char* name);
     * }
     */
    public static int sd_ncattdel(int cdfid, int varid, MemorySegment name) {
        var mh$ = sd_ncattdel$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_nctypelen$MH() {
        return RuntimeHelper.requireNonNull(constants$220.const$5,"sd_nctypelen");
    }
    /**
     * {@snippet :
     * int sd_nctypelen(nc_type datatype);
     * }
     */
    public static int sd_nctypelen(int datatype) {
        var mh$ = sd_nctypelen$MH();
        try {
            return (int)mh$.invokeExact(datatype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncsetfill$MH() {
        return RuntimeHelper.requireNonNull(constants$221.const$0,"sd_ncsetfill");
    }
    /**
     * {@snippet :
     * int sd_ncsetfill(int cdfid, int fillmode);
     * }
     */
    public static int sd_ncsetfill(int cdfid, int fillmode) {
        var mh$ = sd_ncsetfill$MH();
        try {
            return (int)mh$.invokeExact(cdfid, fillmode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncrecinq$MH() {
        return RuntimeHelper.requireNonNull(constants$221.const$1,"sd_ncrecinq");
    }
    /**
     * {@snippet :
     * int sd_ncrecinq(int cdfid, int* nrecvars, int* recvarids, long* recsizes);
     * }
     */
    public static int sd_ncrecinq(int cdfid, MemorySegment nrecvars, MemorySegment recvarids, MemorySegment recsizes) {
        var mh$ = sd_ncrecinq$MH();
        try {
            return (int)mh$.invokeExact(cdfid, nrecvars, recvarids, recsizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncrecget$MH() {
        return RuntimeHelper.requireNonNull(constants$221.const$3,"sd_ncrecget");
    }
    /**
     * {@snippet :
     * int sd_ncrecget(int cdfid, long recnum, void** datap);
     * }
     */
    public static int sd_ncrecget(int cdfid, long recnum, MemorySegment datap) {
        var mh$ = sd_ncrecget$MH();
        try {
            return (int)mh$.invokeExact(cdfid, recnum, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncrecput$MH() {
        return RuntimeHelper.requireNonNull(constants$221.const$4,"sd_ncrecput");
    }
    /**
     * {@snippet :
     * int sd_ncrecput(int cdfid, long recnum, void** datap);
     * }
     */
    public static int sd_ncrecput(int cdfid, long recnum, MemorySegment datap) {
        var mh$ = sd_ncrecput$MH();
        try {
            return (int)mh$.invokeExact(cdfid, recnum, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .IS_SDSVAR = 0;
     * }
     */
    public static int IS_SDSVAR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .IS_CRDVAR = 1;
     * }
     */
    public static int IS_CRDVAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .UNKNOWN = 2;
     * }
     */
    public static int UNKNOWN() {
        return (int)2L;
    }
    public static MethodHandle SDgetdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$221.const$5,"SDgetdatainfo");
    }
    /**
     * {@snippet :
     * intn SDgetdatainfo(int32 sdsid, int32* chk_coord, uintn start_block, uintn info_count, int32* offsetarray, int32* lengtharray);
     * }
     */
    public static int SDgetdatainfo(int sdsid, MemorySegment chk_coord, int start_block, int info_count, MemorySegment offsetarray, MemorySegment lengtharray) {
        var mh$ = SDgetdatainfo$MH();
        try {
            return (int)mh$.invokeExact(sdsid, chk_coord, start_block, info_count, offsetarray, lengtharray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetattdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$222.const$0,"SDgetattdatainfo");
    }
    /**
     * {@snippet :
     * intn SDgetattdatainfo(int32 id, int32 attrindex, int32* offset, int32* length);
     * }
     */
    public static int SDgetattdatainfo(int id, int attrindex, MemorySegment offset, MemorySegment length) {
        var mh$ = SDgetattdatainfo$MH();
        try {
            return (int)mh$.invokeExact(id, attrindex, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetoldattdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$222.const$1,"SDgetoldattdatainfo");
    }
    /**
     * {@snippet :
     * intn SDgetoldattdatainfo(int32 dimid, int32 sdsid, char* attr_name, int32* offset, int32* length);
     * }
     */
    public static int SDgetoldattdatainfo(int dimid, int sdsid, MemorySegment attr_name, MemorySegment offset, MemorySegment length) {
        var mh$ = SDgetoldattdatainfo$MH();
        try {
            return (int)mh$.invokeExact(dimid, sdsid, attr_name, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetanndatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$222.const$2,"SDgetanndatainfo");
    }
    /**
     * {@snippet :
     * intn SDgetanndatainfo(int32 sdsid, ann_type annot_type, uintn size, int32* offsetarray, int32* lengtharray);
     * }
     */
    public static int SDgetanndatainfo(int sdsid, int annot_type, int size, MemorySegment offsetarray, MemorySegment lengtharray) {
        var mh$ = SDgetanndatainfo$MH();
        try {
            return (int)mh$.invokeExact(sdsid, annot_type, size, offsetarray, lengtharray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .NOT_SDAPI_ID = -1;
     * }
     */
    public static int NOT_SDAPI_ID() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .SD_ID = 0;
     * }
     */
    public static int SD_ID() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SDS_ID = 1;
     * }
     */
    public static int SDS_ID() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .DIM_ID = 2;
     * }
     */
    public static int DIM_ID() {
        return (int)2L;
    }
    public static MethodHandle SDstart$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$0,"SDstart");
    }
    /**
     * {@snippet :
     * int32 SDstart(char* name, int32 accs);
     * }
     */
    public static int SDstart(MemorySegment name, int accs) {
        var mh$ = SDstart$MH();
        try {
            return (int)mh$.invokeExact(name, accs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDend$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$1,"SDend");
    }
    /**
     * {@snippet :
     * intn SDend(int32 fid);
     * }
     */
    public static int SDend(int fid) {
        var mh$ = SDend$MH();
        try {
            return (int)mh$.invokeExact(fid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDfileinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$2,"SDfileinfo");
    }
    /**
     * {@snippet :
     * intn SDfileinfo(int32 fid, int32* datasets, int32* attrs);
     * }
     */
    public static int SDfileinfo(int fid, MemorySegment datasets, MemorySegment attrs) {
        var mh$ = SDfileinfo$MH();
        try {
            return (int)mh$.invokeExact(fid, datasets, attrs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDselect$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$3,"SDselect");
    }
    /**
     * {@snippet :
     * int32 SDselect(int32 fid, int32 idx);
     * }
     */
    public static int SDselect(int fid, int idx) {
        var mh$ = SDselect$MH();
        try {
            return (int)mh$.invokeExact(fid, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$4,"SDgetinfo");
    }
    /**
     * {@snippet :
     * intn SDgetinfo(int32 sdsid, char* name, int32* rank, int32* dimsizes, int32* nt, int32* nattr);
     * }
     */
    public static int SDgetinfo(int sdsid, MemorySegment name, MemorySegment rank, MemorySegment dimsizes, MemorySegment nt, MemorySegment nattr) {
        var mh$ = SDgetinfo$MH();
        try {
            return (int)mh$.invokeExact(sdsid, name, rank, dimsizes, nt, nattr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDreaddata$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$5,"SDreaddata");
    }
    /**
     * {@snippet :
     * intn SDreaddata(int32 sdsid, int32* start, int32* stride, int32* end, void* data);
     * }
     */
    public static int SDreaddata(int sdsid, MemorySegment start, MemorySegment stride, MemorySegment end, MemorySegment data) {
        var mh$ = SDreaddata$MH();
        try {
            return (int)mh$.invokeExact(sdsid, start, stride, end, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgerefnumber$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$0,"SDgerefnumber");
    }
    /**
     * {@snippet :
     * uint16 SDgerefnumber(int32 sdsid);
     * }
     */
    public static short SDgerefnumber(int sdsid) {
        var mh$ = SDgerefnumber$MH();
        try {
            return (short)mh$.invokeExact(sdsid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDnametoindex$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$1,"SDnametoindex");
    }
    /**
     * {@snippet :
     * int32 SDnametoindex(int32 fid, char* name);
     * }
     */
    public static int SDnametoindex(int fid, MemorySegment name) {
        var mh$ = SDnametoindex$MH();
        try {
            return (int)mh$.invokeExact(fid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDnametoindices$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$2,"SDnametoindices");
    }
    /**
     * {@snippet :
     * intn SDnametoindices(int32 fid, char* name, hdf_varlist_t* var_list);
     * }
     */
    public static int SDnametoindices(int fid, MemorySegment name, MemorySegment var_list) {
        var mh$ = SDnametoindices$MH();
        try {
            return (int)mh$.invokeExact(fid, name, var_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetnumvars_byname$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$3,"SDgetnumvars_byname");
    }
    /**
     * {@snippet :
     * intn SDgetnumvars_byname(int32 fid, char* name, int32* n_vars);
     * }
     */
    public static int SDgetnumvars_byname(int fid, MemorySegment name, MemorySegment n_vars) {
        var mh$ = SDgetnumvars_byname$MH();
        try {
            return (int)mh$.invokeExact(fid, name, n_vars);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetrange$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$4,"SDgetrange");
    }
    /**
     * {@snippet :
     * intn SDgetrange(int32 sdsid, void* pmax, void* pmin);
     * }
     */
    public static int SDgetrange(int sdsid, MemorySegment pmax, MemorySegment pmin) {
        var mh$ = SDgetrange$MH();
        try {
            return (int)mh$.invokeExact(sdsid, pmax, pmin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDcreate$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$5,"SDcreate");
    }
    /**
     * {@snippet :
     * int32 SDcreate(int32 fid, char* name, int32 nt, int32 rank, int32* dimsizes);
     * }
     */
    public static int SDcreate(int fid, MemorySegment name, int nt, int rank, MemorySegment dimsizes) {
        var mh$ = SDcreate$MH();
        try {
            return (int)mh$.invokeExact(fid, name, nt, rank, dimsizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetdimid$MH() {
        return RuntimeHelper.requireNonNull(constants$225.const$0,"SDgetdimid");
    }
    /**
     * {@snippet :
     * int32 SDgetdimid(int32 sdsid, intn number);
     * }
     */
    public static int SDgetdimid(int sdsid, int number) {
        var mh$ = SDgetdimid$MH();
        try {
            return (int)mh$.invokeExact(sdsid, number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetdimname$MH() {
        return RuntimeHelper.requireNonNull(constants$225.const$1,"SDsetdimname");
    }
    /**
     * {@snippet :
     * intn SDsetdimname(int32 id, char* name);
     * }
     */
    public static int SDsetdimname(int id, MemorySegment name) {
        var mh$ = SDsetdimname$MH();
        try {
            return (int)mh$.invokeExact(id, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDendaccess$MH() {
        return RuntimeHelper.requireNonNull(constants$225.const$2,"SDendaccess");
    }
    /**
     * {@snippet :
     * intn SDendaccess(int32 id);
     * }
     */
    public static int SDendaccess(int id) {
        var mh$ = SDendaccess$MH();
        try {
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetrange$MH() {
        return RuntimeHelper.requireNonNull(constants$225.const$3,"SDsetrange");
    }
    /**
     * {@snippet :
     * intn SDsetrange(int32 sdsid, void* pmax, void* pmin);
     * }
     */
    public static int SDsetrange(int sdsid, MemorySegment pmax, MemorySegment pmin) {
        var mh$ = SDsetrange$MH();
        try {
            return (int)mh$.invokeExact(sdsid, pmax, pmin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$225.const$4,"SDsetattr");
    }
    /**
     * {@snippet :
     * intn SDsetattr(int32 id, char* name, int32 nt, int32 count, void* data);
     * }
     */
    public static int SDsetattr(int id, MemorySegment name, int nt, int count, MemorySegment data) {
        var mh$ = SDsetattr$MH();
        try {
            return (int)mh$.invokeExact(id, name, nt, count, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDattrinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$225.const$5,"SDattrinfo");
    }
    /**
     * {@snippet :
     * intn SDattrinfo(int32 id, int32 idx, char* name, int32* nt, int32* count);
     * }
     */
    public static int SDattrinfo(int id, int idx, MemorySegment name, MemorySegment nt, MemorySegment count) {
        var mh$ = SDattrinfo$MH();
        try {
            return (int)mh$.invokeExact(id, idx, name, nt, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDreadattr$MH() {
        return RuntimeHelper.requireNonNull(constants$226.const$0,"SDreadattr");
    }
    /**
     * {@snippet :
     * intn SDreadattr(int32 id, int32 idx, void* buf);
     * }
     */
    public static int SDreadattr(int id, int idx, MemorySegment buf) {
        var mh$ = SDreadattr$MH();
        try {
            return (int)mh$.invokeExact(id, idx, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDwritedata$MH() {
        return RuntimeHelper.requireNonNull(constants$226.const$1,"SDwritedata");
    }
    /**
     * {@snippet :
     * intn SDwritedata(int32 sdsid, int32* start, int32* stride, int32* end, void* data);
     * }
     */
    public static int SDwritedata(int sdsid, MemorySegment start, MemorySegment stride, MemorySegment end, MemorySegment data) {
        var mh$ = SDwritedata$MH();
        try {
            return (int)mh$.invokeExact(sdsid, start, stride, end, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetdatastrs$MH() {
        return RuntimeHelper.requireNonNull(constants$226.const$2,"SDsetdatastrs");
    }
    /**
     * {@snippet :
     * intn SDsetdatastrs(int32 sdsid, char* l, char* u, char* f, char* c);
     * }
     */
    public static int SDsetdatastrs(int sdsid, MemorySegment l, MemorySegment u, MemorySegment f, MemorySegment c) {
        var mh$ = SDsetdatastrs$MH();
        try {
            return (int)mh$.invokeExact(sdsid, l, u, f, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetcal$MH() {
        return RuntimeHelper.requireNonNull(constants$226.const$4,"SDsetcal");
    }
    /**
     * {@snippet :
     * intn SDsetcal(int32 sdsid, float64 cal, float64 cale, float64 ioff, float64 ioffe, int32 nt);
     * }
     */
    public static int SDsetcal(int sdsid, double cal, double cale, double ioff, double ioffe, int nt) {
        var mh$ = SDsetcal$MH();
        try {
            return (int)mh$.invokeExact(sdsid, cal, cale, ioff, ioffe, nt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetfillvalue$MH() {
        return RuntimeHelper.requireNonNull(constants$226.const$5,"SDsetfillvalue");
    }
    /**
     * {@snippet :
     * intn SDsetfillvalue(int32 sdsid, void* val);
     * }
     */
    public static int SDsetfillvalue(int sdsid, MemorySegment val) {
        var mh$ = SDsetfillvalue$MH();
        try {
            return (int)mh$.invokeExact(sdsid, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetfillvalue$MH() {
        return RuntimeHelper.requireNonNull(constants$227.const$0,"SDgetfillvalue");
    }
    /**
     * {@snippet :
     * intn SDgetfillvalue(int32 sdsid, void* val);
     * }
     */
    public static int SDgetfillvalue(int sdsid, MemorySegment val) {
        var mh$ = SDgetfillvalue$MH();
        try {
            return (int)mh$.invokeExact(sdsid, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetfillmode$MH() {
        return RuntimeHelper.requireNonNull(constants$227.const$1,"SDsetfillmode");
    }
    /**
     * {@snippet :
     * intn SDsetfillmode(int32 id, intn fillmode);
     * }
     */
    public static int SDsetfillmode(int id, int fillmode) {
        var mh$ = SDsetfillmode$MH();
        try {
            return (int)mh$.invokeExact(id, fillmode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetdatastrs$MH() {
        return RuntimeHelper.requireNonNull(constants$227.const$3,"SDgetdatastrs");
    }
    /**
     * {@snippet :
     * intn SDgetdatastrs(int32 sdsid, char* l, char* u, char* f, char* c, intn len);
     * }
     */
    public static int SDgetdatastrs(int sdsid, MemorySegment l, MemorySegment u, MemorySegment f, MemorySegment c, int len) {
        var mh$ = SDgetdatastrs$MH();
        try {
            return (int)mh$.invokeExact(sdsid, l, u, f, c, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetcal$MH() {
        return RuntimeHelper.requireNonNull(constants$227.const$4,"SDgetcal");
    }
    /**
     * {@snippet :
     * intn SDgetcal(int32 sdsid, float64* cal, float64* cale, float64* ioff, float64* ioffe, int32* nt);
     * }
     */
    public static int SDgetcal(int sdsid, MemorySegment cal, MemorySegment cale, MemorySegment ioff, MemorySegment ioffe, MemorySegment nt) {
        var mh$ = SDgetcal$MH();
        try {
            return (int)mh$.invokeExact(sdsid, cal, cale, ioff, ioffe, nt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetdimstrs$MH() {
        return RuntimeHelper.requireNonNull(constants$227.const$5,"SDsetdimstrs");
    }
    /**
     * {@snippet :
     * intn SDsetdimstrs(int32 id, char* l, char* u, char* f);
     * }
     */
    public static int SDsetdimstrs(int id, MemorySegment l, MemorySegment u, MemorySegment f) {
        var mh$ = SDsetdimstrs$MH();
        try {
            return (int)mh$.invokeExact(id, l, u, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetdimscale$MH() {
        return RuntimeHelper.requireNonNull(constants$228.const$0,"SDsetdimscale");
    }
    /**
     * {@snippet :
     * intn SDsetdimscale(int32 id, int32 count, int32 nt, void* data);
     * }
     */
    public static int SDsetdimscale(int id, int count, int nt, MemorySegment data) {
        var mh$ = SDsetdimscale$MH();
        try {
            return (int)mh$.invokeExact(id, count, nt, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetdimscale$MH() {
        return RuntimeHelper.requireNonNull(constants$228.const$1,"SDgetdimscale");
    }
    /**
     * {@snippet :
     * intn SDgetdimscale(int32 id, void* data);
     * }
     */
    public static int SDgetdimscale(int id, MemorySegment data) {
        var mh$ = SDgetdimscale$MH();
        try {
            return (int)mh$.invokeExact(id, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDdiminfo$MH() {
        return RuntimeHelper.requireNonNull(constants$228.const$2,"SDdiminfo");
    }
    /**
     * {@snippet :
     * intn SDdiminfo(int32 id, char* name, int32* size, int32* nt, int32* nattr);
     * }
     */
    public static int SDdiminfo(int id, MemorySegment name, MemorySegment size, MemorySegment nt, MemorySegment nattr) {
        var mh$ = SDdiminfo$MH();
        try {
            return (int)mh$.invokeExact(id, name, size, nt, nattr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetdimstrs$MH() {
        return RuntimeHelper.requireNonNull(constants$228.const$4,"SDgetdimstrs");
    }
    /**
     * {@snippet :
     * intn SDgetdimstrs(int32 id, char* l, char* u, char* f, intn len);
     * }
     */
    public static int SDgetdimstrs(int id, MemorySegment l, MemorySegment u, MemorySegment f, int len) {
        var mh$ = SDgetdimstrs$MH();
        try {
            return (int)mh$.invokeExact(id, l, u, f, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetexternalfile$MH() {
        return RuntimeHelper.requireNonNull(constants$228.const$5,"SDgetexternalfile");
    }
    /**
     * {@snippet :
     * intn SDgetexternalfile(int32 id, intn buf_size, char* ext_filename, int32* offset);
     * }
     */
    public static int SDgetexternalfile(int id, int buf_size, MemorySegment ext_filename, MemorySegment offset) {
        var mh$ = SDgetexternalfile$MH();
        try {
            return (int)mh$.invokeExact(id, buf_size, ext_filename, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetexternalinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$229.const$0,"SDgetexternalinfo");
    }
    /**
     * {@snippet :
     * intn SDgetexternalinfo(int32 id, uintn buf_size, char* ext_filename, int32* offset, int32* length);
     * }
     */
    public static int SDgetexternalinfo(int id, int buf_size, MemorySegment ext_filename, MemorySegment offset, MemorySegment length) {
        var mh$ = SDgetexternalinfo$MH();
        try {
            return (int)mh$.invokeExact(id, buf_size, ext_filename, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetexternalfile$MH() {
        return RuntimeHelper.requireNonNull(constants$229.const$1,"SDsetexternalfile");
    }
    /**
     * {@snippet :
     * intn SDsetexternalfile(int32 id, char* filename, int32 offset);
     * }
     */
    public static int SDsetexternalfile(int id, MemorySegment filename, int offset) {
        var mh$ = SDsetexternalfile$MH();
        try {
            return (int)mh$.invokeExact(id, filename, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetnbitdataset$MH() {
        return RuntimeHelper.requireNonNull(constants$229.const$3,"SDsetnbitdataset");
    }
    /**
     * {@snippet :
     * intn SDsetnbitdataset(int32 id, intn start_bit, intn bit_len, intn sign_ext, intn fill_one);
     * }
     */
    public static int SDsetnbitdataset(int id, int start_bit, int bit_len, int sign_ext, int fill_one) {
        var mh$ = SDsetnbitdataset$MH();
        try {
            return (int)mh$.invokeExact(id, start_bit, bit_len, sign_ext, fill_one);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$229.const$4,"SDsetcompress");
    }
    /**
     * {@snippet :
     * intn SDsetcompress(int32 id, comp_coder_t type, comp_info* c_info);
     * }
     */
    public static int SDsetcompress(int id, int type, MemorySegment c_info) {
        var mh$ = SDsetcompress$MH();
        try {
            return (int)mh$.invokeExact(id, type, c_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$229.const$5,"SDgetcompress");
    }
    /**
     * {@snippet :
     * intn SDgetcompress(int32 id, comp_coder_t* type, comp_info* c_info);
     * }
     */
    public static int SDgetcompress(int id, MemorySegment type, MemorySegment c_info) {
        var mh$ = SDgetcompress$MH();
        try {
            return (int)mh$.invokeExact(id, type, c_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetcompinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$230.const$0,"SDgetcompinfo");
    }
    /**
     * {@snippet :
     * intn SDgetcompinfo(int32 id, comp_coder_t* type, comp_info* c_info);
     * }
     */
    public static int SDgetcompinfo(int id, MemorySegment type, MemorySegment c_info) {
        var mh$ = SDgetcompinfo$MH();
        try {
            return (int)mh$.invokeExact(id, type, c_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetcomptype$MH() {
        return RuntimeHelper.requireNonNull(constants$230.const$1,"SDgetcomptype");
    }
    /**
     * {@snippet :
     * intn SDgetcomptype(int32 id, comp_coder_t* type);
     * }
     */
    public static int SDgetcomptype(int id, MemorySegment type) {
        var mh$ = SDgetcomptype$MH();
        try {
            return (int)mh$.invokeExact(id, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDfindattr$MH() {
        return RuntimeHelper.requireNonNull(constants$230.const$2,"SDfindattr");
    }
    /**
     * {@snippet :
     * int32 SDfindattr(int32 id, char* attrname);
     * }
     */
    public static int SDfindattr(int id, MemorySegment attrname) {
        var mh$ = SDfindattr$MH();
        try {
            return (int)mh$.invokeExact(id, attrname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDidtoref$MH() {
        return RuntimeHelper.requireNonNull(constants$230.const$3,"SDidtoref");
    }
    /**
     * {@snippet :
     * int32 SDidtoref(int32 id);
     * }
     */
    public static int SDidtoref(int id) {
        var mh$ = SDidtoref$MH();
        try {
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDreftoindex$MH() {
        return RuntimeHelper.requireNonNull(constants$230.const$4,"SDreftoindex");
    }
    /**
     * {@snippet :
     * int32 SDreftoindex(int32 fid, int32 ref);
     * }
     */
    public static int SDreftoindex(int fid, int ref) {
        var mh$ = SDreftoindex$MH();
        try {
            return (int)mh$.invokeExact(fid, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDisrecord$MH() {
        return RuntimeHelper.requireNonNull(constants$230.const$5,"SDisrecord");
    }
    /**
     * {@snippet :
     * int32 SDisrecord(int32 id);
     * }
     */
    public static int SDisrecord(int id) {
        var mh$ = SDisrecord$MH();
        try {
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDiscoordvar$MH() {
        return RuntimeHelper.requireNonNull(constants$231.const$0,"SDiscoordvar");
    }
    /**
     * {@snippet :
     * intn SDiscoordvar(int32 id);
     * }
     */
    public static int SDiscoordvar(int id) {
        var mh$ = SDiscoordvar$MH();
        try {
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetaccesstype$MH() {
        return RuntimeHelper.requireNonNull(constants$231.const$1,"SDsetaccesstype");
    }
    /**
     * {@snippet :
     * intn SDsetaccesstype(int32 id, uintn accesstype);
     * }
     */
    public static int SDsetaccesstype(int id, int accesstype) {
        var mh$ = SDsetaccesstype$MH();
        try {
            return (int)mh$.invokeExact(id, accesstype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetblocksize$MH() {
        return RuntimeHelper.requireNonNull(constants$231.const$2,"SDsetblocksize");
    }
    /**
     * {@snippet :
     * intn SDsetblocksize(int32 sdsid, int32 block_size);
     * }
     */
    public static int SDsetblocksize(int sdsid, int block_size) {
        var mh$ = SDsetblocksize$MH();
        try {
            return (int)mh$.invokeExact(sdsid, block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetblocksize$MH() {
        return RuntimeHelper.requireNonNull(constants$231.const$3,"SDgetblocksize");
    }
    /**
     * {@snippet :
     * intn SDgetblocksize(int32 sdsid, int32* block_size);
     * }
     */
    public static int SDgetblocksize(int sdsid, MemorySegment block_size) {
        var mh$ = SDgetblocksize$MH();
        try {
            return (int)mh$.invokeExact(sdsid, block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetdimval_comp$MH() {
        return RuntimeHelper.requireNonNull(constants$231.const$4,"SDsetdimval_comp");
    }
    /**
     * {@snippet :
     * intn SDsetdimval_comp(int32 dimid, intn compt_mode);
     * }
     */
    public static int SDsetdimval_comp(int dimid, int compt_mode) {
        var mh$ = SDsetdimval_comp$MH();
        try {
            return (int)mh$.invokeExact(dimid, compt_mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDisdimval_bwcomp$MH() {
        return RuntimeHelper.requireNonNull(constants$231.const$5,"SDisdimval_bwcomp");
    }
    /**
     * {@snippet :
     * intn SDisdimval_bwcomp(int32 dimid);
     * }
     */
    public static int SDisdimval_bwcomp(int dimid) {
        var mh$ = SDisdimval_bwcomp$MH();
        try {
            return (int)mh$.invokeExact(dimid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDcheckempty$MH() {
        return RuntimeHelper.requireNonNull(constants$232.const$0,"SDcheckempty");
    }
    /**
     * {@snippet :
     * int32 SDcheckempty(int32 sdsid, intn* emptySDS);
     * }
     */
    public static int SDcheckempty(int sdsid, MemorySegment emptySDS) {
        var mh$ = SDcheckempty$MH();
        try {
            return (int)mh$.invokeExact(sdsid, emptySDS);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDidtype$MH() {
        return RuntimeHelper.requireNonNull(constants$232.const$1,"SDidtype");
    }
    /**
     * {@snippet :
     * hdf_idtype_t SDidtype(int32 an_id);
     * }
     */
    public static int SDidtype(int an_id) {
        var mh$ = SDidtype$MH();
        try {
            return (int)mh$.invokeExact(an_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDreset_maxopenfiles$MH() {
        return RuntimeHelper.requireNonNull(constants$232.const$2,"SDreset_maxopenfiles");
    }
    /**
     * {@snippet :
     * intn SDreset_maxopenfiles(intn req_max);
     * }
     */
    public static int SDreset_maxopenfiles(int req_max) {
        var mh$ = SDreset_maxopenfiles$MH();
        try {
            return (int)mh$.invokeExact(req_max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDget_maxopenfiles$MH() {
        return RuntimeHelper.requireNonNull(constants$232.const$3,"SDget_maxopenfiles");
    }
    /**
     * {@snippet :
     * intn SDget_maxopenfiles(intn* curr_max, intn* sys_limit);
     * }
     */
    public static int SDget_maxopenfiles(MemorySegment curr_max, MemorySegment sys_limit) {
        var mh$ = SDget_maxopenfiles$MH();
        try {
            return (int)mh$.invokeExact(curr_max, sys_limit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDget_numopenfiles$MH() {
        return RuntimeHelper.requireNonNull(constants$232.const$4,"SDget_numopenfiles");
    }
    /**
     * {@snippet :
     * intn SDget_numopenfiles();
     * }
     */
    public static int SDget_numopenfiles() {
        var mh$ = SDget_numopenfiles$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetdatasize$MH() {
        return RuntimeHelper.requireNonNull(constants$232.const$5,"SDgetdatasize");
    }
    /**
     * {@snippet :
     * intn SDgetdatasize(int32 sdsid, int32* comp_size, int32* uncomp_size);
     * }
     */
    public static int SDgetdatasize(int sdsid, MemorySegment comp_size, MemorySegment uncomp_size) {
        var mh$ = SDgetdatasize$MH();
        try {
            return (int)mh$.invokeExact(sdsid, comp_size, uncomp_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetfilename$MH() {
        return RuntimeHelper.requireNonNull(constants$233.const$0,"SDgetfilename");
    }
    /**
     * {@snippet :
     * intn SDgetfilename(int32 fid, char* filename);
     * }
     */
    public static int SDgetfilename(int fid, MemorySegment filename) {
        var mh$ = SDgetfilename$MH();
        try {
            return (int)mh$.invokeExact(fid, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetnamelen$MH() {
        return RuntimeHelper.requireNonNull(constants$233.const$1,"SDgetnamelen");
    }
    /**
     * {@snippet :
     * intn SDgetnamelen(int32 sdsid, uint16* name_len);
     * }
     */
    public static int SDgetnamelen(int sdsid, MemorySegment name_len) {
        var mh$ = SDgetnamelen$MH();
        try {
            return (int)mh$.invokeExact(sdsid, name_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetchunk$MH() {
        return RuntimeHelper.requireNonNull(constants$233.const$2,"SDsetchunk");
    }
    /**
     * {@snippet :
     * intn SDsetchunk(int32 sdsid, HDF_CHUNK_DEF chunk_def, int32 flags);
     * }
     */
    public static int SDsetchunk(int sdsid, MemorySegment chunk_def, int flags) {
        var mh$ = SDsetchunk$MH();
        try {
            return (int)mh$.invokeExact(sdsid, chunk_def, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetchunkinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$233.const$3,"SDgetchunkinfo");
    }
    /**
     * {@snippet :
     * intn SDgetchunkinfo(int32 sdsid, HDF_CHUNK_DEF* chunk_def, int32* flags);
     * }
     */
    public static int SDgetchunkinfo(int sdsid, MemorySegment chunk_def, MemorySegment flags) {
        var mh$ = SDgetchunkinfo$MH();
        try {
            return (int)mh$.invokeExact(sdsid, chunk_def, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDwritechunk$MH() {
        return RuntimeHelper.requireNonNull(constants$233.const$4,"SDwritechunk");
    }
    /**
     * {@snippet :
     * intn SDwritechunk(int32 sdsid, int32* origin, void* datap);
     * }
     */
    public static int SDwritechunk(int sdsid, MemorySegment origin, MemorySegment datap) {
        var mh$ = SDwritechunk$MH();
        try {
            return (int)mh$.invokeExact(sdsid, origin, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDreadchunk$MH() {
        return RuntimeHelper.requireNonNull(constants$233.const$5,"SDreadchunk");
    }
    /**
     * {@snippet :
     * intn SDreadchunk(int32 sdsid, int32* origin, void* datap);
     * }
     */
    public static int SDreadchunk(int sdsid, MemorySegment origin, MemorySegment datap) {
        var mh$ = SDreadchunk$MH();
        try {
            return (int)mh$.invokeExact(sdsid, origin, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetchunkcache$MH() {
        return RuntimeHelper.requireNonNull(constants$234.const$0,"SDsetchunkcache");
    }
    /**
     * {@snippet :
     * intn SDsetchunkcache(int32 sdsid, int32 maxcache, int32 flags);
     * }
     */
    public static int SDsetchunkcache(int sdsid, int maxcache, int flags) {
        var mh$ = SDsetchunkcache$MH();
        try {
            return (int)mh$.invokeExact(sdsid, maxcache, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define H4_LT_OBJDIR ".libs/"
     * }
     */
    public static MemorySegment H4_LT_OBJDIR() {
        return constants$234.const$1;
    }
    /**
     * {@snippet :
     * #define H4_PACKAGE "hdf"
     * }
     */
    public static MemorySegment H4_PACKAGE() {
        return constants$234.const$2;
    }
    /**
     * {@snippet :
     * #define H4_PACKAGE_BUGREPORT "help@hdfgroup.org"
     * }
     */
    public static MemorySegment H4_PACKAGE_BUGREPORT() {
        return constants$234.const$3;
    }
    /**
     * {@snippet :
     * #define H4_PACKAGE_NAME "HDF"
     * }
     */
    public static MemorySegment H4_PACKAGE_NAME() {
        return constants$234.const$4;
    }
    /**
     * {@snippet :
     * #define H4_PACKAGE_STRING "HDF 4.2.17-1"
     * }
     */
    public static MemorySegment H4_PACKAGE_STRING() {
        return constants$234.const$5;
    }
    /**
     * {@snippet :
     * #define H4_PACKAGE_TARNAME "hdf"
     * }
     */
    public static MemorySegment H4_PACKAGE_TARNAME() {
        return constants$234.const$2;
    }
    /**
     * {@snippet :
     * #define H4_PACKAGE_URL ""
     * }
     */
    public static MemorySegment H4_PACKAGE_URL() {
        return constants$235.const$0;
    }
    /**
     * {@snippet :
     * #define H4_PACKAGE_VERSION "4.2.17-1"
     * }
     */
    public static MemorySegment H4_PACKAGE_VERSION() {
        return constants$235.const$1;
    }
    /**
     * {@snippet :
     * #define H4_VERSION "4.2.17-1"
     * }
     */
    public static MemorySegment H4_VERSION() {
        return constants$235.const$1;
    }
    /**
     * {@snippet :
     * #define DF_MT 17473
     * }
     */
    public static int DF_MT() {
        return (int)17473L;
    }
    /**
     * {@snippet :
     * #define FILELIB 2
     * }
     */
    public static int FILELIB() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    /**
     * {@snippet :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define __PRI64_PREFIX "l"
     * }
     */
    public static MemorySegment __PRI64_PREFIX() {
        return constants$235.const$2;
    }
    /**
     * {@snippet :
     * #define __PRIPTR_PREFIX "l"
     * }
     */
    public static MemorySegment __PRIPTR_PREFIX() {
        return constants$235.const$2;
    }
    /**
     * {@snippet :
     * #define PRId8 "d"
     * }
     */
    public static MemorySegment PRId8() {
        return constants$235.const$3;
    }
    /**
     * {@snippet :
     * #define PRId16 "d"
     * }
     */
    public static MemorySegment PRId16() {
        return constants$235.const$3;
    }
    /**
     * {@snippet :
     * #define PRId32 "d"
     * }
     */
    public static MemorySegment PRId32() {
        return constants$235.const$3;
    }
    /**
     * {@snippet :
     * #define PRId64 "ld"
     * }
     */
    public static MemorySegment PRId64() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define PRIdLEAST8 "d"
     * }
     */
    public static MemorySegment PRIdLEAST8() {
        return constants$235.const$3;
    }
    /**
     * {@snippet :
     * #define PRIdLEAST16 "d"
     * }
     */
    public static MemorySegment PRIdLEAST16() {
        return constants$235.const$3;
    }
    /**
     * {@snippet :
     * #define PRIdLEAST32 "d"
     * }
     */
    public static MemorySegment PRIdLEAST32() {
        return constants$235.const$3;
    }
    /**
     * {@snippet :
     * #define PRIdLEAST64 "ld"
     * }
     */
    public static MemorySegment PRIdLEAST64() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define PRIdFAST8 "d"
     * }
     */
    public static MemorySegment PRIdFAST8() {
        return constants$235.const$3;
    }
    /**
     * {@snippet :
     * #define PRIdFAST16 "ld"
     * }
     */
    public static MemorySegment PRIdFAST16() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define PRIdFAST32 "ld"
     * }
     */
    public static MemorySegment PRIdFAST32() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define PRIdFAST64 "ld"
     * }
     */
    public static MemorySegment PRIdFAST64() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define PRIi8 "i"
     * }
     */
    public static MemorySegment PRIi8() {
        return constants$235.const$5;
    }
    /**
     * {@snippet :
     * #define PRIi16 "i"
     * }
     */
    public static MemorySegment PRIi16() {
        return constants$235.const$5;
    }
    /**
     * {@snippet :
     * #define PRIi32 "i"
     * }
     */
    public static MemorySegment PRIi32() {
        return constants$235.const$5;
    }
    /**
     * {@snippet :
     * #define PRIi64 "li"
     * }
     */
    public static MemorySegment PRIi64() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define PRIiLEAST8 "i"
     * }
     */
    public static MemorySegment PRIiLEAST8() {
        return constants$235.const$5;
    }
    /**
     * {@snippet :
     * #define PRIiLEAST16 "i"
     * }
     */
    public static MemorySegment PRIiLEAST16() {
        return constants$235.const$5;
    }
    /**
     * {@snippet :
     * #define PRIiLEAST32 "i"
     * }
     */
    public static MemorySegment PRIiLEAST32() {
        return constants$235.const$5;
    }
    /**
     * {@snippet :
     * #define PRIiLEAST64 "li"
     * }
     */
    public static MemorySegment PRIiLEAST64() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define PRIiFAST8 "i"
     * }
     */
    public static MemorySegment PRIiFAST8() {
        return constants$235.const$5;
    }
    /**
     * {@snippet :
     * #define PRIiFAST16 "li"
     * }
     */
    public static MemorySegment PRIiFAST16() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define PRIiFAST32 "li"
     * }
     */
    public static MemorySegment PRIiFAST32() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define PRIiFAST64 "li"
     * }
     */
    public static MemorySegment PRIiFAST64() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define PRIo8 "o"
     * }
     */
    public static MemorySegment PRIo8() {
        return constants$236.const$1;
    }
    /**
     * {@snippet :
     * #define PRIo16 "o"
     * }
     */
    public static MemorySegment PRIo16() {
        return constants$236.const$1;
    }
    /**
     * {@snippet :
     * #define PRIo32 "o"
     * }
     */
    public static MemorySegment PRIo32() {
        return constants$236.const$1;
    }
    /**
     * {@snippet :
     * #define PRIo64 "lo"
     * }
     */
    public static MemorySegment PRIo64() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define PRIoLEAST8 "o"
     * }
     */
    public static MemorySegment PRIoLEAST8() {
        return constants$236.const$1;
    }
    /**
     * {@snippet :
     * #define PRIoLEAST16 "o"
     * }
     */
    public static MemorySegment PRIoLEAST16() {
        return constants$236.const$1;
    }
    /**
     * {@snippet :
     * #define PRIoLEAST32 "o"
     * }
     */
    public static MemorySegment PRIoLEAST32() {
        return constants$236.const$1;
    }
    /**
     * {@snippet :
     * #define PRIoLEAST64 "lo"
     * }
     */
    public static MemorySegment PRIoLEAST64() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define PRIoFAST8 "o"
     * }
     */
    public static MemorySegment PRIoFAST8() {
        return constants$236.const$1;
    }
    /**
     * {@snippet :
     * #define PRIoFAST16 "lo"
     * }
     */
    public static MemorySegment PRIoFAST16() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define PRIoFAST32 "lo"
     * }
     */
    public static MemorySegment PRIoFAST32() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define PRIoFAST64 "lo"
     * }
     */
    public static MemorySegment PRIoFAST64() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define PRIu8 "u"
     * }
     */
    public static MemorySegment PRIu8() {
        return constants$236.const$3;
    }
    /**
     * {@snippet :
     * #define PRIu16 "u"
     * }
     */
    public static MemorySegment PRIu16() {
        return constants$236.const$3;
    }
    /**
     * {@snippet :
     * #define PRIu32 "u"
     * }
     */
    public static MemorySegment PRIu32() {
        return constants$236.const$3;
    }
    /**
     * {@snippet :
     * #define PRIu64 "lu"
     * }
     */
    public static MemorySegment PRIu64() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define PRIuLEAST8 "u"
     * }
     */
    public static MemorySegment PRIuLEAST8() {
        return constants$236.const$3;
    }
    /**
     * {@snippet :
     * #define PRIuLEAST16 "u"
     * }
     */
    public static MemorySegment PRIuLEAST16() {
        return constants$236.const$3;
    }
    /**
     * {@snippet :
     * #define PRIuLEAST32 "u"
     * }
     */
    public static MemorySegment PRIuLEAST32() {
        return constants$236.const$3;
    }
    /**
     * {@snippet :
     * #define PRIuLEAST64 "lu"
     * }
     */
    public static MemorySegment PRIuLEAST64() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define PRIuFAST8 "u"
     * }
     */
    public static MemorySegment PRIuFAST8() {
        return constants$236.const$3;
    }
    /**
     * {@snippet :
     * #define PRIuFAST16 "lu"
     * }
     */
    public static MemorySegment PRIuFAST16() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define PRIuFAST32 "lu"
     * }
     */
    public static MemorySegment PRIuFAST32() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define PRIuFAST64 "lu"
     * }
     */
    public static MemorySegment PRIuFAST64() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define PRIx8 "x"
     * }
     */
    public static MemorySegment PRIx8() {
        return constants$236.const$5;
    }
    /**
     * {@snippet :
     * #define PRIx16 "x"
     * }
     */
    public static MemorySegment PRIx16() {
        return constants$236.const$5;
    }
    /**
     * {@snippet :
     * #define PRIx32 "x"
     * }
     */
    public static MemorySegment PRIx32() {
        return constants$236.const$5;
    }
    /**
     * {@snippet :
     * #define PRIx64 "lx"
     * }
     */
    public static MemorySegment PRIx64() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define PRIxLEAST8 "x"
     * }
     */
    public static MemorySegment PRIxLEAST8() {
        return constants$236.const$5;
    }
    /**
     * {@snippet :
     * #define PRIxLEAST16 "x"
     * }
     */
    public static MemorySegment PRIxLEAST16() {
        return constants$236.const$5;
    }
    /**
     * {@snippet :
     * #define PRIxLEAST32 "x"
     * }
     */
    public static MemorySegment PRIxLEAST32() {
        return constants$236.const$5;
    }
    /**
     * {@snippet :
     * #define PRIxLEAST64 "lx"
     * }
     */
    public static MemorySegment PRIxLEAST64() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define PRIxFAST8 "x"
     * }
     */
    public static MemorySegment PRIxFAST8() {
        return constants$236.const$5;
    }
    /**
     * {@snippet :
     * #define PRIxFAST16 "lx"
     * }
     */
    public static MemorySegment PRIxFAST16() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define PRIxFAST32 "lx"
     * }
     */
    public static MemorySegment PRIxFAST32() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define PRIxFAST64 "lx"
     * }
     */
    public static MemorySegment PRIxFAST64() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define PRIX8 "X"
     * }
     */
    public static MemorySegment PRIX8() {
        return constants$237.const$1;
    }
    /**
     * {@snippet :
     * #define PRIX16 "X"
     * }
     */
    public static MemorySegment PRIX16() {
        return constants$237.const$1;
    }
    /**
     * {@snippet :
     * #define PRIX32 "X"
     * }
     */
    public static MemorySegment PRIX32() {
        return constants$237.const$1;
    }
    /**
     * {@snippet :
     * #define PRIX64 "lX"
     * }
     */
    public static MemorySegment PRIX64() {
        return constants$237.const$2;
    }
    /**
     * {@snippet :
     * #define PRIXLEAST8 "X"
     * }
     */
    public static MemorySegment PRIXLEAST8() {
        return constants$237.const$1;
    }
    /**
     * {@snippet :
     * #define PRIXLEAST16 "X"
     * }
     */
    public static MemorySegment PRIXLEAST16() {
        return constants$237.const$1;
    }
    /**
     * {@snippet :
     * #define PRIXLEAST32 "X"
     * }
     */
    public static MemorySegment PRIXLEAST32() {
        return constants$237.const$1;
    }
    /**
     * {@snippet :
     * #define PRIXLEAST64 "lX"
     * }
     */
    public static MemorySegment PRIXLEAST64() {
        return constants$237.const$2;
    }
    /**
     * {@snippet :
     * #define PRIXFAST8 "X"
     * }
     */
    public static MemorySegment PRIXFAST8() {
        return constants$237.const$1;
    }
    /**
     * {@snippet :
     * #define PRIXFAST16 "lX"
     * }
     */
    public static MemorySegment PRIXFAST16() {
        return constants$237.const$2;
    }
    /**
     * {@snippet :
     * #define PRIXFAST32 "lX"
     * }
     */
    public static MemorySegment PRIXFAST32() {
        return constants$237.const$2;
    }
    /**
     * {@snippet :
     * #define PRIXFAST64 "lX"
     * }
     */
    public static MemorySegment PRIXFAST64() {
        return constants$237.const$2;
    }
    /**
     * {@snippet :
     * #define PRIdMAX "ld"
     * }
     */
    public static MemorySegment PRIdMAX() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define PRIiMAX "li"
     * }
     */
    public static MemorySegment PRIiMAX() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define PRIoMAX "lo"
     * }
     */
    public static MemorySegment PRIoMAX() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define PRIuMAX "lu"
     * }
     */
    public static MemorySegment PRIuMAX() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define PRIxMAX "lx"
     * }
     */
    public static MemorySegment PRIxMAX() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define PRIXMAX "lX"
     * }
     */
    public static MemorySegment PRIXMAX() {
        return constants$237.const$2;
    }
    /**
     * {@snippet :
     * #define PRIdPTR "ld"
     * }
     */
    public static MemorySegment PRIdPTR() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define PRIiPTR "li"
     * }
     */
    public static MemorySegment PRIiPTR() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define PRIoPTR "lo"
     * }
     */
    public static MemorySegment PRIoPTR() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define PRIuPTR "lu"
     * }
     */
    public static MemorySegment PRIuPTR() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define PRIxPTR "lx"
     * }
     */
    public static MemorySegment PRIxPTR() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define PRIXPTR "lX"
     * }
     */
    public static MemorySegment PRIXPTR() {
        return constants$237.const$2;
    }
    /**
     * {@snippet :
     * #define SCNd8 "hhd"
     * }
     */
    public static MemorySegment SCNd8() {
        return constants$237.const$3;
    }
    /**
     * {@snippet :
     * #define SCNd16 "hd"
     * }
     */
    public static MemorySegment SCNd16() {
        return constants$237.const$4;
    }
    /**
     * {@snippet :
     * #define SCNd32 "d"
     * }
     */
    public static MemorySegment SCNd32() {
        return constants$235.const$3;
    }
    /**
     * {@snippet :
     * #define SCNd64 "ld"
     * }
     */
    public static MemorySegment SCNd64() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define SCNdLEAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdLEAST8() {
        return constants$237.const$3;
    }
    /**
     * {@snippet :
     * #define SCNdLEAST16 "hd"
     * }
     */
    public static MemorySegment SCNdLEAST16() {
        return constants$237.const$4;
    }
    /**
     * {@snippet :
     * #define SCNdLEAST32 "d"
     * }
     */
    public static MemorySegment SCNdLEAST32() {
        return constants$235.const$3;
    }
    /**
     * {@snippet :
     * #define SCNdLEAST64 "ld"
     * }
     */
    public static MemorySegment SCNdLEAST64() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define SCNdFAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdFAST8() {
        return constants$237.const$3;
    }
    /**
     * {@snippet :
     * #define SCNdFAST16 "ld"
     * }
     */
    public static MemorySegment SCNdFAST16() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define SCNdFAST32 "ld"
     * }
     */
    public static MemorySegment SCNdFAST32() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define SCNdFAST64 "ld"
     * }
     */
    public static MemorySegment SCNdFAST64() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define SCNi8 "hhi"
     * }
     */
    public static MemorySegment SCNi8() {
        return constants$237.const$5;
    }
    /**
     * {@snippet :
     * #define SCNi16 "hi"
     * }
     */
    public static MemorySegment SCNi16() {
        return constants$238.const$0;
    }
    /**
     * {@snippet :
     * #define SCNi32 "i"
     * }
     */
    public static MemorySegment SCNi32() {
        return constants$235.const$5;
    }
    /**
     * {@snippet :
     * #define SCNi64 "li"
     * }
     */
    public static MemorySegment SCNi64() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define SCNiLEAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiLEAST8() {
        return constants$237.const$5;
    }
    /**
     * {@snippet :
     * #define SCNiLEAST16 "hi"
     * }
     */
    public static MemorySegment SCNiLEAST16() {
        return constants$238.const$0;
    }
    /**
     * {@snippet :
     * #define SCNiLEAST32 "i"
     * }
     */
    public static MemorySegment SCNiLEAST32() {
        return constants$235.const$5;
    }
    /**
     * {@snippet :
     * #define SCNiLEAST64 "li"
     * }
     */
    public static MemorySegment SCNiLEAST64() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define SCNiFAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiFAST8() {
        return constants$237.const$5;
    }
    /**
     * {@snippet :
     * #define SCNiFAST16 "li"
     * }
     */
    public static MemorySegment SCNiFAST16() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define SCNiFAST32 "li"
     * }
     */
    public static MemorySegment SCNiFAST32() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define SCNiFAST64 "li"
     * }
     */
    public static MemorySegment SCNiFAST64() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define SCNu8 "hhu"
     * }
     */
    public static MemorySegment SCNu8() {
        return constants$238.const$1;
    }
    /**
     * {@snippet :
     * #define SCNu16 "hu"
     * }
     */
    public static MemorySegment SCNu16() {
        return constants$238.const$2;
    }
    /**
     * {@snippet :
     * #define SCNu32 "u"
     * }
     */
    public static MemorySegment SCNu32() {
        return constants$236.const$3;
    }
    /**
     * {@snippet :
     * #define SCNu64 "lu"
     * }
     */
    public static MemorySegment SCNu64() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define SCNuLEAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuLEAST8() {
        return constants$238.const$1;
    }
    /**
     * {@snippet :
     * #define SCNuLEAST16 "hu"
     * }
     */
    public static MemorySegment SCNuLEAST16() {
        return constants$238.const$2;
    }
    /**
     * {@snippet :
     * #define SCNuLEAST32 "u"
     * }
     */
    public static MemorySegment SCNuLEAST32() {
        return constants$236.const$3;
    }
    /**
     * {@snippet :
     * #define SCNuLEAST64 "lu"
     * }
     */
    public static MemorySegment SCNuLEAST64() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define SCNuFAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuFAST8() {
        return constants$238.const$1;
    }
    /**
     * {@snippet :
     * #define SCNuFAST16 "lu"
     * }
     */
    public static MemorySegment SCNuFAST16() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define SCNuFAST32 "lu"
     * }
     */
    public static MemorySegment SCNuFAST32() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define SCNuFAST64 "lu"
     * }
     */
    public static MemorySegment SCNuFAST64() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define SCNo8 "hho"
     * }
     */
    public static MemorySegment SCNo8() {
        return constants$238.const$3;
    }
    /**
     * {@snippet :
     * #define SCNo16 "ho"
     * }
     */
    public static MemorySegment SCNo16() {
        return constants$238.const$4;
    }
    /**
     * {@snippet :
     * #define SCNo32 "o"
     * }
     */
    public static MemorySegment SCNo32() {
        return constants$236.const$1;
    }
    /**
     * {@snippet :
     * #define SCNo64 "lo"
     * }
     */
    public static MemorySegment SCNo64() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define SCNoLEAST8 "hho"
     * }
     */
    public static MemorySegment SCNoLEAST8() {
        return constants$238.const$3;
    }
    /**
     * {@snippet :
     * #define SCNoLEAST16 "ho"
     * }
     */
    public static MemorySegment SCNoLEAST16() {
        return constants$238.const$4;
    }
    /**
     * {@snippet :
     * #define SCNoLEAST32 "o"
     * }
     */
    public static MemorySegment SCNoLEAST32() {
        return constants$236.const$1;
    }
    /**
     * {@snippet :
     * #define SCNoLEAST64 "lo"
     * }
     */
    public static MemorySegment SCNoLEAST64() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define SCNoFAST8 "hho"
     * }
     */
    public static MemorySegment SCNoFAST8() {
        return constants$238.const$3;
    }
    /**
     * {@snippet :
     * #define SCNoFAST16 "lo"
     * }
     */
    public static MemorySegment SCNoFAST16() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define SCNoFAST32 "lo"
     * }
     */
    public static MemorySegment SCNoFAST32() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define SCNoFAST64 "lo"
     * }
     */
    public static MemorySegment SCNoFAST64() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define SCNx8 "hhx"
     * }
     */
    public static MemorySegment SCNx8() {
        return constants$238.const$5;
    }
    /**
     * {@snippet :
     * #define SCNx16 "hx"
     * }
     */
    public static MemorySegment SCNx16() {
        return constants$239.const$0;
    }
    /**
     * {@snippet :
     * #define SCNx32 "x"
     * }
     */
    public static MemorySegment SCNx32() {
        return constants$236.const$5;
    }
    /**
     * {@snippet :
     * #define SCNx64 "lx"
     * }
     */
    public static MemorySegment SCNx64() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define SCNxLEAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxLEAST8() {
        return constants$238.const$5;
    }
    /**
     * {@snippet :
     * #define SCNxLEAST16 "hx"
     * }
     */
    public static MemorySegment SCNxLEAST16() {
        return constants$239.const$0;
    }
    /**
     * {@snippet :
     * #define SCNxLEAST32 "x"
     * }
     */
    public static MemorySegment SCNxLEAST32() {
        return constants$236.const$5;
    }
    /**
     * {@snippet :
     * #define SCNxLEAST64 "lx"
     * }
     */
    public static MemorySegment SCNxLEAST64() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define SCNxFAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxFAST8() {
        return constants$238.const$5;
    }
    /**
     * {@snippet :
     * #define SCNxFAST16 "lx"
     * }
     */
    public static MemorySegment SCNxFAST16() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define SCNxFAST32 "lx"
     * }
     */
    public static MemorySegment SCNxFAST32() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define SCNxFAST64 "lx"
     * }
     */
    public static MemorySegment SCNxFAST64() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define SCNdMAX "ld"
     * }
     */
    public static MemorySegment SCNdMAX() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define SCNiMAX "li"
     * }
     */
    public static MemorySegment SCNiMAX() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define SCNoMAX "lo"
     * }
     */
    public static MemorySegment SCNoMAX() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define SCNuMAX "lu"
     * }
     */
    public static MemorySegment SCNuMAX() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define SCNxMAX "lx"
     * }
     */
    public static MemorySegment SCNxMAX() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define SCNdPTR "ld"
     * }
     */
    public static MemorySegment SCNdPTR() {
        return constants$235.const$4;
    }
    /**
     * {@snippet :
     * #define SCNiPTR "li"
     * }
     */
    public static MemorySegment SCNiPTR() {
        return constants$236.const$0;
    }
    /**
     * {@snippet :
     * #define SCNoPTR "lo"
     * }
     */
    public static MemorySegment SCNoPTR() {
        return constants$236.const$2;
    }
    /**
     * {@snippet :
     * #define SCNuPTR "lu"
     * }
     */
    public static MemorySegment SCNuPTR() {
        return constants$236.const$4;
    }
    /**
     * {@snippet :
     * #define SCNxPTR "lx"
     * }
     */
    public static MemorySegment SCNxPTR() {
        return constants$237.const$0;
    }
    /**
     * {@snippet :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define PTHREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SEM_VALUE_MAX 2147483647
     * }
     */
    public static int SEM_VALUE_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define SSIZE_MAX 9223372036854775807
     * }
     */
    public static long SSIZE_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define BC_BASE_MAX 99
     * }
     */
    public static int BC_BASE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define BC_DIM_MAX 2048
     * }
     */
    public static int BC_DIM_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define BC_SCALE_MAX 99
     * }
     */
    public static int BC_SCALE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define BC_STRING_MAX 1000
     * }
     */
    public static int BC_STRING_MAX() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * #define EXPR_NEST_MAX 32
     * }
     */
    public static int EXPR_NEST_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define LINE_MAX 2048
     * }
     */
    public static int LINE_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define RE_DUP_MAX 32767
     * }
     */
    public static int RE_DUP_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define SCHAR_MAX 127
     * }
     */
    public static int SCHAR_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define SHRT_MAX 32767
     * }
     */
    public static int SHRT_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_MAX 2147483647
     * }
     */
    public static int INT_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define UCHAR_MAX 255
     * }
     */
    public static int UCHAR_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define USHRT_MAX 65535
     * }
     */
    public static int USHRT_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define ULONG_MAX -1
     * }
     */
    public static long ULONG_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define CHAR_BIT 8
     * }
     */
    public static int CHAR_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$239.const$1;
    }
    /**
     * {@snippet :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define P_tmpdir "/tmp"
     * }
     */
    public static MemorySegment P_tmpdir() {
        return constants$239.const$2;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __WCLONE 2147483648
     * }
     */
    public static int __WCLONE() {
        return (int)2147483648L;
    }
    /**
     * {@snippet :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    /**
     * {@snippet :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define CLOCKS_PER_SEC 1000000
     * }
     */
    public static long CLOCKS_PER_SEC() {
        return 1000000L;
    }
    /**
     * {@snippet :
     * #define O_NDELAY 2048
     * }
     */
    public static int O_NDELAY() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define O_FSYNC 1052672
     * }
     */
    public static int O_FSYNC() {
        return (int)1052672L;
    }
    /**
     * {@snippet :
     * #define __O_TMPFILE 4259840
     * }
     */
    public static int __O_TMPFILE() {
        return (int)4259840L;
    }
    /**
     * {@snippet :
     * #define F_GETLK 5
     * }
     */
    public static int F_GETLK() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define F_SETLK 6
     * }
     */
    public static int F_SETLK() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define F_SETLKW 7
     * }
     */
    public static int F_SETLKW() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define O_DIRECTORY 65536
     * }
     */
    public static int O_DIRECTORY() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define O_NOFOLLOW 131072
     * }
     */
    public static int O_NOFOLLOW() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define O_CLOEXEC 524288
     * }
     */
    public static int O_CLOEXEC() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * #define O_DSYNC 4096
     * }
     */
    public static int O_DSYNC() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define O_RSYNC 1052672
     * }
     */
    public static int O_RSYNC() {
        return (int)1052672L;
    }
    /**
     * {@snippet :
     * #define F_SETOWN 8
     * }
     */
    public static int F_SETOWN() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define F_GETOWN 9
     * }
     */
    public static int F_GETOWN() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define FAPPEND 1024
     * }
     */
    public static int FAPPEND() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define FFSYNC 1052672
     * }
     */
    public static int FFSYNC() {
        return (int)1052672L;
    }
    /**
     * {@snippet :
     * #define FASYNC 8192
     * }
     */
    public static int FASYNC() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define FNONBLOCK 2048
     * }
     */
    public static int FNONBLOCK() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define FNDELAY 2048
     * }
     */
    public static int FNDELAY() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define POSIX_FADV_DONTNEED 4
     * }
     */
    public static int POSIX_FADV_DONTNEED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define POSIX_FADV_NOREUSE 5
     * }
     */
    public static int POSIX_FADV_NOREUSE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define UTIME_NOW 1073741823
     * }
     */
    public static long UTIME_NOW() {
        return 1073741823L;
    }
    /**
     * {@snippet :
     * #define UTIME_OMIT 1073741822
     * }
     */
    public static long UTIME_OMIT() {
        return 1073741822L;
    }
    /**
     * {@snippet :
     * #define S_IFMT 61440
     * }
     */
    public static int S_IFMT() {
        return (int)61440L;
    }
    /**
     * {@snippet :
     * #define S_IFDIR 16384
     * }
     */
    public static int S_IFDIR() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define S_IFCHR 8192
     * }
     */
    public static int S_IFCHR() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define S_IFBLK 24576
     * }
     */
    public static int S_IFBLK() {
        return (int)24576L;
    }
    /**
     * {@snippet :
     * #define S_IFREG 32768
     * }
     */
    public static int S_IFREG() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define S_IFIFO 4096
     * }
     */
    public static int S_IFIFO() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define S_IFLNK 40960
     * }
     */
    public static int S_IFLNK() {
        return (int)40960L;
    }
    /**
     * {@snippet :
     * #define S_IFSOCK 49152
     * }
     */
    public static int S_IFSOCK() {
        return (int)49152L;
    }
    /**
     * {@snippet :
     * #define S_ISUID 2048
     * }
     */
    public static int S_ISUID() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define S_ISGID 1024
     * }
     */
    public static int S_ISGID() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define S_ISVTX 512
     * }
     */
    public static int S_ISVTX() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define S_IRUSR 256
     * }
     */
    public static int S_IRUSR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define S_IWUSR 128
     * }
     */
    public static int S_IWUSR() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define S_IXUSR 64
     * }
     */
    public static int S_IXUSR() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define S_IRWXU 448
     * }
     */
    public static int S_IRWXU() {
        return (int)448L;
    }
    /**
     * {@snippet :
     * #define S_IRGRP 32
     * }
     */
    public static int S_IRGRP() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define S_IWGRP 16
     * }
     */
    public static int S_IWGRP() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define S_IXGRP 8
     * }
     */
    public static int S_IXGRP() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define S_IRWXG 56
     * }
     */
    public static int S_IRWXG() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define S_IROTH 4
     * }
     */
    public static int S_IROTH() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define S_IWOTH 2
     * }
     */
    public static int S_IWOTH() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define S_IXOTH 1
     * }
     */
    public static int S_IXOTH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define S_IRWXO 7
     * }
     */
    public static int S_IRWXO() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define AT_FDCWD -100
     * }
     */
    public static int AT_FDCWD() {
        return (int)-100L;
    }
    /**
     * {@snippet :
     * #define _POSIX_VERSION 200809
     * }
     */
    public static long _POSIX_VERSION() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __POSIX2_THIS_VERSION 200809
     * }
     */
    public static long __POSIX2_THIS_VERSION() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_VERSION 200809
     * }
     */
    public static long _POSIX2_VERSION() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_C_VERSION 200809
     * }
     */
    public static long _POSIX2_C_VERSION() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_C_BIND 200809
     * }
     */
    public static long _POSIX2_C_BIND() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_C_DEV 200809
     * }
     */
    public static long _POSIX2_C_DEV() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_SW_DEV 200809
     * }
     */
    public static long _POSIX2_SW_DEV() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_LOCALEDEF 200809
     * }
     */
    public static long _POSIX2_LOCALEDEF() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_PRIORITY_SCHEDULING 200809
     * }
     */
    public static long _POSIX_PRIORITY_SCHEDULING() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SYNCHRONIZED_IO 200809
     * }
     */
    public static long _POSIX_SYNCHRONIZED_IO() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_FSYNC 200809
     * }
     */
    public static long _POSIX_FSYNC() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MAPPED_FILES 200809
     * }
     */
    public static long _POSIX_MAPPED_FILES() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MEMLOCK 200809
     * }
     */
    public static long _POSIX_MEMLOCK() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MEMLOCK_RANGE 200809
     * }
     */
    public static long _POSIX_MEMLOCK_RANGE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MEMORY_PROTECTION 200809
     * }
     */
    public static long _POSIX_MEMORY_PROTECTION() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_VDISABLE 0
     * }
     */
    public static int _POSIX_VDISABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREADS 200809
     * }
     */
    public static long _POSIX_THREADS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_SAFE_FUNCTIONS 200809
     * }
     */
    public static long _POSIX_THREAD_SAFE_FUNCTIONS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_PRIORITY_SCHEDULING 200809
     * }
     */
    public static long _POSIX_THREAD_PRIORITY_SCHEDULING() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_ATTR_STACKSIZE 200809
     * }
     */
    public static long _POSIX_THREAD_ATTR_STACKSIZE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_ATTR_STACKADDR 200809
     * }
     */
    public static long _POSIX_THREAD_ATTR_STACKADDR() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_PRIO_INHERIT 200809
     * }
     */
    public static long _POSIX_THREAD_PRIO_INHERIT() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_PRIO_PROTECT 200809
     * }
     */
    public static long _POSIX_THREAD_PRIO_PROTECT() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_ROBUST_PRIO_INHERIT 200809
     * }
     */
    public static long _POSIX_THREAD_ROBUST_PRIO_INHERIT() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_ROBUST_PRIO_PROTECT -1
     * }
     */
    public static int _POSIX_THREAD_ROBUST_PRIO_PROTECT() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SEMAPHORES 200809
     * }
     */
    public static long _POSIX_SEMAPHORES() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_REALTIME_SIGNALS 200809
     * }
     */
    public static long _POSIX_REALTIME_SIGNALS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_ASYNCHRONOUS_IO 200809
     * }
     */
    public static long _POSIX_ASYNCHRONOUS_IO() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_PRIORITIZED_IO 200809
     * }
     */
    public static long _POSIX_PRIORITIZED_IO() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SHARED_MEMORY_OBJECTS 200809
     * }
     */
    public static long _POSIX_SHARED_MEMORY_OBJECTS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_READER_WRITER_LOCKS 200809
     * }
     */
    public static long _POSIX_READER_WRITER_LOCKS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TIMEOUTS 200809
     * }
     */
    public static long _POSIX_TIMEOUTS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SPIN_LOCKS 200809
     * }
     */
    public static long _POSIX_SPIN_LOCKS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SPAWN 200809
     * }
     */
    public static long _POSIX_SPAWN() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TIMERS 200809
     * }
     */
    public static long _POSIX_TIMERS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_BARRIERS 200809
     * }
     */
    public static long _POSIX_BARRIERS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MESSAGE_PASSING 200809
     * }
     */
    public static long _POSIX_MESSAGE_PASSING() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_PROCESS_SHARED 200809
     * }
     */
    public static long _POSIX_THREAD_PROCESS_SHARED() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_CLOCK_SELECTION 200809
     * }
     */
    public static long _POSIX_CLOCK_SELECTION() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_ADVISORY_INFO 200809
     * }
     */
    public static long _POSIX_ADVISORY_INFO() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_IPV6 200809
     * }
     */
    public static long _POSIX_IPV6() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_RAW_SOCKETS 200809
     * }
     */
    public static long _POSIX_RAW_SOCKETS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_CHAR_TERM 200809
     * }
     */
    public static long _POSIX2_CHAR_TERM() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SPORADIC_SERVER -1
     * }
     */
    public static int _POSIX_SPORADIC_SERVER() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_SPORADIC_SERVER -1
     * }
     */
    public static int _POSIX_THREAD_SPORADIC_SERVER() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TRACE -1
     * }
     */
    public static int _POSIX_TRACE() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TRACE_EVENT_FILTER -1
     * }
     */
    public static int _POSIX_TRACE_EVENT_FILTER() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TRACE_INHERIT -1
     * }
     */
    public static int _POSIX_TRACE_INHERIT() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TRACE_LOG -1
     * }
     */
    public static int _POSIX_TRACE_LOG() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TYPED_MEMORY_OBJECTS -1
     * }
     */
    public static int _POSIX_TYPED_MEMORY_OBJECTS() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_V7_LPBIG_OFFBIG -1
     * }
     */
    public static int _POSIX_V7_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_V6_LPBIG_OFFBIG -1
     * }
     */
    public static int _POSIX_V6_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _XBS5_LPBIG_OFFBIG -1
     * }
     */
    public static int _XBS5_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define __ILP32_OFF32_CFLAGS "-m32"
     * }
     */
    public static MemorySegment __ILP32_OFF32_CFLAGS() {
        return constants$239.const$3;
    }
    /**
     * {@snippet :
     * #define __ILP32_OFF32_LDFLAGS "-m32"
     * }
     */
    public static MemorySegment __ILP32_OFF32_LDFLAGS() {
        return constants$239.const$3;
    }
    /**
     * {@snippet :
     * #define __ILP32_OFFBIG_CFLAGS "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
     * }
     */
    public static MemorySegment __ILP32_OFFBIG_CFLAGS() {
        return constants$239.const$4;
    }
    /**
     * {@snippet :
     * #define __ILP32_OFFBIG_LDFLAGS "-m32"
     * }
     */
    public static MemorySegment __ILP32_OFFBIG_LDFLAGS() {
        return constants$239.const$3;
    }
    /**
     * {@snippet :
     * #define __LP64_OFF64_CFLAGS "-m64"
     * }
     */
    public static MemorySegment __LP64_OFF64_CFLAGS() {
        return constants$239.const$5;
    }
    /**
     * {@snippet :
     * #define __LP64_OFF64_LDFLAGS "-m64"
     * }
     */
    public static MemorySegment __LP64_OFF64_LDFLAGS() {
        return constants$239.const$5;
    }
    /**
     * {@snippet :
     * #define L_SET 0
     * }
     */
    public static int L_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define L_INCR 1
     * }
     */
    public static int L_INCR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define L_XTND 2
     * }
     */
    public static int L_XTND() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _SC_PAGE_SIZE 30
     * }
     */
    public static int _SC_PAGE_SIZE() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS 1
     * }
     */
    public static int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS 4
     * }
     */
    public static int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS 5
     * }
     */
    public static int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define S_IREAD 256
     * }
     */
    public static int S_IREAD() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define S_IWRITE 128
     * }
     */
    public static int S_IWRITE() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define S_IEXEC 64
     * }
     */
    public static int S_IEXEC() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define ACCESSPERMS 511
     * }
     */
    public static int ACCESSPERMS() {
        return (int)511L;
    }
    /**
     * {@snippet :
     * #define ALLPERMS 4095
     * }
     */
    public static int ALLPERMS() {
        return (int)4095L;
    }
    /**
     * {@snippet :
     * #define DEFFILEMODE 438
     * }
     */
    public static int DEFFILEMODE() {
        return (int)438L;
    }
    /**
     * {@snippet :
     * #define MAX_REF 65535
     * }
     */
    public static short MAX_REF() {
        return (short)65535L;
    }
    /**
     * {@snippet :
     * #define H4_MAX_NC_OPEN 32
     * }
     */
    public static int H4_MAX_NC_OPEN() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define GR_NAME "RIG0.0"
     * }
     */
    public static MemorySegment GR_NAME() {
        return constants$240.const$0;
    }
    /**
     * {@snippet :
     * #define RI_NAME "RI0.0"
     * }
     */
    public static MemorySegment RI_NAME() {
        return constants$240.const$1;
    }
    /**
     * {@snippet :
     * #define RIGATTRNAME "RIATTR0.0N"
     * }
     */
    public static MemorySegment RIGATTRNAME() {
        return constants$240.const$2;
    }
    /**
     * {@snippet :
     * #define RIGATTRCLASS "RIATTR0.0C"
     * }
     */
    public static MemorySegment RIGATTRCLASS() {
        return constants$240.const$3;
    }
    /**
     * {@snippet :
     * #define _HDF_ATTRIBUTE "Attr0.0"
     * }
     */
    public static MemorySegment _HDF_ATTRIBUTE() {
        return constants$240.const$4;
    }
    /**
     * {@snippet :
     * #define _HDF_VARIABLE "Var0.0"
     * }
     */
    public static MemorySegment _HDF_VARIABLE() {
        return constants$240.const$5;
    }
    /**
     * {@snippet :
     * #define _HDF_SDSVAR "SDSVar"
     * }
     */
    public static MemorySegment _HDF_SDSVAR() {
        return constants$241.const$0;
    }
    /**
     * {@snippet :
     * #define _HDF_CRDVAR "CoordVar"
     * }
     */
    public static MemorySegment _HDF_CRDVAR() {
        return constants$241.const$1;
    }
    /**
     * {@snippet :
     * #define _HDF_DIMENSION "Dim0.0"
     * }
     */
    public static MemorySegment _HDF_DIMENSION() {
        return constants$241.const$2;
    }
    /**
     * {@snippet :
     * #define _HDF_UDIMENSION "UDim0.0"
     * }
     */
    public static MemorySegment _HDF_UDIMENSION() {
        return constants$241.const$3;
    }
    /**
     * {@snippet :
     * #define DIM_VALS "DimVal0.0"
     * }
     */
    public static MemorySegment DIM_VALS() {
        return constants$241.const$4;
    }
    /**
     * {@snippet :
     * #define DIM_VALS01 "DimVal0.1"
     * }
     */
    public static MemorySegment DIM_VALS01() {
        return constants$241.const$5;
    }
    /**
     * {@snippet :
     * #define _HDF_CDF "CDF0.0"
     * }
     */
    public static MemorySegment _HDF_CDF() {
        return constants$242.const$0;
    }
    /**
     * {@snippet :
     * #define DATA0 "Data0.0"
     * }
     */
    public static MemorySegment DATA0() {
        return constants$242.const$1;
    }
    /**
     * {@snippet :
     * #define ATTR_FIELD_NAME "VALUES"
     * }
     */
    public static MemorySegment ATTR_FIELD_NAME() {
        return constants$242.const$2;
    }
    /**
     * {@snippet :
     * #define _HDF_CHK_TBL_CLASS "_HDF_CHK_TBL_"
     * }
     */
    public static MemorySegment _HDF_CHK_TBL_CLASS() {
        return constants$242.const$3;
    }
    /**
     * {@snippet :
     * #define FILL_ATTR "FillValue"
     * }
     */
    public static MemorySegment FILL_ATTR() {
        return constants$242.const$4;
    }
    /**
     * {@snippet :
     * #define _FillValue "_FillValue"
     * }
     */
    public static MemorySegment _FillValue() {
        return constants$242.const$5;
    }
    /**
     * {@snippet :
     * #define _HDF_LongName "long_name"
     * }
     */
    public static MemorySegment _HDF_LongName() {
        return constants$243.const$0;
    }
    /**
     * {@snippet :
     * #define _HDF_Units "units"
     * }
     */
    public static MemorySegment _HDF_Units() {
        return constants$243.const$1;
    }
    /**
     * {@snippet :
     * #define _HDF_Format "format"
     * }
     */
    public static MemorySegment _HDF_Format() {
        return constants$243.const$2;
    }
    /**
     * {@snippet :
     * #define _HDF_CoordSys "coordsys"
     * }
     */
    public static MemorySegment _HDF_CoordSys() {
        return constants$243.const$3;
    }
    /**
     * {@snippet :
     * #define _HDF_ValidRange "valid_range"
     * }
     */
    public static MemorySegment _HDF_ValidRange() {
        return constants$243.const$4;
    }
    /**
     * {@snippet :
     * #define _HDF_ScaleFactor "scale_factor"
     * }
     */
    public static MemorySegment _HDF_ScaleFactor() {
        return constants$243.const$5;
    }
    /**
     * {@snippet :
     * #define _HDF_ScaleFactorErr "scale_factor_err"
     * }
     */
    public static MemorySegment _HDF_ScaleFactorErr() {
        return constants$244.const$0;
    }
    /**
     * {@snippet :
     * #define _HDF_AddOffset "add_offset"
     * }
     */
    public static MemorySegment _HDF_AddOffset() {
        return constants$244.const$1;
    }
    /**
     * {@snippet :
     * #define _HDF_AddOffsetErr "add_offset_err"
     * }
     */
    public static MemorySegment _HDF_AddOffsetErr() {
        return constants$244.const$2;
    }
    /**
     * {@snippet :
     * #define _HDF_CalibratedNt "calibrated_nt"
     * }
     */
    public static MemorySegment _HDF_CalibratedNt() {
        return constants$244.const$3;
    }
    /**
     * {@snippet :
     * #define _HDF_ValidMax "valid_max"
     * }
     */
    public static MemorySegment _HDF_ValidMax() {
        return constants$244.const$4;
    }
    /**
     * {@snippet :
     * #define _HDF_ValidMin "valid_min"
     * }
     */
    public static MemorySegment _HDF_ValidMin() {
        return constants$244.const$5;
    }
    /**
     * {@snippet :
     * #define _HDF_Remarks "remarks"
     * }
     */
    public static MemorySegment _HDF_Remarks() {
        return constants$245.const$0;
    }
    /**
     * {@snippet :
     * #define _HDF_AnnoLabel "anno_label"
     * }
     */
    public static MemorySegment _HDF_AnnoLabel() {
        return constants$245.const$1;
    }
    /**
     * {@snippet :
     * #define CACHE_ALL_FILES -2
     * }
     */
    public static int CACHE_ALL_FILES() {
        return (int)-2L;
    }
    /**
     * {@snippet :
     * #define FAIL -1
     * }
     */
    public static int FAIL() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define TRUE 1
     * }
     */
    public static int TRUE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DFNT_NFLOAT32 4101
     * }
     */
    public static int DFNT_NFLOAT32() {
        return (int)4101L;
    }
    /**
     * {@snippet :
     * #define DFNT_NFLOAT64 4102
     * }
     */
    public static int DFNT_NFLOAT64() {
        return (int)4102L;
    }
    /**
     * {@snippet :
     * #define DFNT_NFLOAT128 4103
     * }
     */
    public static int DFNT_NFLOAT128() {
        return (int)4103L;
    }
    /**
     * {@snippet :
     * #define DFNT_NINT8 4116
     * }
     */
    public static int DFNT_NINT8() {
        return (int)4116L;
    }
    /**
     * {@snippet :
     * #define DFNT_NUINT8 4117
     * }
     */
    public static int DFNT_NUINT8() {
        return (int)4117L;
    }
    /**
     * {@snippet :
     * #define DFNT_NINT16 4118
     * }
     */
    public static int DFNT_NINT16() {
        return (int)4118L;
    }
    /**
     * {@snippet :
     * #define DFNT_NUINT16 4119
     * }
     */
    public static int DFNT_NUINT16() {
        return (int)4119L;
    }
    /**
     * {@snippet :
     * #define DFNT_NINT32 4120
     * }
     */
    public static int DFNT_NINT32() {
        return (int)4120L;
    }
    /**
     * {@snippet :
     * #define DFNT_NUINT32 4121
     * }
     */
    public static int DFNT_NUINT32() {
        return (int)4121L;
    }
    /**
     * {@snippet :
     * #define DFNT_NINT64 4122
     * }
     */
    public static int DFNT_NINT64() {
        return (int)4122L;
    }
    /**
     * {@snippet :
     * #define DFNT_NUINT64 4123
     * }
     */
    public static int DFNT_NUINT64() {
        return (int)4123L;
    }
    /**
     * {@snippet :
     * #define DFNT_NINT128 4124
     * }
     */
    public static int DFNT_NINT128() {
        return (int)4124L;
    }
    /**
     * {@snippet :
     * #define DFNT_NUINT128 4126
     * }
     */
    public static int DFNT_NUINT128() {
        return (int)4126L;
    }
    /**
     * {@snippet :
     * #define DFNT_NCHAR8 4100
     * }
     */
    public static int DFNT_NCHAR8() {
        return (int)4100L;
    }
    /**
     * {@snippet :
     * #define DFNT_NCHAR 4100
     * }
     */
    public static int DFNT_NCHAR() {
        return (int)4100L;
    }
    /**
     * {@snippet :
     * #define DFNT_NUCHAR8 4099
     * }
     */
    public static int DFNT_NUCHAR8() {
        return (int)4099L;
    }
    /**
     * {@snippet :
     * #define DFNT_NUCHAR 4099
     * }
     */
    public static int DFNT_NUCHAR() {
        return (int)4099L;
    }
    /**
     * {@snippet :
     * #define DFNT_NCHAR16 4138
     * }
     */
    public static int DFNT_NCHAR16() {
        return (int)4138L;
    }
    /**
     * {@snippet :
     * #define DFNT_NUCHAR16 4139
     * }
     */
    public static int DFNT_NUCHAR16() {
        return (int)4139L;
    }
    /**
     * {@snippet :
     * #define DFNT_LFLOAT32 16389
     * }
     */
    public static int DFNT_LFLOAT32() {
        return (int)16389L;
    }
    /**
     * {@snippet :
     * #define DFNT_LFLOAT64 16390
     * }
     */
    public static int DFNT_LFLOAT64() {
        return (int)16390L;
    }
    /**
     * {@snippet :
     * #define DFNT_LFLOAT128 16391
     * }
     */
    public static int DFNT_LFLOAT128() {
        return (int)16391L;
    }
    /**
     * {@snippet :
     * #define DFNT_LINT8 16404
     * }
     */
    public static int DFNT_LINT8() {
        return (int)16404L;
    }
    /**
     * {@snippet :
     * #define DFNT_LUINT8 16405
     * }
     */
    public static int DFNT_LUINT8() {
        return (int)16405L;
    }
    /**
     * {@snippet :
     * #define DFNT_LINT16 16406
     * }
     */
    public static int DFNT_LINT16() {
        return (int)16406L;
    }
    /**
     * {@snippet :
     * #define DFNT_LUINT16 16407
     * }
     */
    public static int DFNT_LUINT16() {
        return (int)16407L;
    }
    /**
     * {@snippet :
     * #define DFNT_LINT32 16408
     * }
     */
    public static int DFNT_LINT32() {
        return (int)16408L;
    }
    /**
     * {@snippet :
     * #define DFNT_LUINT32 16409
     * }
     */
    public static int DFNT_LUINT32() {
        return (int)16409L;
    }
    /**
     * {@snippet :
     * #define DFNT_LINT64 16410
     * }
     */
    public static int DFNT_LINT64() {
        return (int)16410L;
    }
    /**
     * {@snippet :
     * #define DFNT_LUINT64 16411
     * }
     */
    public static int DFNT_LUINT64() {
        return (int)16411L;
    }
    /**
     * {@snippet :
     * #define DFNT_LINT128 16412
     * }
     */
    public static int DFNT_LINT128() {
        return (int)16412L;
    }
    /**
     * {@snippet :
     * #define DFNT_LUINT128 16414
     * }
     */
    public static int DFNT_LUINT128() {
        return (int)16414L;
    }
    /**
     * {@snippet :
     * #define DFNT_LCHAR8 16388
     * }
     */
    public static int DFNT_LCHAR8() {
        return (int)16388L;
    }
    /**
     * {@snippet :
     * #define DFNT_LCHAR 16388
     * }
     */
    public static int DFNT_LCHAR() {
        return (int)16388L;
    }
    /**
     * {@snippet :
     * #define DFNT_LUCHAR8 16387
     * }
     */
    public static int DFNT_LUCHAR8() {
        return (int)16387L;
    }
    /**
     * {@snippet :
     * #define DFNT_LUCHAR 16387
     * }
     */
    public static int DFNT_LUCHAR() {
        return (int)16387L;
    }
    /**
     * {@snippet :
     * #define DFNT_LCHAR16 16426
     * }
     */
    public static int DFNT_LCHAR16() {
        return (int)16426L;
    }
    /**
     * {@snippet :
     * #define DFNT_LUCHAR16 16427
     * }
     */
    public static int DFNT_LUCHAR16() {
        return (int)16427L;
    }
    /**
     * {@snippet :
     * #define DFTAG_FID 100
     * }
     */
    public static short DFTAG_FID() {
        return (short)100L;
    }
    /**
     * {@snippet :
     * #define DFTAG_FD 101
     * }
     */
    public static short DFTAG_FD() {
        return (short)101L;
    }
    /**
     * {@snippet :
     * #define DFTAG_TID 102
     * }
     */
    public static short DFTAG_TID() {
        return (short)102L;
    }
    /**
     * {@snippet :
     * #define DFTAG_TD 103
     * }
     */
    public static short DFTAG_TD() {
        return (short)103L;
    }
    /**
     * {@snippet :
     * #define DFTAG_DIL 104
     * }
     */
    public static short DFTAG_DIL() {
        return (short)104L;
    }
    /**
     * {@snippet :
     * #define DFTAG_DIA 105
     * }
     */
    public static short DFTAG_DIA() {
        return (short)105L;
    }
    /**
     * {@snippet :
     * #define DFTAG_NT 106
     * }
     */
    public static short DFTAG_NT() {
        return (short)106L;
    }
    /**
     * {@snippet :
     * #define DFTAG_MT 107
     * }
     */
    public static short DFTAG_MT() {
        return (short)107L;
    }
    /**
     * {@snippet :
     * #define DFTAG_FREE 108
     * }
     */
    public static short DFTAG_FREE() {
        return (short)108L;
    }
    /**
     * {@snippet :
     * #define DFTAG_ID8 200
     * }
     */
    public static short DFTAG_ID8() {
        return (short)200L;
    }
    /**
     * {@snippet :
     * #define DFTAG_IP8 201
     * }
     */
    public static short DFTAG_IP8() {
        return (short)201L;
    }
    /**
     * {@snippet :
     * #define DFTAG_RI8 202
     * }
     */
    public static short DFTAG_RI8() {
        return (short)202L;
    }
    /**
     * {@snippet :
     * #define DFTAG_CI8 203
     * }
     */
    public static short DFTAG_CI8() {
        return (short)203L;
    }
    /**
     * {@snippet :
     * #define DFTAG_II8 204
     * }
     */
    public static short DFTAG_II8() {
        return (short)204L;
    }
    /**
     * {@snippet :
     * #define DFTAG_ID 300
     * }
     */
    public static short DFTAG_ID() {
        return (short)300L;
    }
    /**
     * {@snippet :
     * #define DFTAG_LUT 301
     * }
     */
    public static short DFTAG_LUT() {
        return (short)301L;
    }
    /**
     * {@snippet :
     * #define DFTAG_RI 302
     * }
     */
    public static short DFTAG_RI() {
        return (short)302L;
    }
    /**
     * {@snippet :
     * #define DFTAG_CI 303
     * }
     */
    public static short DFTAG_CI() {
        return (short)303L;
    }
    /**
     * {@snippet :
     * #define DFTAG_NRI 304
     * }
     */
    public static short DFTAG_NRI() {
        return (short)304L;
    }
    /**
     * {@snippet :
     * #define DFTAG_RIG 306
     * }
     */
    public static short DFTAG_RIG() {
        return (short)306L;
    }
    /**
     * {@snippet :
     * #define DFTAG_LD 307
     * }
     */
    public static short DFTAG_LD() {
        return (short)307L;
    }
    /**
     * {@snippet :
     * #define DFTAG_MD 308
     * }
     */
    public static short DFTAG_MD() {
        return (short)308L;
    }
    /**
     * {@snippet :
     * #define DFTAG_MA 309
     * }
     */
    public static short DFTAG_MA() {
        return (short)309L;
    }
    /**
     * {@snippet :
     * #define DFTAG_CCN 310
     * }
     */
    public static short DFTAG_CCN() {
        return (short)310L;
    }
    /**
     * {@snippet :
     * #define DFTAG_CFM 311
     * }
     */
    public static short DFTAG_CFM() {
        return (short)311L;
    }
    /**
     * {@snippet :
     * #define DFTAG_AR 312
     * }
     */
    public static short DFTAG_AR() {
        return (short)312L;
    }
    /**
     * {@snippet :
     * #define DFTAG_DRAW 400
     * }
     */
    public static short DFTAG_DRAW() {
        return (short)400L;
    }
    /**
     * {@snippet :
     * #define DFTAG_RUN 401
     * }
     */
    public static short DFTAG_RUN() {
        return (short)401L;
    }
    /**
     * {@snippet :
     * #define DFTAG_XYP 500
     * }
     */
    public static short DFTAG_XYP() {
        return (short)500L;
    }
    /**
     * {@snippet :
     * #define DFTAG_MTO 501
     * }
     */
    public static short DFTAG_MTO() {
        return (short)501L;
    }
    /**
     * {@snippet :
     * #define DFTAG_T14 602
     * }
     */
    public static short DFTAG_T14() {
        return (short)602L;
    }
    /**
     * {@snippet :
     * #define DFTAG_T105 603
     * }
     */
    public static short DFTAG_T105() {
        return (short)603L;
    }
    /**
     * {@snippet :
     * #define DFTAG_SDG 700
     * }
     */
    public static short DFTAG_SDG() {
        return (short)700L;
    }
    /**
     * {@snippet :
     * #define DFTAG_SDD 701
     * }
     */
    public static short DFTAG_SDD() {
        return (short)701L;
    }
    /**
     * {@snippet :
     * #define DFTAG_SD 702
     * }
     */
    public static short DFTAG_SD() {
        return (short)702L;
    }
    /**
     * {@snippet :
     * #define DFTAG_SDS 703
     * }
     */
    public static short DFTAG_SDS() {
        return (short)703L;
    }
    /**
     * {@snippet :
     * #define DFTAG_SDL 704
     * }
     */
    public static short DFTAG_SDL() {
        return (short)704L;
    }
    /**
     * {@snippet :
     * #define DFTAG_SDU 705
     * }
     */
    public static short DFTAG_SDU() {
        return (short)705L;
    }
    /**
     * {@snippet :
     * #define DFTAG_SDF 706
     * }
     */
    public static short DFTAG_SDF() {
        return (short)706L;
    }
    /**
     * {@snippet :
     * #define DFTAG_SDM 707
     * }
     */
    public static short DFTAG_SDM() {
        return (short)707L;
    }
    /**
     * {@snippet :
     * #define DFTAG_SDC 708
     * }
     */
    public static short DFTAG_SDC() {
        return (short)708L;
    }
    /**
     * {@snippet :
     * #define DFTAG_SDT 709
     * }
     */
    public static short DFTAG_SDT() {
        return (short)709L;
    }
    /**
     * {@snippet :
     * #define DFTAG_SDLNK 710
     * }
     */
    public static short DFTAG_SDLNK() {
        return (short)710L;
    }
    /**
     * {@snippet :
     * #define DFTAG_NDG 720
     * }
     */
    public static short DFTAG_NDG() {
        return (short)720L;
    }
    /**
     * {@snippet :
     * #define DFTAG_CAL 731
     * }
     */
    public static short DFTAG_CAL() {
        return (short)731L;
    }
    /**
     * {@snippet :
     * #define DFTAG_FV 732
     * }
     */
    public static short DFTAG_FV() {
        return (short)732L;
    }
    /**
     * {@snippet :
     * #define DFTAG_BREQ 799
     * }
     */
    public static short DFTAG_BREQ() {
        return (short)799L;
    }
    /**
     * {@snippet :
     * #define DFTAG_SDRAG 781
     * }
     */
    public static short DFTAG_SDRAG() {
        return (short)781L;
    }
    /**
     * {@snippet :
     * #define DFTAG_EREQ 780
     * }
     */
    public static short DFTAG_EREQ() {
        return (short)780L;
    }
    /**
     * {@snippet :
     * #define DFTAG_VG 1965
     * }
     */
    public static short DFTAG_VG() {
        return (short)1965L;
    }
    /**
     * {@snippet :
     * #define DFTAG_VH 1962
     * }
     */
    public static short DFTAG_VH() {
        return (short)1962L;
    }
    /**
     * {@snippet :
     * #define DFTAG_VS 1963
     * }
     */
    public static short DFTAG_VS() {
        return (short)1963L;
    }
    /**
     * {@snippet :
     * #define DFTAG_RLE 11
     * }
     */
    public static short DFTAG_RLE() {
        return (short)11L;
    }
    /**
     * {@snippet :
     * #define DFTAG_IMC 12
     * }
     */
    public static short DFTAG_IMC() {
        return (short)12L;
    }
    /**
     * {@snippet :
     * #define DFTAG_IMCOMP 12
     * }
     */
    public static short DFTAG_IMCOMP() {
        return (short)12L;
    }
    /**
     * {@snippet :
     * #define DFTAG_JPEG 13
     * }
     */
    public static short DFTAG_JPEG() {
        return (short)13L;
    }
    /**
     * {@snippet :
     * #define DFTAG_GREYJPEG 14
     * }
     */
    public static short DFTAG_GREYJPEG() {
        return (short)14L;
    }
    /**
     * {@snippet :
     * #define DFTAG_JPEG5 15
     * }
     */
    public static short DFTAG_JPEG5() {
        return (short)15L;
    }
    /**
     * {@snippet :
     * #define DFTAG_GREYJPEG5 16
     * }
     */
    public static short DFTAG_GREYJPEG5() {
        return (short)16L;
    }
    /**
     * {@snippet :
     * #define BITNUM 8
     * }
     */
    public static long BITNUM() {
        return 8L;
    }
    /**
     * {@snippet :
     * #define DATANUM 32
     * }
     */
    public static long DATANUM() {
        return 32L;
    }
    /**
     * {@snippet :
     * #define NEW_VGDESCTAG 1965
     * }
     */
    public static short NEW_VGDESCTAG() {
        return (short)1965L;
    }
    /**
     * {@snippet :
     * #define NEW_VSDESCTAG 1962
     * }
     */
    public static short NEW_VSDESCTAG() {
        return (short)1962L;
    }
    /**
     * {@snippet :
     * #define NEW_VSDATATAG 1963
     * }
     */
    public static short NEW_VSDATATAG() {
        return (short)1963L;
    }
    /**
     * {@snippet :
     * #define VGDESCTAG 1965
     * }
     */
    public static short VGDESCTAG() {
        return (short)1965L;
    }
    /**
     * {@snippet :
     * #define VSDESCTAG 1962
     * }
     */
    public static short VSDESCTAG() {
        return (short)1962L;
    }
    /**
     * {@snippet :
     * #define VSDATATAG 1963
     * }
     */
    public static short VSDATATAG() {
        return (short)1963L;
    }
    /**
     * {@snippet :
     * #define _HDF_VDATA -1
     * }
     */
    public static int _HDF_VDATA() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _HDF_ENTIRE_VDATA -1
     * }
     */
    public static int _HDF_ENTIRE_VDATA() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define VSET_OLD_TYPES 2
     * }
     */
    public static int VSET_OLD_TYPES() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FILL_BYTE -127
     * }
     */
    public static byte FILL_BYTE() {
        return (byte)-127L;
    }
    /**
     * {@snippet :
     * #define FILL_CHAR 0
     * }
     */
    public static byte FILL_CHAR() {
        return (byte)0L;
    }
    /**
     * {@snippet :
     * #define FILL_SHORT -32767
     * }
     */
    public static short FILL_SHORT() {
        return (short)-32767L;
    }
    /**
     * {@snippet :
     * #define FILL_LONG -2147483647
     * }
     */
    public static long FILL_LONG() {
        return -2147483647L;
    }
    /**
     * {@snippet :
     * #define FILL_FLOAT 9.969209968386869E36
     * }
     */
    public static double FILL_FLOAT() {
        return 9.969209968386869E36d;
    }
    /**
     * {@snippet :
     * #define FILL_DOUBLE 9.969209968386869E36
     * }
     */
    public static double FILL_DOUBLE() {
        return 9.969209968386869E36d;
    }
    /**
     * {@snippet :
     * #define NC_WRITE 1
     * }
     */
    public static int NC_WRITE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_CLOBBER 11
     * }
     */
    public static int NC_CLOBBER() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define NC_NOCLOBBER 15
     * }
     */
    public static int NC_NOCLOBBER() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define NC_UNLIMITED 0
     * }
     */
    public static long NC_UNLIMITED() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define NC_GLOBAL -1
     * }
     */
    public static int NC_GLOBAL() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define NC_ENTOOL 21
     * }
     */
    public static int NC_ENTOOL() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define NC_SYSERR -1
     * }
     */
    public static int NC_SYSERR() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define SD_UNLIMITED 0
     * }
     */
    public static long SD_UNLIMITED() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define SD_NOFILL 256
     * }
     */
    public static int SD_NOFILL() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define SD_FILL 0
     * }
     */
    public static int SD_FILL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SD_RAGGED -1
     * }
     */
    public static int SD_RAGGED() {
        return (int)-1L;
    }
}


