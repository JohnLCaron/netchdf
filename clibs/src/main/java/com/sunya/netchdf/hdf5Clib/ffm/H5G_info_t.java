// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5G_info_t {
 *     H5G_storage_type_t storage_type;
 *     hsize_t nlinks;
 *     int64_t max_corder;
 *     hbool_t mounted;
 * };
 * }
 */
public class H5G_info_t {

    public static MemoryLayout $LAYOUT() {
        return constants$206.const$2;
    }
    public static VarHandle storage_type$VH() {
        return constants$206.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5G_storage_type_t storage_type;
     * }
     */
    public static int storage_type$get(MemorySegment seg) {
        return (int)constants$206.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5G_storage_type_t storage_type;
     * }
     */
    public static void storage_type$set(MemorySegment seg, int x) {
        constants$206.const$3.set(seg, x);
    }
    public static int storage_type$get(MemorySegment seg, long index) {
        return (int)constants$206.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void storage_type$set(MemorySegment seg, long index, int x) {
        constants$206.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nlinks$VH() {
        return constants$206.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hsize_t nlinks;
     * }
     */
    public static long nlinks$get(MemorySegment seg) {
        return (long)constants$206.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hsize_t nlinks;
     * }
     */
    public static void nlinks$set(MemorySegment seg, long x) {
        constants$206.const$4.set(seg, x);
    }
    public static long nlinks$get(MemorySegment seg, long index) {
        return (long)constants$206.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void nlinks$set(MemorySegment seg, long index, long x) {
        constants$206.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_corder$VH() {
        return constants$206.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t max_corder;
     * }
     */
    public static long max_corder$get(MemorySegment seg) {
        return (long)constants$206.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t max_corder;
     * }
     */
    public static void max_corder$set(MemorySegment seg, long x) {
        constants$206.const$5.set(seg, x);
    }
    public static long max_corder$get(MemorySegment seg, long index) {
        return (long)constants$206.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void max_corder$set(MemorySegment seg, long index, long x) {
        constants$206.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mounted$VH() {
        return constants$207.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hbool_t mounted;
     * }
     */
    public static boolean mounted$get(MemorySegment seg) {
        return (boolean)constants$207.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hbool_t mounted;
     * }
     */
    public static void mounted$set(MemorySegment seg, boolean x) {
        constants$207.const$0.set(seg, x);
    }
    public static boolean mounted$get(MemorySegment seg, long index) {
        return (boolean)constants$207.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void mounted$set(MemorySegment seg, long index, boolean x) {
        constants$207.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


