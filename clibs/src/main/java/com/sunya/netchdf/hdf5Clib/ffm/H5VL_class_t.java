// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5VL_class_t {
 *     unsigned int version;
 *     H5VL_class_value_t value;
 *     char* name;
 *     unsigned int cap_flags;
 *     herr_t (*initialize)(hid_t);
 *     herr_t (*terminate)();
 *     H5VL_info_class_t info_cls;
 *     H5VL_wrap_class_t wrap_cls;
 *     H5VL_attr_class_t attr_cls;
 *     H5VL_dataset_class_t dataset_cls;
 *     H5VL_datatype_class_t datatype_cls;
 *     H5VL_file_class_t file_cls;
 *     H5VL_group_class_t group_cls;
 *     H5VL_link_class_t link_cls;
 *     H5VL_object_class_t object_cls;
 *     H5VL_introspect_class_t introspect_cls;
 *     H5VL_request_class_t request_cls;
 *     H5VL_blob_class_t blob_cls;
 *     H5VL_token_class_t token_cls;
 *     herr_t (*optional)(void*,int,hid_t,void**,struct __va_list_tag*);
 * };
 * }
 */
public class H5VL_class_t {

    public static MemoryLayout $LAYOUT() {
        return constants$318.const$5;
    }
    public static VarHandle version$VH() {
        return constants$319.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int version;
     * }
     */
    public static int version$get(MemorySegment seg) {
        return (int)constants$319.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int version;
     * }
     */
    public static void version$set(MemorySegment seg, int x) {
        constants$319.const$0.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)constants$319.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        constants$319.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle value$VH() {
        return constants$319.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5VL_class_value_t value;
     * }
     */
    public static int value$get(MemorySegment seg) {
        return (int)constants$319.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5VL_class_value_t value;
     * }
     */
    public static void value$set(MemorySegment seg, int x) {
        constants$319.const$1.set(seg, x);
    }
    public static int value$get(MemorySegment seg, long index) {
        return (int)constants$319.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void value$set(MemorySegment seg, long index, int x) {
        constants$319.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle name$VH() {
        return constants$319.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$319.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        constants$319.const$2.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$319.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$319.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cap_flags$VH() {
        return constants$319.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int cap_flags;
     * }
     */
    public static int cap_flags$get(MemorySegment seg) {
        return (int)constants$319.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int cap_flags;
     * }
     */
    public static void cap_flags$set(MemorySegment seg, int x) {
        constants$319.const$3.set(seg, x);
    }
    public static int cap_flags$get(MemorySegment seg, long index) {
        return (int)constants$319.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cap_flags$set(MemorySegment seg, long index, int x) {
        constants$319.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * herr_t (*initialize)(hid_t);
     * }
     */
    public interface initialize {

        int apply(long _x0);
        static MemorySegment allocate(initialize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$319.const$4, fi, constants$19.const$5, scope);
        }
        static initialize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (long __x0) -> {
                try {
                    return (int)constants$319.const$5.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle initialize$VH() {
        return constants$320.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*initialize)(hid_t);
     * }
     */
    public static MemorySegment initialize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$320.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*initialize)(hid_t);
     * }
     */
    public static void initialize$set(MemorySegment seg, MemorySegment x) {
        constants$320.const$0.set(seg, x);
    }
    public static MemorySegment initialize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$320.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void initialize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$320.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static initialize initialize(MemorySegment segment, Arena scope) {
        return initialize.ofAddress(initialize$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*terminate)();
     * }
     */
    public interface terminate {

        int apply();
        static MemorySegment allocate(terminate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$320.const$1, fi, constants$14.const$1, scope);
        }
        static terminate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    return (int)constants$185.const$0.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle terminate$VH() {
        return constants$320.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*terminate)();
     * }
     */
    public static MemorySegment terminate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$320.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*terminate)();
     * }
     */
    public static void terminate$set(MemorySegment seg, MemorySegment x) {
        constants$320.const$2.set(seg, x);
    }
    public static MemorySegment terminate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$320.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void terminate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$320.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static terminate terminate(MemorySegment segment, Arena scope) {
        return terminate.ofAddress(terminate$get(segment), scope);
    }
    public static MemorySegment info_cls$slice(MemorySegment seg) {
        return seg.asSlice(40, 48);
    }
    public static MemorySegment wrap_cls$slice(MemorySegment seg) {
        return seg.asSlice(88, 40);
    }
    public static MemorySegment attr_cls$slice(MemorySegment seg) {
        return seg.asSlice(128, 64);
    }
    public static MemorySegment dataset_cls$slice(MemorySegment seg) {
        return seg.asSlice(192, 64);
    }
    public static MemorySegment datatype_cls$slice(MemorySegment seg) {
        return seg.asSlice(256, 48);
    }
    public static MemorySegment file_cls$slice(MemorySegment seg) {
        return seg.asSlice(304, 48);
    }
    public static MemorySegment group_cls$slice(MemorySegment seg) {
        return seg.asSlice(352, 48);
    }
    public static MemorySegment link_cls$slice(MemorySegment seg) {
        return seg.asSlice(400, 48);
    }
    public static MemorySegment object_cls$slice(MemorySegment seg) {
        return seg.asSlice(448, 40);
    }
    public static MemorySegment introspect_cls$slice(MemorySegment seg) {
        return seg.asSlice(488, 16);
    }
    public static MemorySegment request_cls$slice(MemorySegment seg) {
        return seg.asSlice(504, 48);
    }
    public static MemorySegment blob_cls$slice(MemorySegment seg) {
        return seg.asSlice(552, 32);
    }
    public static MemorySegment token_cls$slice(MemorySegment seg) {
        return seg.asSlice(584, 24);
    }
    /**
     * {@snippet :
 * herr_t (*optional)(void*,int,hid_t,void**,struct __va_list_tag*);
     * }
     */
    public interface optional {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(optional fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$320.const$3, fi, constants$292.const$4, scope);
        }
        static optional ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$293.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle optional$VH() {
        return constants$320.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*optional)(void*,int,hid_t,void**,struct __va_list_tag*);
     * }
     */
    public static MemorySegment optional$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$320.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*optional)(void*,int,hid_t,void**,struct __va_list_tag*);
     * }
     */
    public static void optional$set(MemorySegment seg, MemorySegment x) {
        constants$320.const$4.set(seg, x);
    }
    public static MemorySegment optional$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$320.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void optional$set(MemorySegment seg, long index, MemorySegment x) {
        constants$320.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static optional optional(MemorySegment segment, Arena scope) {
        return optional.ofAddress(optional$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


