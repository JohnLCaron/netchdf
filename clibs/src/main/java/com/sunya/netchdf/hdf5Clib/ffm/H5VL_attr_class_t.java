// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5VL_attr_class_t {
 *     void* (*create)(void*,const H5VL_loc_params_t*,char*,hid_t,hid_t,hid_t,hid_t,hid_t,void**);
 *     void* (*open)(void*,const H5VL_loc_params_t*,char*,hid_t,hid_t,void**);
 *     herr_t (*read)(void*,hid_t,void*,hid_t,void**);
 *     herr_t (*write)(void*,hid_t,void*,hid_t,void**);
 *     herr_t (*get)(void*,H5VL_attr_get_t,hid_t,void**,struct __va_list_tag*);
 *     herr_t (*specific)(void*,const H5VL_loc_params_t*,H5VL_attr_specific_t,hid_t,void**,struct __va_list_tag*);
 *     herr_t (*optional)(void*,H5VL_attr_optional_t,hid_t,void**,struct __va_list_tag*);
 *     herr_t (*close)(void*,hid_t,void**);
 * };
 * }
 */
public class H5VL_attr_class_t {

    public static MemoryLayout $LAYOUT() {
        return constants$290.const$1;
    }
    /**
     * {@snippet :
 * void* (*create)(void*,const H5VL_loc_params_t*,char*,hid_t,hid_t,hid_t,hid_t,hid_t,void**);
     * }
     */
    public interface create {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, long _x3, long _x4, long _x5, long _x6, long _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(create fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$290.const$3, fi, constants$290.const$2, scope);
        }
        static create ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, long __x3, long __x4, long __x5, long __x6, long __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$290.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create$VH() {
        return constants$290.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*create)(void*,const H5VL_loc_params_t*,char*,hid_t,hid_t,hid_t,hid_t,hid_t,void**);
     * }
     */
    public static MemorySegment create$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$290.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*create)(void*,const H5VL_loc_params_t*,char*,hid_t,hid_t,hid_t,hid_t,hid_t,void**);
     * }
     */
    public static void create$set(MemorySegment seg, MemorySegment x) {
        constants$290.const$5.set(seg, x);
    }
    public static MemorySegment create$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$290.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void create$set(MemorySegment seg, long index, MemorySegment x) {
        constants$290.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static create create(MemorySegment segment, Arena scope) {
        return create.ofAddress(create$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*open)(void*,const H5VL_loc_params_t*,char*,hid_t,hid_t,void**);
     * }
     */
    public interface open {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, long _x3, long _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(open fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$291.const$1, fi, constants$291.const$0, scope);
        }
        static open ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, long __x3, long __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$291.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle open$VH() {
        return constants$291.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*open)(void*,const H5VL_loc_params_t*,char*,hid_t,hid_t,void**);
     * }
     */
    public static MemorySegment open$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$291.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*open)(void*,const H5VL_loc_params_t*,char*,hid_t,hid_t,void**);
     * }
     */
    public static void open$set(MemorySegment seg, MemorySegment x) {
        constants$291.const$3.set(seg, x);
    }
    public static MemorySegment open$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$291.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void open$set(MemorySegment seg, long index, MemorySegment x) {
        constants$291.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static open open(MemorySegment segment, Arena scope) {
        return open.ofAddress(open$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*read)(void*,hid_t,void*,hid_t,void**);
     * }
     */
    public interface read {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, java.lang.foreign.MemorySegment _x2, long _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(read fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$291.const$5, fi, constants$291.const$4, scope);
        }
        static read ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, java.lang.foreign.MemorySegment __x2, long __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$292.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle read$VH() {
        return constants$292.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*read)(void*,hid_t,void*,hid_t,void**);
     * }
     */
    public static MemorySegment read$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$292.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*read)(void*,hid_t,void*,hid_t,void**);
     * }
     */
    public static void read$set(MemorySegment seg, MemorySegment x) {
        constants$292.const$1.set(seg, x);
    }
    public static MemorySegment read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$292.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void read$set(MemorySegment seg, long index, MemorySegment x) {
        constants$292.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static read read(MemorySegment segment, Arena scope) {
        return read.ofAddress(read$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*write)(void*,hid_t,void*,hid_t,void**);
     * }
     */
    public interface write {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, java.lang.foreign.MemorySegment _x2, long _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(write fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$292.const$2, fi, constants$291.const$4, scope);
        }
        static write ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, java.lang.foreign.MemorySegment __x2, long __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$292.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle write$VH() {
        return constants$292.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*write)(void*,hid_t,void*,hid_t,void**);
     * }
     */
    public static MemorySegment write$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$292.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*write)(void*,hid_t,void*,hid_t,void**);
     * }
     */
    public static void write$set(MemorySegment seg, MemorySegment x) {
        constants$292.const$3.set(seg, x);
    }
    public static MemorySegment write$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$292.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void write$set(MemorySegment seg, long index, MemorySegment x) {
        constants$292.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static write write(MemorySegment segment, Arena scope) {
        return write.ofAddress(write$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*get)(void*,H5VL_attr_get_t,hid_t,void**,struct __va_list_tag*);
     * }
     */
    public interface get {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(get fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$292.const$5, fi, constants$292.const$4, scope);
        }
        static get ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$293.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get$VH() {
        return constants$293.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*get)(void*,H5VL_attr_get_t,hid_t,void**,struct __va_list_tag*);
     * }
     */
    public static MemorySegment get$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$293.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*get)(void*,H5VL_attr_get_t,hid_t,void**,struct __va_list_tag*);
     * }
     */
    public static void get$set(MemorySegment seg, MemorySegment x) {
        constants$293.const$1.set(seg, x);
    }
    public static MemorySegment get$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$293.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get$set(MemorySegment seg, long index, MemorySegment x) {
        constants$293.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get get(MemorySegment segment, Arena scope) {
        return get.ofAddress(get$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*specific)(void*,const H5VL_loc_params_t*,H5VL_attr_specific_t,hid_t,void**,struct __va_list_tag*);
     * }
     */
    public interface specific {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, long _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(specific fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$293.const$3, fi, constants$293.const$2, scope);
        }
        static specific ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, long __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$293.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle specific$VH() {
        return constants$293.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*specific)(void*,const H5VL_loc_params_t*,H5VL_attr_specific_t,hid_t,void**,struct __va_list_tag*);
     * }
     */
    public static MemorySegment specific$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$293.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*specific)(void*,const H5VL_loc_params_t*,H5VL_attr_specific_t,hid_t,void**,struct __va_list_tag*);
     * }
     */
    public static void specific$set(MemorySegment seg, MemorySegment x) {
        constants$293.const$5.set(seg, x);
    }
    public static MemorySegment specific$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$293.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void specific$set(MemorySegment seg, long index, MemorySegment x) {
        constants$293.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static specific specific(MemorySegment segment, Arena scope) {
        return specific.ofAddress(specific$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*optional)(void*,H5VL_attr_optional_t,hid_t,void**,struct __va_list_tag*);
     * }
     */
    public interface optional {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(optional fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$294.const$0, fi, constants$292.const$4, scope);
        }
        static optional ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$293.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle optional$VH() {
        return constants$294.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*optional)(void*,H5VL_attr_optional_t,hid_t,void**,struct __va_list_tag*);
     * }
     */
    public static MemorySegment optional$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$294.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*optional)(void*,H5VL_attr_optional_t,hid_t,void**,struct __va_list_tag*);
     * }
     */
    public static void optional$set(MemorySegment seg, MemorySegment x) {
        constants$294.const$1.set(seg, x);
    }
    public static MemorySegment optional$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$294.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void optional$set(MemorySegment seg, long index, MemorySegment x) {
        constants$294.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static optional optional(MemorySegment segment, Arena scope) {
        return optional.ofAddress(optional$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*close)(void*,hid_t,void**);
     * }
     */
    public interface close {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(close fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$294.const$2, fi, constants$18.const$0, scope);
        }
        static close ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$18.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle close$VH() {
        return constants$294.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*close)(void*,hid_t,void**);
     * }
     */
    public static MemorySegment close$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$294.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*close)(void*,hid_t,void**);
     * }
     */
    public static void close$set(MemorySegment seg, MemorySegment x) {
        constants$294.const$3.set(seg, x);
    }
    public static MemorySegment close$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$294.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void close$set(MemorySegment seg, long index, MemorySegment x) {
        constants$294.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static close close(MemorySegment segment, Arena scope) {
        return close.ofAddress(close$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


