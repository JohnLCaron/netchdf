// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5_alloc_stats_t {
 *     unsigned long long total_alloc_bytes;
 *     size_t curr_alloc_bytes;
 *     size_t peak_alloc_bytes;
 *     size_t max_block_size;
 *     size_t total_alloc_blocks_count;
 *     size_t curr_alloc_blocks_count;
 *     size_t peak_alloc_blocks_count;
 * };
 * }
 */
public class H5_alloc_stats_t {

    public static MemoryLayout $LAYOUT() {
        return constants$12.const$5;
    }
    public static VarHandle total_alloc_bytes$VH() {
        return constants$13.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long total_alloc_bytes;
     * }
     */
    public static long total_alloc_bytes$get(MemorySegment seg) {
        return (long)constants$13.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long total_alloc_bytes;
     * }
     */
    public static void total_alloc_bytes$set(MemorySegment seg, long x) {
        constants$13.const$0.set(seg, x);
    }
    public static long total_alloc_bytes$get(MemorySegment seg, long index) {
        return (long)constants$13.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void total_alloc_bytes$set(MemorySegment seg, long index, long x) {
        constants$13.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle curr_alloc_bytes$VH() {
        return constants$13.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t curr_alloc_bytes;
     * }
     */
    public static long curr_alloc_bytes$get(MemorySegment seg) {
        return (long)constants$13.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t curr_alloc_bytes;
     * }
     */
    public static void curr_alloc_bytes$set(MemorySegment seg, long x) {
        constants$13.const$1.set(seg, x);
    }
    public static long curr_alloc_bytes$get(MemorySegment seg, long index) {
        return (long)constants$13.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void curr_alloc_bytes$set(MemorySegment seg, long index, long x) {
        constants$13.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle peak_alloc_bytes$VH() {
        return constants$13.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t peak_alloc_bytes;
     * }
     */
    public static long peak_alloc_bytes$get(MemorySegment seg) {
        return (long)constants$13.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t peak_alloc_bytes;
     * }
     */
    public static void peak_alloc_bytes$set(MemorySegment seg, long x) {
        constants$13.const$2.set(seg, x);
    }
    public static long peak_alloc_bytes$get(MemorySegment seg, long index) {
        return (long)constants$13.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void peak_alloc_bytes$set(MemorySegment seg, long index, long x) {
        constants$13.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_block_size$VH() {
        return constants$13.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t max_block_size;
     * }
     */
    public static long max_block_size$get(MemorySegment seg) {
        return (long)constants$13.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t max_block_size;
     * }
     */
    public static void max_block_size$set(MemorySegment seg, long x) {
        constants$13.const$3.set(seg, x);
    }
    public static long max_block_size$get(MemorySegment seg, long index) {
        return (long)constants$13.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void max_block_size$set(MemorySegment seg, long index, long x) {
        constants$13.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle total_alloc_blocks_count$VH() {
        return constants$13.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t total_alloc_blocks_count;
     * }
     */
    public static long total_alloc_blocks_count$get(MemorySegment seg) {
        return (long)constants$13.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t total_alloc_blocks_count;
     * }
     */
    public static void total_alloc_blocks_count$set(MemorySegment seg, long x) {
        constants$13.const$4.set(seg, x);
    }
    public static long total_alloc_blocks_count$get(MemorySegment seg, long index) {
        return (long)constants$13.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void total_alloc_blocks_count$set(MemorySegment seg, long index, long x) {
        constants$13.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle curr_alloc_blocks_count$VH() {
        return constants$13.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t curr_alloc_blocks_count;
     * }
     */
    public static long curr_alloc_blocks_count$get(MemorySegment seg) {
        return (long)constants$13.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t curr_alloc_blocks_count;
     * }
     */
    public static void curr_alloc_blocks_count$set(MemorySegment seg, long x) {
        constants$13.const$5.set(seg, x);
    }
    public static long curr_alloc_blocks_count$get(MemorySegment seg, long index) {
        return (long)constants$13.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void curr_alloc_blocks_count$set(MemorySegment seg, long index, long x) {
        constants$13.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle peak_alloc_blocks_count$VH() {
        return constants$14.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t peak_alloc_blocks_count;
     * }
     */
    public static long peak_alloc_blocks_count$get(MemorySegment seg) {
        return (long)constants$14.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t peak_alloc_blocks_count;
     * }
     */
    public static void peak_alloc_blocks_count$set(MemorySegment seg, long x) {
        constants$14.const$0.set(seg, x);
    }
    public static long peak_alloc_blocks_count$get(MemorySegment seg, long index) {
        return (long)constants$14.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void peak_alloc_blocks_count$set(MemorySegment seg, long index, long x) {
        constants$14.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


