// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union hdf_chunk_def_u {
 *     int32 chunk_lengths[32];
 *     struct  comp;
 *     struct  nbit;
 * };
 * }
 */
public class hdf_chunk_def_u {

    public static MemoryLayout $LAYOUT() {
        return constants$189.const$1;
    }
    public static MemorySegment chunk_lengths$slice(MemorySegment seg) {
        return seg.asSlice(0, 128);
    }
    /**
     * {@snippet :
     * struct {
     *     int32 chunk_lengths[32];
     *     int32 comp_type;
     *     int32 model_type;
     *     comp_info cinfo;
     *     model_info minfo;
     * };
     * }
     */
    public static final class comp {

        // Suppresses default constructor, ensuring non-instantiability.
        private comp() {}
        public static MemoryLayout $LAYOUT() {
            return constants$189.const$2;
        }
        public static MemorySegment chunk_lengths$slice(MemorySegment seg) {
            return seg.asSlice(0, 128);
        }
        public static VarHandle comp_type$VH() {
            return constants$189.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int32 comp_type;
         * }
         */
        public static int comp_type$get(MemorySegment seg) {
            return (int)constants$189.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int32 comp_type;
         * }
         */
        public static void comp_type$set(MemorySegment seg, int x) {
            constants$189.const$3.set(seg, x);
        }
        public static int comp_type$get(MemorySegment seg, long index) {
            return (int)constants$189.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void comp_type$set(MemorySegment seg, long index, int x) {
            constants$189.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle model_type$VH() {
            return constants$189.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int32 model_type;
         * }
         */
        public static int model_type$get(MemorySegment seg) {
            return (int)constants$189.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int32 model_type;
         * }
         */
        public static void model_type$set(MemorySegment seg, int x) {
            constants$189.const$4.set(seg, x);
        }
        public static int model_type$get(MemorySegment seg, long index) {
            return (int)constants$189.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void model_type$set(MemorySegment seg, long index, int x) {
            constants$189.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment cinfo$slice(MemorySegment seg) {
            return seg.asSlice(136, 20);
        }
        public static MemorySegment minfo$slice(MemorySegment seg) {
            return seg.asSlice(160, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment comp$slice(MemorySegment seg) {
        return seg.asSlice(0, 176);
    }
    /**
     * {@snippet :
     * struct {
     *     int32 chunk_lengths[32];
     *     intn start_bit;
     *     intn bit_len;
     *     intn sign_ext;
     *     intn fill_one;
     * };
     * }
     */
    public static final class nbit {

        // Suppresses default constructor, ensuring non-instantiability.
        private nbit() {}
        public static MemoryLayout $LAYOUT() {
            return constants$189.const$5;
        }
        public static MemorySegment chunk_lengths$slice(MemorySegment seg) {
            return seg.asSlice(0, 128);
        }
        public static VarHandle start_bit$VH() {
            return constants$190.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * intn start_bit;
         * }
         */
        public static int start_bit$get(MemorySegment seg) {
            return (int)constants$190.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * intn start_bit;
         * }
         */
        public static void start_bit$set(MemorySegment seg, int x) {
            constants$190.const$0.set(seg, x);
        }
        public static int start_bit$get(MemorySegment seg, long index) {
            return (int)constants$190.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void start_bit$set(MemorySegment seg, long index, int x) {
            constants$190.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bit_len$VH() {
            return constants$190.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * intn bit_len;
         * }
         */
        public static int bit_len$get(MemorySegment seg) {
            return (int)constants$190.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * intn bit_len;
         * }
         */
        public static void bit_len$set(MemorySegment seg, int x) {
            constants$190.const$1.set(seg, x);
        }
        public static int bit_len$get(MemorySegment seg, long index) {
            return (int)constants$190.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void bit_len$set(MemorySegment seg, long index, int x) {
            constants$190.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sign_ext$VH() {
            return constants$190.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * intn sign_ext;
         * }
         */
        public static int sign_ext$get(MemorySegment seg) {
            return (int)constants$190.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * intn sign_ext;
         * }
         */
        public static void sign_ext$set(MemorySegment seg, int x) {
            constants$190.const$2.set(seg, x);
        }
        public static int sign_ext$get(MemorySegment seg, long index) {
            return (int)constants$190.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void sign_ext$set(MemorySegment seg, long index, int x) {
            constants$190.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fill_one$VH() {
            return constants$190.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * intn fill_one;
         * }
         */
        public static int fill_one$get(MemorySegment seg) {
            return (int)constants$190.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * intn fill_one;
         * }
         */
        public static void fill_one$set(MemorySegment seg, int x) {
            constants$190.const$3.set(seg, x);
        }
        public static int fill_one$get(MemorySegment seg, long index) {
            return (int)constants$190.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void fill_one$set(MemorySegment seg, long index, int x) {
            constants$190.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment nbit$slice(MemorySegment seg) {
        return seg.asSlice(0, 144);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


